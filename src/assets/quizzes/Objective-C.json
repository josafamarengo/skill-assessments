{"title": "Objective-C", "questions": [{"question": "Q1. What is the value of s?\n<p><code>NSMutableString *s = [NSMutableString stringWithString: @\"123\"];\n[s appendString: @\"456\"];</code></p>\n", "alternatives": [{"alternative": " 123456\n", "is_correct": true}, {"alternative": " 123\n", "is_correct": false}, {"alternative": " 456\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q2. What's the value of i after these statements?\n<p><code>NSString *str = nil;\nNSInteger i = str.integerValue;</code></p>\n", "alternatives": [{"alternative": " nil\n", "is_correct": false}, {"alternative": " 0 (technically <code>nil</code> == 0 but i will have a literal value of <code>0</code> and not the <code>void*</code> value of <code>nil</code>)\n", "is_correct": true}, {"alternative": " -1\n", "is_correct": false}, {"alternative": " This code crashes.\n</ul>\n", "is_correct": false}]}, {"question": "Q3. What value is in str after this line in executed?\n<p><code>NSString str = \"test\" + \" \" + \"more\";</code></p>\n", "alternatives": [{"alternative": " This code contains an error\n", "is_correct": true}, {"alternative": " test\n", "is_correct": false}, {"alternative": " nil\n", "is_correct": false}, {"alternative": " test more\n</ul>\n", "is_correct": false}]}, {"question": "Q4. What does this code print?\n<p><code>NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary&lt;NSString *,id&gt; * _Nullable bindings) {\n      return evaluatedObject.intValue % 2 == 0;\n    }];\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n    NSLog(@\"%@\", n2.firstObject);</code></p>\n", "alternatives": [{"alternative": " 2\n", "is_correct": true}, {"alternative": " 1,2,3\n", "is_correct": false}, {"alternative": " 1,2\n", "is_correct": false}, {"alternative": " Nothing, since this code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q5. Property defaults include _?\n", "alternatives": [{"alternative": " atomic/strong\n", "is_correct": true}, {"alternative": " atomic/weak\n", "is_correct": false}, {"alternative": " nonatomic/weak\n", "is_correct": false}, {"alternative": " nonatomic/strong\n</ul>\n", "is_correct": false}]}, {"question": "Q6. What is the key difference between NSDictionary and NSMutableDictionary?\n", "alternatives": [{"alternative": " NSMutableDictionary's values can change\n", "is_correct": true}, {"alternative": " NSMutableDictionary has not initializers.\n", "is_correct": false}, {"alternative": " NSDictionary can't be copied.\n", "is_correct": false}, {"alternative": " NSDictionary's values can change.\n</ul>\n", "is_correct": false}]}, {"question": "Q7. What is foo?\n<p><code>-(float)foo;</code></p>\n", "alternatives": [{"alternative": " A function with a return type of float.\n", "is_correct": true}, {"alternative": " This code contains an error.\n", "is_correct": false}, {"alternative": " A variable declaration of type float.\n", "is_correct": false}, {"alternative": " A property of type float.\n</ul>\n", "is_correct": false}]}, {"question": "Q8. What can you glean from this line?\n<p><code>#import \"NSString+NameHelper.h\"</code></p>\n", "alternatives": [{"alternative": " NameHelper is a category of NSString.\n", "is_correct": true}, {"alternative": " NameHelper is a subclass of NSString.\n", "is_correct": false}, {"alternative": " NSString implements the NameHelper protocol.\n", "is_correct": false}, {"alternative": " NSString has a helper class.\n</ul>\n", "is_correct": false}]}, {"question": "Q9. What's wrong with this code?\n<p><code>float x = 5.;</code></p>\n", "alternatives": [{"alternative": " Nothing is wrong with this code.\n", "is_correct": true}, {"alternative": " Declarations do not need semicolons.\n", "is_correct": false}, {"alternative": " x=5 is an invalid float.\n", "is_correct": false}, {"alternative": " Variables can't be declared and initialized in the same state.\n</ul>\n", "is_correct": false}]}, {"question": "Q10. How many times with this loop be executed?\n<p><code>for (int x=0; x&lt;100; x++) {\n  x = x + 1;\n}</code></p>\n", "alternatives": [{"alternative": " 50\n", "is_correct": true}, {"alternative": " 99\n", "is_correct": false}, {"alternative": " 100\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q11. What is this code an example of?\n<p><code>[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];</code></p>\n", "alternatives": [{"alternative": " Key-Value Observing\n", "is_correct": true}, {"alternative": " Class Value Observing\n", "is_correct": false}, {"alternative": " Key-Data Observing\n", "is_correct": false}, {"alternative": " KeyPath Observing\n</ul>\n", "is_correct": false}]}, {"question": "Q12. What does ARC stand for?\n", "alternatives": [{"alternative": " Automatic Reference Counting\n", "is_correct": true}, {"alternative": " Automatic Retain Checking\n", "is_correct": false}, {"alternative": " Async Retain Cycles\n", "is_correct": false}, {"alternative": " Automatic Release Code\n</ul>\n", "is_correct": false}]}, {"question": "Q13. What is printed for this code?\n<p><code>int val = 0;\nval = 1.5;\nprintf(\"%d\", val);</code></p>\n", "alternatives": [{"alternative": " 1\n", "is_correct": true}, {"alternative": " 2\n", "is_correct": false}, {"alternative": " 0\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q14. What best describes class inheritance in Objective-C?\n", "alternatives": [{"alternative": " single inheritance but multiple protocol implementation\n", "is_correct": true}, {"alternative": " Objective-C doesn't support inheritance\n", "is_correct": false}, {"alternative": " dual class inheritance\n", "is_correct": false}, {"alternative": " unlimited class inheritance and protocol adherence\n</ul>\n", "is_correct": false}]}, {"question": "Q15. How many keys does this NSDictionary have after this code is executed?\n<p><code>NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];</code></p>\n", "alternatives": [{"alternative": " 2\n", "is_correct": true}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q16. What is wrong with this code?\n<p><code>NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@\"key\" forKey:@\"value\"];</code></p>\n", "alternatives": [{"alternative": " The key and value items are mixed\n", "is_correct": false}, {"alternative": " Nothing is wrong with it\n", "is_correct": true}, {"alternative": " You can't set the capacity of a dictionary\n", "is_correct": false}, {"alternative": " NSMutableDictionary doesn't have a :setValue:forKey function.\n</ul>\n", "is_correct": false}]}, {"question": "Q17. What is printed from this code?\n<p><code>NSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);</code></p>\n", "alternatives": [{"alternative": " print\n", "is_correct": true}, {"alternative": " This code is invalid\n", "is_correct": false}, {"alternative": " Nothing is printed from this code.\n", "is_correct": false}, {"alternative": " nil\n</ul>\n", "is_correct": false}]}, {"question": "Q18. What is different about this function?\n<p><code>+(void)doSomething;</code></p>\n", "alternatives": [{"alternative": " It is static\n", "is_correct": true}, {"alternative": " It is abstract.\n", "is_correct": false}, {"alternative": " It is inline.\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q19. Structs can have _?\n", "alternatives": [{"alternative": " functions\n", "is_correct": false}, {"alternative": " initializers\n", "is_correct": false}, {"alternative": " fields\n", "is_correct": true}, {"alternative": " all of these answers\n</ul>\n", "is_correct": false}]}, {"question": "Q20. What is wrong with this code?\n<p><code>@interface MyClass : NSObject\n    @property (strong, nonatomic, readonly) NSString *name;\n  @end</code></p>\n", "alternatives": [{"alternative": " There is nothing wrong with this code.\n", "is_correct": true}, {"alternative": " There is not read-only directive.\n", "is_correct": false}, {"alternative": " MyClass doesn't implement NSObject.\n", "is_correct": false}, {"alternative": " Properties are declared in the implementation.\n</ul>\n", "is_correct": false}]}, {"question": "Q21. What is an enums base type for the code below?\n<p><code>typedef enum { Foo1, Foo2} Foo;</code></p>\n", "alternatives": [{"alternative": " There is no base type.\n", "is_correct": true}, {"alternative": " NSObject\n", "is_correct": false}, {"alternative": " int\n", "is_correct": false}, {"alternative": " NSNumber\n</ul>\n", "is_correct": false}]}, {"question": "Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?\n", "alternatives": [{"alternative": " UserDefaults\n", "is_correct": true}, {"alternative": " plist file\n", "is_correct": false}, {"alternative": " CoreData\n", "is_correct": false}, {"alternative": " TextFile\n</ul>\n", "is_correct": false}]}, {"question": "Q23. What are categories used for?\n", "alternatives": [{"alternative": " to extend other classes\n", "is_correct": true}, {"alternative": " to manage access control\n", "is_correct": false}, {"alternative": " to coordinate objects\n", "is_correct": false}, {"alternative": " to group classes\n</ul>\n", "is_correct": false}]}, {"question": "Q24. What is this Objective-C code checking?\n<p><code>if ([keyPath isInstanceOf:[NSString class]]) {\n}</code></p>\n", "alternatives": [{"alternative": " This code contains an error\n", "is_correct": true}, {"alternative": " if keyPath is an instance of NSString\n", "is_correct": false}, {"alternative": " if keyPath's baseclass is the same as NSString's baseclass\n", "is_correct": false}, {"alternative": " if keyPath implements the same methods as NSString\n</ul>\n", "is_correct": false}]}, {"question": "Q25. What is this a declaration of?\n<p><code>int(^foo)(int);</code></p>\n", "alternatives": [{"alternative": " an Extension\n", "is_correct": false}, {"alternative": " a Generic\n", "is_correct": false}, {"alternative": " a block of code\n", "is_correct": true}, {"alternative": " an abstract class\n</ul>\n", "is_correct": false}]}, {"question": "Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?\n<p><code>1. _val = 1;\n2. self.val= 100;</code></p>\n", "alternatives": [{"alternative": " Statement 2, since it calls the auto-created setter on the property.\n", "is_correct": true}, {"alternative": " Statement 1, since it uses the property directly.\n", "is_correct": false}, {"alternative": " Statement 2, since it specifies the class instance to use.\n", "is_correct": false}, {"alternative": " Statement 1, since it calls the auto-created setter on the property.\n</ul>\n", "is_correct": false}]}, {"question": "Q27. What is wrong with this code?\n<p><code>float x = 2.0;\nint(^foo)(int) = ^(int n1) {\n  return (int)(n1*x);\n};\nfoo(5);</code></p>\n", "alternatives": [{"alternative": " Ints and floats can't be multiplied.\n", "is_correct": false}, {"alternative": " The parameter isn't declared correctly.\n", "is_correct": false}, {"alternative": " x is not in the right scope.\n", "is_correct": false}, {"alternative": " Nothing is wrong with this code.\n</ul>\n", "is_correct": true}]}, {"question": "Q28. What's the difference between an array and a set?\n", "alternatives": [{"alternative": " Arrays are ordered, non-unique values.\n", "is_correct": true}, {"alternative": " Arrays are stored sorted.\n", "is_correct": false}, {"alternative": " Sets are ordered, unique values.\n", "is_correct": false}, {"alternative": " Sets can contain nils.\n</ul>\n", "is_correct": false}]}, {"question": "Q29. Dot notation can be used for _?\n", "alternatives": [{"alternative": " nothing, as they're never used in Objective-C\n", "is_correct": false}, {"alternative": " function calls only\n", "is_correct": false}, {"alternative": " property getter/setter\n", "is_correct": true}, {"alternative": " parameter delimiters\n</ul>\n", "is_correct": false}]}, {"question": "Q30. What is the value of newVals after this code is executed?\n<p><code>NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\nNSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue &gt; 1\"];\nNSArray *newVals = [vals filteredArrayUsingPredicate:pred];</code></p>\n", "alternatives": [{"alternative": " 2,3\n", "is_correct": true}, {"alternative": " nil\n", "is_correct": false}, {"alternative": " This code contains an error\n", "is_correct": false}, {"alternative": " 2,\"3\"\n</ul>\n", "is_correct": false}]}, {"question": "Q31. How would this function be called?\n<p><code>-(int)foo:(int)a b:(int)c;</code></p>\n", "alternatives": [{"alternative": " self.foo(5, b:10);\n", "is_correct": false}, {"alternative": " This code contains an error.\n", "is_correct": false}, {"alternative": " [self foo:5:10:20];\n", "is_correct": false}, {"alternative": " [self foo:5 b:10];\n</ul>\n", "is_correct": true}]}, {"question": "Q32. What is the type of the error return value stored in json?\n<p><code>NSError *error;\nNSData *data;\nid json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&amp;error];</code></p>\n", "alternatives": [{"alternative": " NSString\n", "is_correct": false}, {"alternative": " NSArray\n", "is_correct": false}, {"alternative": " id\n", "is_correct": false}, {"alternative": " NSDictionary\n</ul>\n", "is_correct": false}]}, {"question": "Q33. What is significant about this function declaration?\n<p><code>-(void)testFunc:(NSString**)str;</code></p>\n", "alternatives": [{"alternative": " The parameter is passed by value and can not be changed\n", "is_correct": false}, {"alternative": " ** is not allowed on a parameter\n", "is_correct": false}, {"alternative": " The parameter may be nil\n", "is_correct": false}, {"alternative": " The parameter is passed by reference and may be changed\n</ul>\n", "is_correct": true}]}, {"question": "Q34. What is printed from this code execution?\n<p>```\ntypedef enum {\n    thing1,\n    thing2,\n    thing3\n} Thing;</p>\n<p>-(void) enumStuff {\n    NSLog(@\"%d\", thing2);\n}\n```</p>\n", "alternatives": [{"alternative": " 0\n", "is_correct": false}, {"alternative": " 1\n", "is_correct": true}, {"alternative": " thing2\n", "is_correct": false}, {"alternative": " This code does not print anything\n</ul>\n", "is_correct": false}]}, {"question": "Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?\n", "alternatives": [{"alternative": " non-atomic\n", "is_correct": false}, {"alternative": " strong\n", "is_correct": false}, {"alternative": " weak\n", "is_correct": false}, {"alternative": " atomic\n</ul>\n", "is_correct": true}]}, {"question": "Q36. What is wrong with this line of code?\n<p><code>int temp = 1==1;</code></p>\n", "alternatives": [{"alternative": " <code>temp</code> is a keyword.\n", "is_correct": false}, {"alternative": " 1==1 is invalid.\n", "is_correct": false}, {"alternative": " 1==1 evaluates to a Boolean.\n", "is_correct": false}, {"alternative": " Nothing is wrong with it.\n</ul>\n", "is_correct": true}]}, {"question": "Q37. What is special about the code within this block?\n<p><code>dispatch_async(dispatch_get_main_queue(), ^{\n// code\n});</code></p>\n", "alternatives": [{"alternative": " It executes on the main queue.\n", "is_correct": true}, {"alternative": " It is the last code to run before the app goes inactive.\n", "is_correct": false}, {"alternative": " It executes on a background thread.\n", "is_correct": false}, {"alternative": " It is queued to execute in the background.\n</ul>\n", "is_correct": false}]}, {"question": "Q38. How many items are in set1 after this code executes?\n<p><code>NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\n[set1 add0bject:@3];</code></p>\n", "alternatives": [{"alternative": " zero\n", "is_correct": false}, {"alternative": " six\n", "is_correct": false}, {"alternative": " one\n", "is_correct": false}, {"alternative": " five\n</ul>\n", "is_correct": true}]}, {"question": "Q39. What is wrong with this code?\n<p><code>NSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"];\nNSlog(@\"d1: %@\", d1);</code></p>\n", "alternatives": [{"alternative": " NSDictionary cannot be printed this way.\n", "is_correct": false}, {"alternative": " The last key is missing a value.\n", "is_correct": true}, {"alternative": " Dictionaries cannot have mixed types as values.\n", "is_correct": false}, {"alternative": " d1 is assigned an NSArray of values.\n</ul>\n", "is_correct": false}]}, {"question": "Q40. What is the initial value of the property <code>val</code>?\n<p><code>@property (nonatomic, readonly) int val;</code></p>\n", "alternatives": [{"alternative": " 8\n", "is_correct": false}, {"alternative": " nil\n", "is_correct": false}, {"alternative": " -1\n", "is_correct": false}, {"alternative": " undefined\n</ul>\n", "is_correct": false}]}, {"question": "Q41. Which thread should UI updates be processed on to avoid crashes and application lag?\n", "alternatives": [{"alternative": " UI\n", "is_correct": true}, {"alternative": " dispatch\n", "is_correct": false}, {"alternative": " background\n", "is_correct": false}, {"alternative": " main\n</ul>", "is_correct": false}]}]}