{"title": "Swift", "questions": [{"question": "Q1. What is this code an example of?\n<p><code>swift\nlet val = (Double)6</code></p>\n", "alternatives": [{"alternative": " A syntax issue\n", "is_correct": true}, {"alternative": " Typecasting\n", "is_correct": false}, {"alternative": " Assignment\n", "is_correct": false}, {"alternative": " Initialization\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID310\"><em>The Swift Programming Language: Language Guide: The Basics: Constants and Variables</em></a></p>\n", "is_correct": false}]}, {"question": "Q2. What is the error in this code?\n<p><code>swift\nlet x = 5\nguard x == 5 { return }</code></p>\n", "alternatives": [{"alternative": " The <code>guard</code> is missing the <code>else</code>\n", "is_correct": true}, {"alternative": " Nothing is wrong\n", "is_correct": false}, {"alternative": " The <code>guard</code> is missing a <code>then</code>\n", "is_correct": false}, {"alternative": " The comparison is wrong\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525\"><em>The Swift Programming Language: Language Guide: Control Flow: Early Exit</em></a></p>\n", "is_correct": false}]}, {"question": "Q3. What is the raw/underlying type of this enum?\n<p><code>swift\nenum Direction {\n  case north, south, east, west\n}</code></p>\n", "alternatives": [{"alternative": " There is none\n", "is_correct": true}, {"alternative": " <code>String</code>\n", "is_correct": false}, {"alternative": " <code>Any</code>\n", "is_correct": false}, {"alternative": " <code>Int</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID149\"><em>The Swift Programming Language: Language Guide: Enumerations: Raw Values</em></a></p>\n", "is_correct": false}]}, {"question": "Q4. Why is dispatchGroup used in certain situations?\n", "alternatives": [{"alternative": " It allows multiple synchronous or asynchronous operations to run on different queues.\n", "is_correct": false}, {"alternative": " It allows track and control execution of multiple operations together.\n", "is_correct": false}, {"alternative": " It allows operations to wait for each other as desired.\n", "is_correct": false}, {"alternative": " All of these answers.\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/dispatch/dispatchgroup\">Apple Developer: Documentation: Dispatch: Dispatch Group</a></p>\n", "is_correct": true}]}, {"question": "Q5. What is this code an example of?\n<p><code>swift\nlet val = 5\nprint(\"value is: \\(val)\")</code></p>\n", "alternatives": [{"alternative": " String interpolation\n", "is_correct": true}, {"alternative": " String compilation\n", "is_correct": false}, {"alternative": " Method chaining\n", "is_correct": false}, {"alternative": " String concatenation\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID292\"><em>The Swift Programming Language: Language Guide: Strings and Characters: String Interpolation</em></a></p>\n", "is_correct": false}]}, {"question": "Q6. What are the contents of <code>vals</code> after this code is executed?\n<p><code>swift\nvar vals = [10, 2]\nvals.sort { (s1, s2) -&gt; Bool in\n  s1 &gt; s2\n}</code></p>\n", "alternatives": [{"alternative": " <code>[10, 2]</code>\n", "is_correct": true}, {"alternative": " <code>[2, 10]</code>\n", "is_correct": false}, {"alternative": " <code>nil</code>\n", "is_correct": false}, {"alternative": " This code contains an error\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/swift/array/sort()\">Apple Developer: Documentations: Swift: Array: sort()</a></p>\n", "is_correct": false}]}, {"question": "Q7. What does this code print?\n<p><code>swift\ntypealias Thing = [String: Any]\nvar stuff: Thing\nprint(type(of: stuff))</code></p>\n", "alternatives": [{"alternative": " <code>Dictionary&lt;String, Any&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Dictionary</code>\n", "is_correct": false}, {"alternative": " <code>Error</code>\n", "is_correct": false}, {"alternative": " <code>Thing</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID447\"><em>The Swift Programming Language: Language Reference: Types: Type Identifier</em></a></p>\n", "is_correct": false}]}, {"question": "Q8. What is the value of y?\n<p><code>swift\nlet x = [\"1\", \"2\"].dropFirst()\nlet y = x[0]</code></p>\n", "alternatives": [{"alternative": " This code contains an error\n", "is_correct": true}, {"alternative": " <code>1</code>\n", "is_correct": false}, {"alternative": " <code>2</code>\n", "is_correct": false}, {"alternative": " <code>nil</code>\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/swift/array/dropfirst(_:)\">Apple Developer: Documentation: Swift: Array: dropFirst(_:)</a></p>\n", "is_correct": false}]}, {"question": "Q9. What is the value of test in this code?\n<p><code>swift\nvar test = 1 == 1</code></p>\n", "alternatives": [{"alternative": " <code>true</code>\n", "is_correct": true}, {"alternative": " <code>YES</code>\n", "is_correct": false}, {"alternative": " <code>1</code>\n", "is_correct": false}, {"alternative": " This code contains an error\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID70\"><em>The Swift Programming Language: Language Guide: Basic Operators: Comparison Operators</em></a></p>\n", "is_correct": false}]}, {"question": "Q10. What is the value of y?\n<p><code>swift\nvar x: Int?\nlet y = x ?? 5</code></p>\n", "alternatives": [{"alternative": " <code>5</code>\n", "is_correct": true}, {"alternative": " <code>0</code>\n", "is_correct": false}, {"alternative": " <code>nil</code>\n", "is_correct": false}, {"alternative": " This code contains an error\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72\"><em>The Swift Programming Language: Language Guide: Basic Operators: Nil-Coalescing Operators</em></a></p>\n", "is_correct": false}]}, {"question": "Q11. What is the type of this function?\n<p><code>swift\nfunc add(a: Int, b: Int) -&gt; Int { return a+b }</code></p>\n", "alternatives": [{"alternative": " <code>Int</code>\n", "is_correct": false}, {"alternative": " <code>(Int, Int) -&gt; Int</code>\n", "is_correct": true}, {"alternative": " <code>Int&lt;Optional&gt;</code>\n", "is_correct": false}, {"alternative": " Functions don't have types.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID174\"><em>The Swift Programming Language: Language Guide: Functions: Function Types</em></a></p>\n", "is_correct": false}]}, {"question": "Q12. What is the correct way to call this function?\n<p><code>swift\nfunc myFunc(_ a: Int, b: Int) -&gt; Int {\n  return a + b\n}</code></p>\n", "alternatives": [{"alternative": " <code>myFunc(5, b: 6)</code>\n", "is_correct": true}, {"alternative": " <code>myFunc(5, 6)</code>\n", "is_correct": false}, {"alternative": " <code>myFunc(a: 5, b: 6)</code>\n", "is_correct": false}, {"alternative": " <code>myFunc(a, b)</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166\"><em>The Swift Programming Language: Language Guide: Functions: Function Argument Labels and Parameter Names</em></a></p>\n", "is_correct": false}]}, {"question": "Q13. The Codable protocol is <strong>_</strong>?\n", "alternatives": [{"alternative": " A combination of <code>Encodable</code> and <code>Decodable</code>\n", "is_correct": true}, {"alternative": " Not a true protocol\n", "is_correct": false}, {"alternative": " Required of all classes\n", "is_correct": false}, {"alternative": " Automatically included in all classes\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/codable/\">Apple Developer: Documentation: Swift: Swift Standard Library: Encoding, Decoding, and Serialization: Codable</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID282\"><em>The Swift Programming Language: Language Guide: Protocols: Protocol Composition</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q14. What is the type of value1 in this code?\n<p><code>swift\nlet value1 = \"\\(\"test\".count)\"</code></p>\n", "alternatives": [{"alternative": " <code>String</code>\n", "is_correct": true}, {"alternative": " <code>Int</code>\n", "is_correct": false}, {"alternative": " <code>null</code>\n", "is_correct": false}, {"alternative": " <code>test.count</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID292\"><em>The Swift Programming Language: Language Guide: Strings and Characters: String Interpolation</em></a></p>\n", "is_correct": false}]}, {"question": "Q15. When a function takes a closure as a parameter, when do you want to mark is as escaping?\n", "alternatives": [{"alternative": " When it's executed after the function returns\n", "is_correct": true}, {"alternative": " When it's scope is undefined\n", "is_correct": false}, {"alternative": " When it's lazy loaded\n", "is_correct": false}, {"alternative": " All of these answers\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546\"><em>The Swift Programming Language: Language Guide: Closures: Escaping Closures</em></a></p>\n", "is_correct": false}]}, {"question": "Q16. What's wrong with this code?\n<p><code>swift\nclass Person {\n  var name: String\n  var address: String\n}</code></p>\n", "alternatives": [{"alternative": " Person has no initializers.\n", "is_correct": true}, {"alternative": " Person has no base class.\n", "is_correct": false}, {"alternative": " <code>var name</code> is not formatted correctly.\n", "is_correct": false}, {"alternative": " <code>address</code> is a keyword.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216\"><em>The Swift Programming Language: Language Guide: Initialization: Class Inheritance and Initialization</em></a></p>\n", "is_correct": false}]}, {"question": "Q17. What is the value of names after this code is executed?\n<p><code>swift\nlet names = [\"Bear\", \"Joe\", \"Clark\"]\nnames.map { (s) -&gt; String in\n  return s.uppercased()\n}</code></p>\n", "alternatives": [{"alternative": " <code>[\"BEAR\", \"JOE\", \"CLARK\"]</code>\n", "is_correct": false}, {"alternative": " <code>[\"B\", \"J\", \"C\"]</code>\n", "is_correct": false}, {"alternative": " <code>[\"Bear\", \"Joe\", \"Clark\"]</code>\n", "is_correct": true}, {"alternative": " This code contains an error.\n</ul>\n", "is_correct": false}]}, {"question": "Q18. What describes this line of code?\n<p><code>swift\nlet val = 5</code></p>\n", "alternatives": [{"alternative": " A constant named val of type <code>Int</code>\n", "is_correct": true}, {"alternative": " A variable named val of type <code>item</code>\n", "is_correct": false}, {"alternative": " A constant named val of type <code>Number</code>\n", "is_correct": false}, {"alternative": " A variable named val of type <code>Int</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322\"><em>The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference</em></a></p>\n", "is_correct": false}]}, {"question": "Q19. What is the error in this code?\n<p><code>swift\nextension String {\n  var firstLetter: Character = \"c\" {\n    didSet {\n      print(\"new value\")\n    }\n  }\n}</code></p>\n", "alternatives": [{"alternative": " Extensions can't add properties.\n", "is_correct": true}, {"alternative": " Nothing is wrong with it.\n", "is_correct": false}, {"alternative": " <code>didSet</code> takes a parameter.\n", "is_correct": false}, {"alternative": " <code>c</code> is not a character.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html#ID152\"><em>The Swift Programming Language: Language Guide: Extensions: Computed Properties</em></a></p>\n", "is_correct": false}]}, {"question": "Q20. didSet and willSet are examples of <strong>_</strong>?\n", "alternatives": [{"alternative": " Property observers\n", "is_correct": true}, {"alternative": " Key properties\n", "is_correct": false}, {"alternative": " All of these answers\n", "is_correct": false}, {"alternative": " <code>newOld</code> value calls\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262\"><em>The Swift Programming Language: Language Guide: Properties</em></a></p>\n", "is_correct": false}]}, {"question": "Q21. What is wrong with this code?\n<p><code>swift\nself.callback = {\n  self.attempts += 1\n  self.downloadFailed()\n}</code></p>\n", "alternatives": [{"alternative": " Use of <code>self</code> inside the closure causes retain cycle.\n", "is_correct": true}, {"alternative": " You cannot assign a value to a closure in this manner.\n", "is_correct": false}, {"alternative": " You need to define the type of closure explicitly.\n", "is_correct": false}, {"alternative": " There is nothing wrong with this code.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56\"><em>The Swift Programming Language: Language Guide: Automatic Reference Counting: Strong Reference Cycles for Closures</em></a></p>\n", "is_correct": false}]}, {"question": "Q22. How many values does vals have after this code is executed?\n<p><code>swift\nvar vals = Set&lt;String&gt; = [\"4\", \"5\", \"6\"]\nvals.insert(\"5\")</code></p>\n", "alternatives": [{"alternative": " Three\n", "is_correct": false}, {"alternative": " Four\n", "is_correct": false}, {"alternative": " Eight\n", "is_correct": false}, {"alternative": " This code contains an error.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID484\"><em>The Swift Programming Language: Language Guide: Collection Types: Sets</em></a></p>\n", "is_correct": true}]}, {"question": "Q23. How can you avoid a strong reference cycle in a closure?\n", "alternatives": [{"alternative": " Use a capture list to set class instances of <code>weak</code> or <code>unowned</code>.\n", "is_correct": true}, {"alternative": " You can't, there will always be a danger of strong reference cycles inside a closure.\n", "is_correct": false}, {"alternative": " Initialize the closure as read-only.\n", "is_correct": false}, {"alternative": " Declare the closure variable as <code>lazy</code>.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56\">_The Swift Programming Language: Language Guide: Automatic Reference Counting</a></p>\n", "is_correct": false}]}, {"question": "Q24. What is wrong with this code?\n<p><code>swift\nif let s = String.init(\"some string\") {\n  print(s)\n}</code></p>\n", "alternatives": [{"alternative": " This <code>String</code> initializer does not return an optional.\n", "is_correct": true}, {"alternative": " String does not have an initializer that can take a <code>String</code>.\n", "is_correct": false}, {"alternative": " <code>=</code> is not a comparison.\n", "is_correct": false}, {"alternative": " Nothing is wrong with this code.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\"><em>The Swift Programming Language: Language Guide: The Basics: Optionals</em></a></p>\n", "is_correct": false}]}, {"question": "Q25. Which code snippet correctly creates a typealias closure?\n", "alternatives": [{"alternative": " <code>typealias CustomClosure = () -&gt; ()</code>\n", "is_correct": true}, {"alternative": " <code>typealias CustomClosure { () -&gt; () }</code>\n", "is_correct": false}, {"alternative": " <code>typealias CustomClosure -&gt; () -&gt; ()</code>\n", "is_correct": false}, {"alternative": " <code>typealias CustomClosure -&gt; () {}</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_typealias-declaration\"><em>The Swift Programming Language: Language Reference: Declarations: Type Alias Declaration</em></a></p>\n", "is_correct": false}]}, {"question": "Q26. How do you reference class members from within a class?\n", "alternatives": [{"alternative": " <code>self</code>\n", "is_correct": true}, {"alternative": " <code>instance</code>\n", "is_correct": false}, {"alternative": " <code>class</code>\n", "is_correct": false}, {"alternative": " <code>this</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID235\"><em>The Swift Programming Language: Language Guide: Methods: Instance Methods</em></a></p>\n", "is_correct": false}]}, {"question": "Q27. All value types in Swift are <strong>_</strong> under the hood?\n", "alternatives": [{"alternative": " Structs\n", "is_correct": true}, {"alternative": " Classes\n", "is_correct": false}, {"alternative": " Optionals\n", "is_correct": false}, {"alternative": " Generics\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88\"><em>The Swift Programming Language: Language Guide: Structures and Classes</em></a></p>\n", "is_correct": false}]}, {"question": "Q28. What is the correct way to add a value to this array?\n<p><code>swift\nvar strings = [1, 2, 3]</code></p>\n", "alternatives": [{"alternative": " All of these answers\n", "is_correct": true}, {"alternative": " <code>strings.append(4)</code>\n", "is_correct": false}, {"alternative": " <code>strings.insert(5, at: 1)</code>\n", "is_correct": false}, {"alternative": " <code>strings += [5]</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107\"><em>The Swift Programming Language: Language Guide: Collection Types: Arrays</em></a></p>\n", "is_correct": false}]}, {"question": "Q29. How many times will this loop be executed?\n<p><code>swift\nfor i in 0...100 {\n  print(i)\n}</code></p>\n", "alternatives": [{"alternative": " 0\n", "is_correct": false}, {"alternative": " 101\n", "is_correct": true}, {"alternative": " 99\n", "is_correct": false}, {"alternative": " 100\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121\"><em>The Swift Programming Language: Language Guide: Control Flow: For-in Loops</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID73\"><em>The Swift Programming Language: Language Guide: Basic Operators: Range Operators</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q30. What can AnyObject represent?\n", "alternatives": [{"alternative": " An instance of any class\n", "is_correct": true}, {"alternative": " An instance of function type\n", "is_correct": false}, {"alternative": " All of these answers\n", "is_correct": false}, {"alternative": " An instance of an optional type\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342\"><em>The Swift Programming Language: Language Guide: Type Casting: Type Casting for Any and AnyObject</em></a></p>\n", "is_correct": false}]}, {"question": "Q31. What is the value of t after this code is executed?\n<p><code>swift\nlet names = [\"Larry\", \"Sven\", \"Bear\"]\nlet t = names.enumerated().first().offset</code></p>\n", "alternatives": [{"alternative": " This code does not compile. / This code is invalid.\n", "is_correct": true}, {"alternative": " 0\n", "is_correct": false}, {"alternative": " 1\n", "is_correct": false}, {"alternative": " Larry\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/array/enumerated()\">Apple Developer: Documentation: Swift: Array: enumerated()</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/array/first\">Apple Developer: Documentation: Swift: Array</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q32. What is the value of test after this code executes?\n<p><code>swift\nlet vt = (name: \"ABC\", val: 5)\nlet test = vt.0</code></p>\n", "alternatives": [{"alternative": " <code>ABC</code>\n", "is_correct": true}, {"alternative": " <code>0</code>\n", "is_correct": false}, {"alternative": " <code>5</code>\n", "is_correct": false}, {"alternative": " <code>name</code>\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329\"><em>The Swift Programming Language: Language Guide: The Basics: Tuples</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#grammar_tuple-expression\"><em>The Swift Programming Language: Language Reference: Expressions: Primary Expressions: Tuple Expression</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q33. What is the base class in this code?\n<p><code>swift\nclass LSN: MMM {\n}</code></p>\n", "alternatives": [{"alternative": " MMM\n", "is_correct": true}, {"alternative": " LSN\n", "is_correct": false}, {"alternative": " There is no base class.\n", "is_correct": false}, {"alternative": " This code is invalid.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID195\"><em>The Swift Programming Language: Language Guide: Inheritance: Subclassing</em></a></p>\n", "is_correct": false}]}, {"question": "Q34. What does this code print to the console?\n<p>```swift\nvar userLocation: String = \"Home\" {\n  willSet(newValue) {\n    print(\"About to set userLocation to (newValue)...\")\n  }</p>\n<p>didSet {\n    if userLocation != oldValue {\n      print(\"userLocation updated with new value!\")\n    } else {\n      print(\"userLocation already set to that value...\")\n    }\n  }\n}</p>\n<p>userLocation = \"Work\"\n```</p>\n", "alternatives": [{"alternative": " <code>About to set userLocation to Work... userLocation updated with new value!</code>\n", "is_correct": true}, {"alternative": " <code>About to set userLocation to Work... userLocation already set to that value...</code>\n", "is_correct": false}, {"alternative": " <code>About to set userLocation to Home... userLocation updated to new value!</code>\n", "is_correct": false}, {"alternative": " <code>Error</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262\"><em>The Swift Programming Language: Language Guide: Properties: Property Observers</em></a></p>\n", "is_correct": false}]}, {"question": "Q35. What must a convenience initializer call?\n", "alternatives": [{"alternative": " A base class convenience initializer\n", "is_correct": false}, {"alternative": " Either a designated or another convenience initializer\n", "is_correct": false}, {"alternative": " A designated initializer\n", "is_correct": true}, {"alternative": " None of these answers\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID216\"><em>The Swift Programming Language: Language Guide: Initialization: Class Inheritance and Initialization</em></a></p>\n", "is_correct": false}]}, {"question": "Q36. Which object allows you access to specify that a block of code runs in a background thread?\n", "alternatives": [{"alternative": " DispatchQueue.visible\n", "is_correct": false}, {"alternative": " DispatchQueue.global\n", "is_correct": true}, {"alternative": " errorExample need to be labeled as <code>throws</code>.\n", "is_correct": false}, {"alternative": " DispatchQueue.background\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/dispatch/dispatchqueue/2300077-global\">Apple Developer: Documentation: Dispatch: DispatchQueue</a></p>\n", "is_correct": false}]}, {"question": "Q37. What is the inferred type of x?\n<p><code>swift\nlet x = [\"a\", \"b\", \"c\"]</code></p>\n", "alternatives": [{"alternative": " <code>String[]</code>\n", "is_correct": false}, {"alternative": " <code>Array&lt;String&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Set&lt;String&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Array&lt;Character&gt;</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107\"><em>The Swift Programming Language: Language Guide: Collection Types: Arrays</em></a></p>\n", "is_correct": false}]}, {"question": "Q38. What is the value of <code>oThings</code> after this code is executed?\n<p><code>swift\nlet nThings: [Any] = [1, \"2\", \"three\"]\nlet oThings = nThings.reduce(\"\") { \"\\($0)\\($1)\" }</code></p>\n", "alternatives": [{"alternative": " 11212three\n", "is_correct": false}, {"alternative": " 115\n", "is_correct": false}, {"alternative": " 12three\n", "is_correct": true}, {"alternative": " Nothing, this code is invalid.\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/swift/array/reduce(_:_:)\">Apple Developer: Documentation: Swift: Array: reduce(_:_:)</a></p>\n", "is_correct": false}]}, {"question": "Q39. How would you call a function that throws errors and also returns a value?\n", "alternatives": [{"alternative": " <code>!try</code>\n", "is_correct": false}, {"alternative": " <code>try?</code>\n", "is_correct": true}, {"alternative": " <code>try!</code>\n", "is_correct": false}, {"alternative": " <code>?try</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512\"><em>The Swift Programming Language: Language Guide: Error Handling: Handling Errors</em></a></p>\n", "is_correct": false}]}, {"question": "Q40. What is wrong with this code?\n<p><code>swift\nprotocol TUI {\n  func add(x1: Int, x2: Int) -&gt; Int {\n    return x1 + x2\n  }\n}</code></p>\n", "alternatives": [{"alternative": " Protocol functions cannot have return types.\n", "is_correct": false}, {"alternative": " Protocol functions cannot have implementations.\n", "is_correct": true}, {"alternative": " Nothing is wrong with it.\n", "is_correct": false}, {"alternative": " <code>add</code> is a reserved keyword.\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID270\"><em>The Swift Programming Language: Language Guide: Protocols: Method Requirements</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID521\"><em>The Swift Programming Language: Language Guide: Protocols: Protocol Extensions</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q41. In this code, what are <code>wheels</code> and <code>doors</code> examples of?\n<p><code>swift\nclass Car {\n  var wheels: Int = 4\n  let doors = 4\n}</code></p>\n", "alternatives": [{"alternative": " Class members\n", "is_correct": false}, {"alternative": " This code is invalid\n", "is_correct": false}, {"alternative": " Class fields\n", "is_correct": false}, {"alternative": " Class properties\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": true}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html\"><em>The Swift Programming Language: Language Guide: Structures and Classes</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255\"><em>The Swift Programming Language: Language Guide</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q42. How do you designated a failable initializer?\n", "alternatives": [{"alternative": " You cannot\n", "is_correct": false}, {"alternative": " <code>deinit</code>\n", "is_correct": false}, {"alternative": " <code>init?</code>\n", "is_correct": true}, {"alternative": " <code>init</code>\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224\"><em>The Swift Programming Language: Language Guide: Initialization</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html\"><em>The Swift Programming Language: Language Guide: Deinitialization</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q43. What is printed when this code is executed?\n<p><code>swift\nlet dbl = Double.init(\"5a\")\nprint(dbl ?? \".asString()\")</code></p>\n", "alternatives": [{"alternative": " <code>five</code>\n", "is_correct": false}, {"alternative": " <code>5a</code>\n", "is_correct": false}, {"alternative": " <code>.asString()</code>\n", "is_correct": true}, {"alternative": " <code>5</code>\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72\"><em>The Swift Programming Language: Language Guide: Basic Operators: Nil-Coalescing Operator</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224\"><em>The Swift Programming Language: Language Guide: Initialization: Failable Initializers</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q44. In the function below, what are <code>this</code> and <code>toThat</code> examples of?\n<p><code>swift\nfunc add(this x: Int, toThat y: Int) { }</code></p>\n", "alternatives": [{"alternative": " None of these answers\n", "is_correct": false}, {"alternative": " Local terms\n", "is_correct": false}, {"alternative": " Argument labels\n", "is_correct": true}, {"alternative": " Parameters names\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166\"><em>The Swift Programming Language: Language Guide: Functions</em></a></p>\n", "is_correct": false}]}, {"question": "Q45. What is wrong with this code?\n<p><code>swift\nfor (key, value) in [1: \"one\", 2: \"two\"] {\n  print(key, value)\n}</code></p>\n", "alternatives": [{"alternative": " The interaction source is invalid\n", "is_correct": false}, {"alternative": " The interaction variable is invalid\n", "is_correct": false}, {"alternative": " There is nothing wrong with this code\n", "is_correct": true}, {"alternative": " The comma in the print is misplaced\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121\"><em>The Swift Programming Language: Language Guide: Control Flow: For-In Loops</em></a></p>\n", "is_correct": false}]}, {"question": "Q46. Which of these choices is associated with unit testing?\n", "alternatives": [{"alternative": " <code>XCTest</code>\n", "is_correct": false}, {"alternative": " All of these answers\n", "is_correct": true}, {"alternative": " <code>@testable</code>\n", "is_correct": false}, {"alternative": " <code>XCTAssert</code>\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/xctest/xctest\">Apple Developer: Documentation: XCTest: XCTest</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/xctest/1500669-xctassert\">Apple Developer: Documentation: XCTest: Boolean Assertions: XCTAssert(_:_:file:line:)</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html#ID5\"><em>The Swift Programming Language: Language Guide: Access Control: Access Levels</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q47. In the code below, what is width an example of?\n<p><code>swift\nclass Square {\n  var height: Int = 0\n  var width: Int {\n    return height\n  }\n}</code></p>\n", "alternatives": [{"alternative": " This code contains error\n", "is_correct": false}, {"alternative": " A closure\n", "is_correct": false}, {"alternative": " A computed property\n", "is_correct": true}, {"alternative": " Lazy loading\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID255\"><em>The Swift Programming Language: Language Guide: Properties: Stored Properties</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259\"><em>The Swift Programming Language: Language Guide: Properties: Computed Properties</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID102\"><em>The Swift Programming Language: Language Guide: Closures: Trailing Closures</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q48. What data type is this an example of?\n<p><code>swift\nlet vals = (\"val\", 1)</code></p>\n", "alternatives": [{"alternative": " A dictionary\n", "is_correct": false}, {"alternative": " A tuple\n", "is_correct": true}, {"alternative": " An optional\n", "is_correct": false}, {"alternative": " This code contains error\n</ul>\n<p>Reference:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329\"><em>The Swift Programming Language: Language Guide: The Basics</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/ReferenceManual/Types.html#grammar_tuple-type\"><em>The Swift Programming Language: Language Reference: Types</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q49. What is wrong with this code?\n<p><code>swift\nvar x = 5\nx = 10.0</code></p>\n", "alternatives": [{"alternative": " You cannot assign a Double to a variable of type Int\n", "is_correct": true}, {"alternative": " <code>x</code> is undefined\n", "is_correct": false}, {"alternative": " <code>x</code> is a constant\n", "is_correct": false}, {"alternative": " <code>x</code> has no type\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322\"><em>The Swift Programming Language: Language Guide: The Basics</em></a></p>\n", "is_correct": false}]}, {"question": "Q50. What will this code print to the console?\n<p><code>swift\nvar items = [\"a\": 1, \"b\": 2, \"c\": \"test\"] as [String: Any]\nitems[\"c\"] = nil\nprint(items[\"c\"] as Any)</code></p>\n", "alternatives": [{"alternative": " Any\n", "is_correct": false}, {"alternative": " test\n", "is_correct": false}, {"alternative": " 1,2,3\n", "is_correct": false}, {"alternative": " nil\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": true}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342\"><em>The Swift Programming Language: Language Guide: Type Casting: Type Casting for Any and AnyObject</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID113\"><em>The Swift Programming Language: Language Guide: Collection Types: Dictionaries</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q51. What is wrong with this code?\n<p><code>swift\nlet val = 5.0 + 10</code></p>\n", "alternatives": [{"alternative": " There is nothing wrong with this code\n", "is_correct": true}, {"alternative": " <code>val</code> is a constant and cannot be changed\n", "is_correct": false}, {"alternative": " <code>5.0</code> and <code>10</code> are different types\n", "is_correct": false}, {"alternative": " There is no semicolon\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322\"><em>The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference</em></a></p>\n", "is_correct": false}]}, {"question": "Q52. How many parameters does the initializer for Test have?\n<p><code>swift\nstruct Test {\n  var score: Int\n  var date: Date\n}</code></p>\n", "alternatives": [{"alternative": " Zero\n", "is_correct": false}, {"alternative": " This code contains an error\n", "is_correct": false}, {"alternative": " Two\n", "is_correct": true}, {"alternative": " Structs do not have initializers\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID213\"><em>The Swift Programming Language: Language Guide: Initialization</em></a></p>\n", "is_correct": false}]}, {"question": "Q53. What prints to the console when executing this code?\n<p><code>swift\nlet x = try? String.init(\"test\")\nprint(x)</code></p>\n", "alternatives": [{"alternative": " nil\n", "is_correct": false}, {"alternative": " Nothing - this code contains an error\n", "is_correct": false}, {"alternative": " Optional(\"test\")\n", "is_correct": true}, {"alternative": " test\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512\"><em>The Swift Programming Language: Language Guide: Error Handling: Handling Errors</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\"><em>The Swift Programming Language: Language Guide: The Basics: Optionals</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q54. How can you sort this array?\n<p><code>swift\nvar vals = [1, 2, 3]</code></p>\n", "alternatives": [{"alternative": " <code>vals.sort { $0 &lt; $1 }</code>\n", "is_correct": false}, {"alternative": " <code>vals.sort { (s1, s2) in s1 &lt; s2 }</code>\n", "is_correct": false}, {"alternative": " <code>vals.sort(by: &lt;)</code>\n", "is_correct": false}, {"alternative": " All of these answers\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/swift/array/sort()\">Apple Developer: Documentation: Swift: Array: sort()</a></p>\n", "is_correct": true}]}, {"question": "Q55. DispatchQueue.main.async takes a block that will be\n", "alternatives": [{"alternative": " Not executed\n", "is_correct": false}, {"alternative": " Executed in the main queue\n", "is_correct": true}, {"alternative": " None of these answers\n", "is_correct": false}, {"alternative": " Executed on the background thread\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/dispatch/dispatchqueue/2016098-async\">Apple Developer: Documentation: Dispatch: DispatchQueue: async(group:qos:flags:execute:)</a></p>\n", "is_correct": false}]}, {"question": "Q56. When is deinit called?\n", "alternatives": [{"alternative": " When a class instance needs memory\n", "is_correct": false}, {"alternative": " All of these answers\n", "is_correct": false}, {"alternative": " When the executable code is finished\n", "is_correct": false}, {"alternative": " When a class instance is being removed from memory\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Deinitialization.html\"><em>The Swift Programming Language: Language Guide: Deinitialization</em></a></p>\n", "is_correct": true}]}, {"question": "Q57. How do you declare an optional String?\n", "alternatives": [{"alternative": " <code>String?</code>\n", "is_correct": true}, {"alternative": " <code>Optional[String]</code>\n", "is_correct": false}, {"alternative": " <code>[String]?</code>\n", "is_correct": false}, {"alternative": " <code>?String</code>\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\"><em>The Swift Programming Language: Language Guide: The Basics: Optionals</em></a></p>\n", "is_correct": false}]}, {"question": "Q58. How many times this code will be executed? / How many times will this loop be performed?\n<p><code>swift\nfor i in [\"0\", \"1\"] {\n  print(i)\n}</code></p>\n", "alternatives": [{"alternative": " One\n", "is_correct": false}, {"alternative": " Two\n", "is_correct": true}, {"alternative": " Three\n", "is_correct": false}, {"alternative": " This code does not compile\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121\"><em>The Swift Programming Language: Language Guide: Control Flow: For-In Loops</em></a></p>\n", "is_correct": false}]}, {"question": "Q59. What does this code print?\n<p><code>swift\nlet names = [\"Bear\", \"Tony\", \"Svante\"]\nprint(names[1] + \"Bear\")</code></p>\n", "alternatives": [{"alternative": " 1Bear\n", "is_correct": false}, {"alternative": " BearBear\n", "is_correct": false}, {"alternative": " TonyBear\n", "is_correct": true}, {"alternative": " Nothing, this code is invalid\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107\"><em>The Swift Programming Language: Language Guide: Collection Types: Arrays</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID291\"><em>The Swift Programming Language: Language Guide: Strings and Characters: Concatenating Strings and Characters</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q60. What is true of this code?\n<p><code>swift\nlet name: String?</code></p>\n", "alternatives": [{"alternative": " <code>name</code> can hold only a string value.\n", "is_correct": false}, {"alternative": " <code>name</code> can hold either a string or nil value.\n", "is_correct": true}, {"alternative": " Optional values cannot be <code>let</code> constants.\n", "is_correct": false}, {"alternative": " Only non-empty string variables can be stored in <code>name</code>.\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID330\"><em>The Swift Programming Language: Language Guide: The Basics: Optionals</em></a></p>\n", "is_correct": false}]}, {"question": "Q61. What is the value of <code>val</code> after this code is executed?\n<p><code>swift\nlet i = 5\nlet val = i * 6.0</code></p>\n", "alternatives": [{"alternative": " This code is invalid.\n", "is_correct": true}, {"alternative": " 6\n", "is_correct": false}, {"alternative": " 30\n", "is_correct": false}, {"alternative": " 0\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322\"><em>The Swift Programming Language: Language Guide: The Basics: Type Safety and Type Inference</em></a></p>\n", "is_correct": false}]}, {"question": "Q62. What does this code print?\n<p>```swift\nenum Positions: Int {\n  case first, second, third, other\n}</p>\n<p>print (Positions.other.rawValue)\n```</p>\n", "alternatives": [{"alternative": " 3\n", "is_correct": true}, {"alternative": " 0\n", "is_correct": false}, {"alternative": " other\n", "is_correct": false}, {"alternative": " nil\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID149\"><em>The Swift Programming Language: Language Guide: The Basics: Raw Values</em></a></p>\n", "is_correct": false}]}, {"question": "Q63. What is printed to the console when this code is executed?\n<p><code>swift\n\"t\".forEach { (char) in\n  print(char)\n}</code></p>\n", "alternatives": [{"alternative": " nil\n", "is_correct": false}, {"alternative": " Nothing, since the code contains an error\n", "is_correct": false}, {"alternative": " t\n", "is_correct": true}, {"alternative": " zero\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID290\"><em>The Swift Programming Language: Language Guide: Strings and Characters: Working with Characters</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/string/foreach(_:)\">Apple Developer: Documentation: Swift: String: forEach(_:)</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q64. What prints when this code is executed?\n<p><code>swift\nlet s1 = [\"1\", \"2\", \"3\"]\n  .filter { $0 &gt; \"0\" }\n  .sorted { $0 &gt; $1 }\nprint(s1)</code></p>\n", "alternatives": [{"alternative": " []\n", "is_correct": false}, {"alternative": " [\"3\", \"2\", \"1\"]\n", "is_correct": true}, {"alternative": " [321]\n", "is_correct": false}, {"alternative": " [\"1\", \"2\", \"3\"]\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/sequence/filter(_:)\">Apple Developer: Documentation: Swift: Swift Standard Library: Collections: Sequence and Collection Protocols: Sequence: filter()</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://developer.apple.com/documentation/swift/array/sorted()\">Apple Developer: Documentation: Swift: Array: sorted()</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q65. What enumeration feature allows them to store case-specific data?\n", "alternatives": [{"alternative": " Associated values\n", "is_correct": true}, {"alternative": " Integral values\n", "is_correct": false}, {"alternative": " Raw values\n", "is_correct": false}, {"alternative": " Custom values\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID148\"><em>The Swift Programming Language: Language Guide: Enumerations: Associated Values</em></a></p>\n", "is_correct": false}]}, {"question": "Q66. In the code below, AOM must be a(n)?\n<p><code>swift\nclass AmP: MMM, AOM { }</code></p>\n", "alternatives": [{"alternative": " Class\n", "is_correct": false}, {"alternative": " Protocol\n", "is_correct": true}, {"alternative": " Enumeration\n", "is_correct": false}, {"alternative": " Struct\n</ul>\n<p>References:</p>\n<ul>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID195\"><em>The Swift Programming Language: Language Guide: Inheritance: Subclassing</em></a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID268\"><em>The Swift Programming Language: Language Guide: Protocols: Protocol Syntax</em></a>\n</ul>\n", "is_correct": false}]}, {"question": "Q67. What is the value of numbers in the code below?\n<p><code>swift\nlet numbers = [1, 2, 3, 4, 5, 6].filter { $0 % 2 == 0 }</code></p>\n", "alternatives": [{"alternative": " [1, 3, 5]\n", "is_correct": false}, {"alternative": " []\n", "is_correct": false}, {"alternative": " [2, 4, 6]\n", "is_correct": true}, {"alternative": " nil\n</ul>\n<p>Reference: <a href=\"https://developer.apple.com/documentation/swift/sequence/filter(_:)\">Apple Developer: Documentation: Swift: Swift Standard Library: Collections: Sequence and Collection Protocols: Sequence: filter()</a></p>\n", "is_correct": false}]}, {"question": "Q68. What is the type of <code>vals</code> in this code?\n<p><code>swift\nlet vals = [\"a\", 1, \"Hi\"]</code></p>\n", "alternatives": [{"alternative": " Array(char)\n", "is_correct": false}, {"alternative": " [Any]\n", "is_correct": true}, {"alternative": " Array<char>\n", "is_correct": false}, {"alternative": " [Generic]\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID342\"><em>The Swift Programming Language: Language Guide: Type Casting</em></a></p>\n", "is_correct": false}]}, {"question": "Q69. How can you extract val to <code>x</code> in tuple <code>vt</code>\n<p><code>swift\nlet vt = (name: \"ABC\", val: 5)</code></p>\n", "alternatives": [{"alternative": " let x = vt.1\n", "is_correct": false}, {"alternative": " All of these answers\n", "is_correct": true}, {"alternative": " let x = vt.val\n", "is_correct": false}, {"alternative": " let (<code>_</code>, x) = vt\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID329\"><em>The Swift Programming Language: Language Guide: The Basics: Tuples</em></a></p>\n", "is_correct": false}]}, {"question": "Q70. What is the type of x?\n<p><code>swift\nlet x = try? String.init(from: decoder)</code></p>\n", "alternatives": [{"alternative": " String\n", "is_correct": false}, {"alternative": " String?\n", "is_correct": true}, {"alternative": " String!\n", "is_correct": false}, {"alternative": " try?\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID512\"><em>The Swift Programming Language: Language Guide: Error Handling: Handling Errors</em></a></p>\n", "is_correct": false}]}, {"question": "Q71. How many times is this loop executed?\n<p><code>swift\nlet loopx = 5\nrepeat {\n  print (loopx)\n} while loopx &lt; 6</code></p>\n", "alternatives": [{"alternative": " Six\n", "is_correct": false}, {"alternative": " Zero\n", "is_correct": false}, {"alternative": " Five\n", "is_correct": false}, {"alternative": " Infinite\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID124\"><em>The Swift Programming Language: Language Guide: Control Flow: While Loops</em></a></p>\n", "is_correct": true}]}, {"question": "Q72. How many values does vals have after this code is executed?\n<p><code>swift\nvar vals: Set&lt;String&gt; = [\"4\", \"5\", \"6\"]\nvals.insert(\"5\")</code></p>\n", "alternatives": [{"alternative": " This code contains an error.\n", "is_correct": false}, {"alternative": " Eight\n", "is_correct": false}, {"alternative": " Three\n", "is_correct": true}, {"alternative": " Four\n</ul>\n<p>Reference: <a href=\"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID484\"><em>The Swift Programming Language: Language Guide: Collection Types: Sets</em></a></p>", "is_correct": false}]}]}