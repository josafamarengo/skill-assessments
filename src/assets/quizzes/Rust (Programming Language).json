{"title": "Rust (Programming Language)", "questions": [{"question": "Q1. Which type cast preserves the mathematical value in all cases?\n", "alternatives": [{"alternative": " i64 as i32\n", "is_correct": false}, {"alternative": " usize as u64\n", "is_correct": false}, {"alternative": " i32 as i64\n", "is_correct": true}, {"alternative": " f64 as f32\n</ul>\n", "is_correct": false}]}, {"question": "Q2. What do the vertical bars represent here?\n<p><code>rust\nstr::thread::spawn(|| {\n    println!(\"LinkedIn\");\n});</code></p>\n", "alternatives": [{"alternative": " a closure\n", "is_correct": true}, {"alternative": " a thread\n", "is_correct": false}, {"alternative": " a future\n", "is_correct": false}, {"alternative": " a block\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html#refactoring-with-closures-to-store-code\">reference</a></p>\n", "is_correct": false}]}, {"question": "Q3. Which choice is not a scalar data type?\n", "alternatives": [{"alternative": " integer\n", "is_correct": false}, {"alternative": " float\n", "is_correct": false}, {"alternative": " boolean\n", "is_correct": false}, {"alternative": " tuple\n</ul>\n", "is_correct": true}]}, {"question": "Q4. <strong>_</strong> cannot be destructured.\n", "alternatives": [{"alternative": " Traits\n", "is_correct": true}, {"alternative": " Tuples\n", "is_correct": false}, {"alternative": " Enums\n", "is_correct": false}, {"alternative": " Structs\n</ul>\n<p><a href=\"https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html\">reference</a></p>\n", "is_correct": false}]}, {"question": "Q5. Which <code>cargo</code> command checks a program for error without creating a binary executable?\n", "alternatives": [{"alternative": " cargo --version\n", "is_correct": false}, {"alternative": " cargo init\n", "is_correct": false}, {"alternative": " cargo build\n", "is_correct": false}, {"alternative": " cargo check\n</ul>\n", "is_correct": true}]}, {"question": "Q6. The term <em>box</em> and related phrases such as <em>boxing a value</em> are often used when relating to memory layout. What does <em>box</em> refer to?\n", "alternatives": [{"alternative": " It's creating a pointer on the heap that points to a value on the stack.\n", "is_correct": false}, {"alternative": " It's creating a pointer on the stack that points to a value on the heap.\n", "is_correct": true}, {"alternative": " It's creating a memory guard around values to prevent illegal access.\n", "is_correct": false}, {"alternative": " It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled.\n</ul>\n", "is_correct": false}]}, {"question": "Q7. What is an alternative way of writing <code>slice</code> that produces the same result?\n<p><code>rust\n...\nlet s = String::form(\"hello\");\nlet slice = &amp;s[0..2];</code></p>\n", "alternatives": [{"alternative": " let slice = &amp;s[len + 2];\n", "is_correct": false}, {"alternative": " let slice = &amp;s[len - 2];\n", "is_correct": false}, {"alternative": " let slice = &amp;s.copy(0..2);\n", "is_correct": false}, {"alternative": " let slice = &amp;s[..2];\n</ul>\n", "is_correct": true}]}, {"question": "Q8. Using the <code>?</code> operator at the end of an expression is equivalent to <strong>_</strong>.\n", "alternatives": [{"alternative": " a match pattern that branches into True or False\n", "is_correct": false}, {"alternative": " calling ok_error()\n", "is_correct": false}, {"alternative": " calling panic!()\n", "is_correct": false}, {"alternative": " a match pattern that may result an early return\n</ul>\n", "is_correct": true}]}, {"question": "Q9. Which is valid syntax for defining an array of i32 values?\n", "alternatives": [{"alternative": " Array<i32>::with_capacity(10)\n", "is_correct": false}, {"alternative": " [i32]\n", "is_correct": false}, {"alternative": " Array<i32>::new(10)\n", "is_correct": false}, {"alternative": " [i32; 10]\n</ul>\n", "is_correct": true}]}, {"question": "Q10. What syntax is required to take a mutable reference to T, when used within a function argument?\n<p><code>rust\nfn increment(i: T) {\n    // body elided\n}</code></p>\n", "alternatives": [{"alternative": " *mut T\n", "is_correct": false}, {"alternative": " mut ref T\n", "is_correct": false}, {"alternative": " mut &amp;T\n", "is_correct": false}, {"alternative": " &amp;mut T\n</ul>\n", "is_correct": true}]}, {"question": "Q11. The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?\n", "alternatives": [{"alternative": " .add()\n", "is_correct": false}, {"alternative": " .incr()\n", "is_correct": false}, {"alternative": " .clone()\n", "is_correct": true}, {"alternative": " .increment()\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch15-04-rc.html\">reference</a></p>\n", "is_correct": false}]}, {"question": "Q12. What happens when an error occurs that is being handled by the question mark (?) operator?\n", "alternatives": [{"alternative": " The error is reported and execution continues.\n", "is_correct": false}, {"alternative": " An exception is raised. The effect(s) of the exception are defined by the error! macro.\n", "is_correct": false}, {"alternative": " The program panics immediately.\n", "is_correct": false}, {"alternative": " Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics.\n</ul>\n", "is_correct": true}]}, {"question": "Q13. Which comment syntax is not legal?\n", "alternatives": [{"alternative": " <code>/*</code>\n", "is_correct": false}, {"alternative": " <code>#</code>\n", "is_correct": true}, {"alternative": " <code>//!</code>\n", "is_correct": false}, {"alternative": " <code>//</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q14. In matching patterns, values are ignored with _.\n", "alternatives": [{"alternative": " <code>.ignore()</code>\n", "is_correct": false}, {"alternative": " <code>an underscore (_)</code>\n", "is_correct": false}, {"alternative": " ..\n", "is_correct": true}, {"alternative": " skip\n</ul>\n", "is_correct": false}]}, {"question": "Q15. Defining a _ requires a lifetime parameter.\n", "alternatives": [{"alternative": " function that ends the lifetime of one of its arguments\n", "is_correct": false}, {"alternative": " struct that contains a reference to a value\n", "is_correct": true}, {"alternative": " function with a generic argument\n", "is_correct": false}, {"alternative": " struct that contains a reference to a boxed value\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotations-in-struct-definitions\">Rust book reference</a></p>\n", "is_correct": false}]}, {"question": "Q16. Which example correctly uses std::collections::HashMap's Entry API to populate counts?\n<p><code>rust\nuse std::collections::HashMap;\nfn main() {\n    let mut counts = HashMap::new();\n    let text = \"LinkedIn Learning\";\n    for c in text.chars() {\n        // Complete this block\n    }\n    println!(\"{:?}\", counts);\n}</code></p>\n", "alternatives": [{"alternative": "\n</ul>\n<p><code>rust\nfor c in text.chars() {\n    if let Some(count) = &amp;mut counts.get(&amp;c) {\n        counts.insert(c, *count + 1);\n    } else {\n        counts.insert(c, 1);\n    };\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": "\n</ul>\n<p><code>rust\nfor c in text.chars() {\n    let count = counts.entry(c).or_insert(0);\n    *count += 1;\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": "\n</ul>\n<p><code>rust\nfor c in text.chars() {\n    let count = counts.entry(c);\n    *count += 1;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": "\n</ul>\n<p><code>rust\nfor c in text.chars() {\n    counts.entry(c).or_insert(0).map(|x| x + 1);\n}</code></p>\n<p><a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry\">reference</a></p>\n", "is_correct": false}]}, {"question": "Q17. Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?\n<p>```rust\nuse std::collections::HashMap;</p>\n<p>fn main() -&gt; Result&lt;(), Box<dyn std::error::Error>&gt; {\n    let mut v = Vec::<u8>::new();</p>\n<pre><code>let a = \"LinkedIn\";\nlet b = 123;\nlet c = '\ud83e\uddc0';\n\n// replace this line\n\nprintln!(\"{:?}\", v);\n\nOk(())\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>rust\nwrite!(&amp;mut v, \"{}{}{}\", a, b, c)?;</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>rust\nv.write(a)?;\nv.write(b)?;\nv.write(c)?;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>rust\nv.write(a, b, c)?;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>rust\nv.write_all(a.as_bytes())?;\nv.write_all(&amp;b.to_string().as_bytes())?;\nc.encode_utf8(&amp;mut v);</code></p>\n<ol>\n", "is_correct": false}, {"alternative": "<a href=\"https://users.rust-lang.org/t/formatting-and-writing-to-a-file-without-malloc-or-locks/52295/9\">Answered in rust user forum</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://doc.rust-lang.org/std/macro.write.html\">reference</a>\n</ol>\n", "is_correct": false}]}, {"question": "Q18. Does the <code>main</code> function compile? If so, why? If not, what do you need to change?\n<p><code>rust\nfn main() {\n    let Some(x) = some_option_value;\n}</code></p>\n", "alternatives": [{"alternative": " The code does not compile. <code>let</code> statements require a refutable pattern. Add <code>if</code> before <code>let</code>.\n", "is_correct": false}, {"alternative": " The code compiles. <code>let</code> statements sometimes require a refutable pattern.\n", "is_correct": false}, {"alternative": " The code does not compile. <code>let</code> statements requires an irrefutable pattern. Add <code>if</code> before <code>let</code>.\n", "is_correct": true}, {"alternative": " The code compiles. <code>let</code> do not require a refutable pattern.\n</ul>\n", "is_correct": false}]}, {"question": "Q19. Which statement about lifetimes is false?\n", "alternatives": [{"alternative": " Lifetimes were redundantly specified in previous version of Rust.\n", "is_correct": false}, {"alternative": " Lifetimes are specified when a struct is holding a reference to a value.\n", "is_correct": false}, {"alternative": " Lifetimes are specified when certain values must outlive others.\n", "is_correct": false}, {"alternative": " Lifetimes are always inferred by the compiler.\n</ul>\n", "is_correct": true}]}, {"question": "Q20. When used as a return type, which Rust type plays a similar role to Python's <code>None</code>, JavaScript's <code>null</code>, or the <code>void</code> type in C/C++?\n", "alternatives": [{"alternative": " <code>!</code>\n", "is_correct": false}, {"alternative": " <code>None</code>\n", "is_correct": false}, {"alternative": " <code>Null</code>\n", "is_correct": false}, {"alternative": " <code>()</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q21. To convert a <code>Result</code> to an <code>Option</code>, which method should you use?\n", "alternatives": [{"alternative": " <code>.as_option()</code>\n", "is_correct": false}, {"alternative": " <code>.ok()</code>\n", "is_correct": true}, {"alternative": " <code>.to_option()</code>\n", "is_correct": false}, {"alternative": " <code>.into()</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q22. Which statement about the <code>Clone</code> and <code>Copy</code> traits is false?\n", "alternatives": [{"alternative": " <code>Copy</code> is enabled for primitive, built-in types.\n", "is_correct": true}, {"alternative": " Without <code>Copy</code>, Rust applies move semantics to a type's access.\n", "is_correct": false}, {"alternative": " When using <code>Clone</code>, copying data is explicit.\n", "is_correct": false}, {"alternative": " Until a type implements either <code>Copy</code> or <code>Clone</code>, its internal data cannot be copied.\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/41413336/do-all-primitive-types-implement-the-copy-trait\">ref from stack overflow</a></p>\n", "is_correct": false}]}, {"question": "Q23. Why does this code <em>not</em> compile?\n<p><code>rust\nfn returns_closure() -&gt; dyn Fn(i32) -&gt; i32 {\n    |x| x + 1\n}</code></p>\n", "alternatives": [{"alternative": " The returned <code>fn</code> pointer and value need to be represented by another trait.\n", "is_correct": false}, {"alternative": " Closures are types, so they cannot be returned directly from a function.\n", "is_correct": false}, {"alternative": " Closures are types and can be returned only if the concrete trait is implemented.\n", "is_correct": false}, {"alternative": " Closures are represented by traits, so they cannot be a return type.\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html#returning-closures\">Rust book reference</a></p>\n", "is_correct": true}]}, {"question": "Q24. What smart pointer is used to allow multiple ownership of a value in various threads?\n", "alternatives": [{"alternative": " <code>Arc&lt;T&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Box&lt;T&gt;</code>\n", "is_correct": false}, {"alternative": " Both <code>Arc&lt;T&gt;</code> and <code>Rc&lt;T&gt;</code> are multithread safe.\n", "is_correct": false}, {"alternative": " <code>Rc&lt;T&gt;</code>\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch16-03-shared-state.html?highlight=arc%3CT%3E#atomic-reference-counting-with-arct\">Rust book reference</a></p>\n", "is_correct": false}]}, {"question": "Q25. Which types are <em>not</em> allowed within an enum variant's body?\n", "alternatives": [{"alternative": " zero-sized types\n", "is_correct": false}, {"alternative": " structs\n", "is_correct": false}, {"alternative": " trait objects\n", "is_correct": true}, {"alternative": " floating-point numbers\n</ul>\n<p><a href=\"https://doc.rust-lang.org/reference/types/trait-object.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q26. Which statement about this code is true?\n<p><code>rust\nfn main() {\n    let c = 'z';\n    let heart_eyed_cat = '\ud83d\ude3b';\n}</code></p>\n", "alternatives": [{"alternative": " Both are character literals.\n", "is_correct": true}, {"alternative": " <code>heart_eyed_cat</code> is an invalid expression.\n", "is_correct": false}, {"alternative": " <code>c</code> is a string literal and <code>heart_eyed_cat</code> is a character literal.\n", "is_correct": false}, {"alternative": " Both are string literals.\n</ul>\n<p><a href=\"https://doc.rust-lang.org/std/primitive.char.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q27. Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?\n", "alternatives": [{"alternative": " <code>Mutex&lt;Arc&lt;T&gt;&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Rc&lt;Mutex&lt;T&gt;&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Mutex&lt;Rc&lt;T&gt;&gt;</code>\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch16-03-shared-state.html#atomic-reference-counting-with-arct\">Rust book reference</a></p>\n", "is_correct": false}]}, {"question": "Q28. Which idiom can be used to concatenate the strings <code>a</code>, <code>b</code>, <code>c</code>?\n<p><code>rust\nlet a = \"a\".to_string();\nlet b = \"b\".to_string();\nlet c = \"c\".to_string();</code></p>\n", "alternatives": [{"alternative": " <code>String::from(a,b,c)</code>\n", "is_correct": false}, {"alternative": " <code>format!(\"{}{}{}\", a, b, c)</code>\n", "is_correct": true}, {"alternative": " <code>concat(a,b,c)</code>\n", "is_correct": false}, {"alternative": " <code>a + b + c</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q29. In this function. what level of access is provided to the variable <code>a</code>?\n<p>```rust\nuse std::fmt::Debug;</p>\n<p>fn report<T:Debug>(a: &amp;T) {\n    eprintln!(\"info: {:?}\", a);\n}\n```</p>\n", "alternatives": [{"alternative": " print\n", "is_correct": false}, {"alternative": " read-only\n", "is_correct": true}, {"alternative": " read/write\n", "is_correct": false}, {"alternative": " debug\n</ul>\n", "is_correct": false}]}, {"question": "Q30. Which choice is <em>not</em> valid loop syntax?\n", "alternatives": [{"alternative": " <code>loop</code>\n", "is_correct": false}, {"alternative": " <code>for</code>\n", "is_correct": false}, {"alternative": " <code>while</code>\n", "is_correct": false}, {"alternative": " <code>do</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q31. How do you construct a value of <code>Status</code> that is initialized to <code>Waiting</code>?\n<p><code>rust\nenum Status {\n    Waiting,\n    Busy,\n    Error(String),\n}</code></p>\n", "alternatives": [{"alternative": " <code>let s = Enum::new(Status::Waiting);</code>\n", "is_correct": false}, {"alternative": " <code>let s = new Status::Waiting;</code>\n", "is_correct": false}, {"alternative": " <code>let s = Status::Waiting;</code>\n", "is_correct": true}, {"alternative": " <code>let s = Status::new(Waiting);</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q32. Which statement about enums is false?\n", "alternatives": [{"alternative": " Enums are useful in matching patterns.\n", "is_correct": false}, {"alternative": " Option is an enum type.\n", "is_correct": false}, {"alternative": " Enum variants can have different types with associated data.\n", "is_correct": false}, {"alternative": " the term <em>enum</em> is short for <em>enummap</em>\n</ul>\n", "is_correct": true}]}, {"question": "Q33. What does an underscore (_) indicate when used as pattern?\n", "alternatives": [{"alternative": " It matches everything.\n", "is_correct": true}, {"alternative": " It matches underscores.\n", "is_correct": false}, {"alternative": " It matches any value that has a length of 1.\n", "is_correct": false}, {"alternative": " It matches nothing.\n</ul>\n", "is_correct": false}]}, {"question": "Q34. What is a safe operation on a <code>std::cell:UnsafeCell&lt;T&gt;</code>?\n", "alternatives": [{"alternative": " A <code>&amp;mut T</code> reference is allowed. However it may not cpexists with any other references. and may be created only in single-threaded code.\n", "is_correct": false}, {"alternative": " <code>UnsafeCell&lt;T&gt;</code> provides thread-safety. Therefore, creating <code>&amp;T</code> references from multiple threads is safe.\n", "is_correct": false}, {"alternative": " The only safe operation is the <code>.get()</code> method, which returns only a raw pointer.\n", "is_correct": true}, {"alternative": " Non. <code>UnsafeCell&lt;T&gt;</code> only allows code that would otherwise need unsafe blocks to be written in safe code.\n</ul>\n<p><a href=\"https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q35. Generics are useful when you <strong>_</strong>.\n", "alternatives": [{"alternative": " need to reduce code duplication by concretizing values and restricting parameters in functions\n", "is_correct": false}, {"alternative": " need to reduce code duplication by abstracting values further, such as in function parameters\n", "is_correct": true}, {"alternative": " need a supertrait\n", "is_correct": false}, {"alternative": " are not sure if you need a specific kind of trait\n</ul>\n", "is_correct": false}]}, {"question": "Q36. How do you create a Rust project on the command-line?\n", "alternatives": [{"alternative": " cargo new\n", "is_correct": true}, {"alternative": " rustup init\n", "is_correct": false}, {"alternative": " cargo start\n", "is_correct": false}, {"alternative": " rust new-project\n</ul>\n", "is_correct": false}]}, {"question": "Q37. Calling.clone() <strong>_</strong>.\n", "alternatives": [{"alternative": " deeply copies heap data and clones ownership\n", "is_correct": false}, {"alternative": " clones the pointer to the heap\n", "is_correct": true}, {"alternative": " clones the heap data onto the stack\n", "is_correct": false}, {"alternative": " deeply copies heap and stack\n</ul>\n<p><a href=\"https://doc.rust-lang.org/std/rc/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q38. what is one of the roles of the let keyword?\n<p><code>rust\nlet text = String::new(\"LinkedIn\");</code></p>\n", "alternatives": [{"alternative": " Create a text object.\n", "is_correct": false}, {"alternative": " Assign a mutable value.\n", "is_correct": false}, {"alternative": " request to borrow a string.\n", "is_correct": true}, {"alternative": " Assign an immutable value.\n</ul>\n<p><a href=\"https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q39. How is a new enum initialized?\n<p><code>rust\nenum Option_i32 {\n    Some(i32),\n    None,\n}</code></p>\n", "alternatives": [{"alternative": " let integer = Option_i32::Some(5);\n", "is_correct": true}, {"alternative": " let integer = Option_i32.new(Some(5))\n", "is_correct": false}, {"alternative": " let integer = Option_i32::New::(Some(5))\n", "is_correct": false}, {"alternative": " let integer = Option_i32.init()\n</ul>\n<p><a href=\"https://doc.rust-lang.org/rust-by-example/custom_types/enum.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q40. What are the main difference between const and static?\n", "alternatives": [{"alternative": " They can be used interchangeably, but const only supports primitive types while static must be used for structs and user-defined types.\n", "is_correct": false}, {"alternative": " They can be used interchangeably, but const values are compiled at compile time.\n", "is_correct": false}, {"alternative": " Values defined with const live in the stack, while static values live on the heap.\n", "is_correct": false}, {"alternative": " Values defined with const can be copied to wherever they are needed, whereas static values remain in a fixed place in memory.\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/52751597/what-is-the-difference-between-a-constant-and-a-static-variable-and-which-should\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q41. Which Rust data type represents a signed integer that has the same width as a pointer of the compile target's CPU?\n", "alternatives": [{"alternative": " i64\n", "is_correct": false}, {"alternative": " int64\n", "is_correct": false}, {"alternative": " isize\n", "is_correct": true}, {"alternative": " int\n</ul>\n<p><a href=\"https://www.lurklurk.org/effective-rust/use-types.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q42. When are supertraits needed?\n", "alternatives": [{"alternative": " when a trait is needed for multiple structs\n", "is_correct": false}, {"alternative": " when a trait depends on another trait\n", "is_correct": true}, {"alternative": " only when a generic trait is used\n", "is_correct": false}, {"alternative": " when a metatrait is needed to use another trait\n</ul>\n<p><a href=\"https://doc.rust-lang.org/rust-by-example/trait/supertraits.html\">Reference</a></p>", "is_correct": false}]}]}