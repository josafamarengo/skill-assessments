{"title": "C (Programming Language)", "questions": [{"question": "Q1. Which Code sample will eventually cause the computer to run out of memory?\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\nwhile(1)\n{\n    char *smallString = (char *) malloc(10);\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>c\nlong long number = 1;\n    while(1)\n    number *= 2;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nwhile(1)\n{\n    char hugeString[1000000L];\n    memset(hugeString, 0, 1000000L);\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c\nwhile(1)\n{\n    long <em>bigArray = (long </em>) malloc(sizeof(long) * 1000);\n    memset(bigArray, 1000000, 1000);</p>\n<pre><code>(bigArray);\n</code></pre>\n<p>}\n```</p>\n", "is_correct": false}]}, {"question": "Q2. What will this code print on the screen?\n<p>```c\nint f1 (int a, int b)\n{\n    if (a &gt; b)\n    {\n        printf(\"A is greater than B\\n\");\n        return 1;\n    }\n    else\n    {\n        printf(\"B is greater than A\");\n        return 0;\n    }\n}</p>\n<p>main()\n{\n    if (f1(20,10) || f1(10,20))\n        printf(\"C is fun!\\n\");\n}\n```</p>\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>A is greater then B\nC is fun!</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>A is greater then B\nB is greater then A\nC is fun!</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>A is greater then B\nB is greater then A</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " Nothing is printed on Screen\n</ul>\n", "is_correct": false}]}, {"question": "Q3. What is the name for calling a function inside the same function?\n", "alternatives": [{"alternative": " recursion\n", "is_correct": true}, {"alternative": " subfunction\n", "is_correct": false}, {"alternative": " inner call\n", "is_correct": false}, {"alternative": " infinite loop\n</ul>\n<p><a href=\"https://www.cprogramming.com/tutorial/c/lesson16.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q4. What does the declaration of variable c2 demonstrate?\n<p><code>c\nmain(){\n    char c1 ='a';\n    char c2 = c1+10;\n}</code></p>\n", "alternatives": [{"alternative": " character arithmetic\n", "is_correct": true}, {"alternative": " undefined assignment\n", "is_correct": false}, {"alternative": " type conversion\n", "is_correct": false}, {"alternative": " invalid declaration\n</ul>\n<p><a href=\"https://tutorialspoint.dev/language/c/character-arithmetic-c-c\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q5. What is this declaration an example of?\n<p><code>c\nstruct s {\n    int i;\n    struct s *s1;\n    struct s *s2;\n};</code></p>\n", "alternatives": [{"alternative": " a node\n", "is_correct": true}, {"alternative": " a linked list\n", "is_correct": false}, {"alternative": " a stack\n", "is_correct": false}, {"alternative": " a binary tree\n</ul>\n", "is_correct": false}]}, {"question": "Q6. Header files are listed using the preprocessing directive #include, and can have one of the following formats: #include &lt;fileA&gt; or #include \"fileB\". What is the difference between these two formats?\n", "alternatives": [{"alternative": " The preprocessor will try to locate fileA in same directory as the source file, and the fileB in a predetermined directory path.\n", "is_correct": false}, {"alternative": " The preprocessor will try to locate fileA in the fixed system directory. It will try to locate fileB in the directory path designated by the -I option added to the command line while compiling the source code.\n", "is_correct": false}, {"alternative": " The file using the fileA syntax must be system files, of unlimited number; fileB must be a user file at a maximun of one per source file.\n", "is_correct": false}, {"alternative": " The preprocessor will try to locate fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path.\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-include-and-include-in-c-c-with-examples/#:~:text=The%20difference%20between%20the%20two,be%20included%20in%20the%20code.&amp;text=%23include%20is%20for%20pre%2Ddefined%20header%20files.\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q7. Using a for loop, how could you write a C code to count down from 10 to 1 and display each number on its own line?\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\nfor (int i = 0; i&gt;=0, i--){\n    printf(\"%d\\n\", i);\n}//end of loop</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nint i;\nfor (i=1; i&lt;=10; i++){\n    printf(\"%d\", i);\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nint i = 10;\nwhile (i&gt;0){\n    printf(\"%d\\n\", i);\n    i--;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nint i;\nfor (i= 10; i&gt;0; i--){\n    printf(\"%d\\n\", i);\n}// end of loop</code></p>\n", "is_correct": true}]}, {"question": "Q8. What is not one of the reserved words in standard C?\n", "alternatives": [{"alternative": " volatile\n", "is_correct": false}, {"alternative": " typeof\n", "is_correct": true}, {"alternative": " register\n", "is_correct": false}, {"alternative": " typedef\n</ul>\n<p><a href=\"https://www.ibm.com/docs/en/adfz/developer-for-zos/14.2.0?topic=programs-c-reserved-keywords\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q9. What does the program shown below return?\n<p><code>c\nint main(){\n    int a=1, b=2, c=3, d=4;\n    int x = a;\n    if (a&gt;b)\n    if (b&lt;c) x=b;\n    else x=c;\n    return(x);\n}</code></p>\n", "alternatives": [{"alternative": " 1\n", "is_correct": true}, {"alternative": " 3\n", "is_correct": false}, {"alternative": " 2\n", "is_correct": false}, {"alternative": " 0\n</ul>\n", "is_correct": false}]}, {"question": "Q10. Using the Union declaration below, how many bytes of memory space will the data of this type occupy?\n<p><code>c\nunion Cars {\n    char make[20];\n    char model[30];\n    short year;\n} car;</code></p>\n", "alternatives": [{"alternative": " 32\n", "is_correct": false}, {"alternative": " 54\n", "is_correct": false}, {"alternative": " 30\n", "is_correct": true}, {"alternative": " 52\n</ul>\n", "is_correct": false}]}, {"question": "Q11. In this code sample, what is not a problem for C compiler?\n<p><code>c\nmain(){\n    constant int PI = 3.14;\n    printf(\"%f\\n\", pi);\n}</code></p>\n", "alternatives": [{"alternative": " The value of PI needs to be set to 3.141593, not 3.14\n", "is_correct": true}, {"alternative": " The declaration of PI needs to say const, not constant.\n", "is_correct": false}, {"alternative": " The data type of PI needs to be float not int.\n", "is_correct": false}, {"alternative": " The printf statement needs to use PI, not pi.\n</ul>\n", "is_correct": false}]}, {"question": "Q12. Which is the smallest program to compile and run without errors?\n", "alternatives": [{"alternative": " main()\n", "is_correct": false}, {"alternative": " int main() {return 0;}\n", "is_correct": true}, {"alternative": " main() { }\n", "is_correct": false}, {"alternative": " main() { ; }\n</ul>\n<p><a href=\"https://www.beningo.com/150-the-wolrds-shortest-c-program/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q13. What is optional in a function declaration?\n", "alternatives": [{"alternative": " data type of parameters\n", "is_correct": false}, {"alternative": " return type of function\n", "is_correct": false}, {"alternative": " parameter names\n", "is_correct": true}, {"alternative": " number of parameters\n</ul>\n<p><a href=\"https://www.cprogramming.com/tutorial/c/lesson4.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q14. C treats all devices, such as the display and the keyboard, as files. Which file opens automatically when a program executes?\n", "alternatives": [{"alternative": " stdout\n", "is_correct": true}, {"alternative": " stdio.h\n", "is_correct": false}, {"alternative": " default.h\n", "is_correct": false}, {"alternative": " string.h\n</ul>\n", "is_correct": false}]}, {"question": "Q15. In which segment does dynamic memory allocation takes place?\n", "alternatives": [{"alternative": " BSS Segment\n", "is_correct": false}, {"alternative": " stack\n", "is_correct": false}, {"alternative": " heap\n", "is_correct": true}, {"alternative": " data segment\n</ul>\n<p><a href=\"http://www.it.uc3m.es/pbasanta/asng/course_notes/dynamic_memory_heap_en.html#:~:text=The%20dynamic%20memory%20that%20is,reads%20a%20set%20of%20words.\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q16. Which function do you use to deallocate memory?\n", "alternatives": [{"alternative": " dalloc()\n", "is_correct": false}, {"alternative": " dealloc()\n", "is_correct": false}, {"alternative": " release()\n", "is_correct": false}, {"alternative": " free()\n</ul>\n<p><a href=\"https://devdocs.io/c/memory/free\">Reference</a></p>\n<p><a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_free.htm\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q17. In C language what are the basic building blocks that are constructed together to write a program?\n", "alternatives": [{"alternative": " keywords\n", "is_correct": false}, {"alternative": " identifiers\n", "is_correct": false}, {"alternative": " tokens\n", "is_correct": true}, {"alternative": " functions\n</ul>\n<p><a href=\"https://fresh2refresh.com/c-programming/c-tokens-identifiers-keywords/#:~:text=C%20tokens%20are%20the%20basic,are%20known%20as%20C%20tokens.\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q18. When is memory for a variable allocated?\n", "alternatives": [{"alternative": " during the assigment of the variable\n", "is_correct": false}, {"alternative": " during the initialization of the variable\n", "is_correct": false}, {"alternative": " during the declaration of the variable\n", "is_correct": true}, {"alternative": " during the definition of the variable\n</ul>\n<p><a href=\"https://www.codingame.com/playgrounds/14589/how-to-play-with-pointers-in-c/dynamic-memory-allocation#:~:text=When%20a%20variable%20is%20declared,allocation%20or%20dynamic%20memory%20allocation.\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q19. C uses the call by value method to pass arguments to functions. How can you invoke the call by reference method?\n", "alternatives": [{"alternative": " by using pointers\n", "is_correct": true}, {"alternative": " by declaring functions separately from defining them\n", "is_correct": false}, {"alternative": " by using recursive functions\n", "is_correct": false}, {"alternative": " by using global variables\n</ul>\n<p><a href=\"https://www.javatpoint.com/call-by-value-and-call-by-reference-in-c\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q20. A union allows you to store different <code>___</code> in the same <code>___</code>.\n", "alternatives": [{"alternative": " Objects; Structure\n", "is_correct": false}, {"alternative": " Variables; Declaration\n", "is_correct": false}, {"alternative": " Data types; Memory space\n", "is_correct": true}, {"alternative": " Arrays; Header file\n</ul>\n", "is_correct": false}]}, {"question": "Q21. What is the output of this program?\n<p><code>c\nmain() {\n    char c1='a' , c2='A';\n    int i=c2-c1;\n    printf(\"%d\", i);\n}</code></p>\n", "alternatives": [{"alternative": " 32\n", "is_correct": false}, {"alternative": " Runtime error\n", "is_correct": false}, {"alternative": " -32\n", "is_correct": true}, {"alternative": " 0\n</ul>\n", "is_correct": false}]}, {"question": "Q22. What is the difference between scanf() and sscanf() functions?\n", "alternatives": [{"alternative": " The scanf() function reads data formatted as a string; The sscanf() function reads string input from the screen.\n", "is_correct": false}, {"alternative": " The scanf() function reads formatted data from the keyboard; The sscanf() function reads formatted input from a string.\n", "is_correct": true}, {"alternative": " The scanf() function reads string data from the keyboard; The sscanf() function reads string data from a string.\n", "is_correct": false}, {"alternative": " The scanf() function reads formatted data from a file; The sscanf() function reads input from a selected string\n</ul>\n", "is_correct": false}]}, {"question": "Q23. What is not a valid command with this declaration?\n<p><code>c\nchar *string[20] = { \"one\", \"two\", \"three\"};</code></p>\n", "alternatives": [{"alternative": " <code>printf(\"%c\", string[1][2]);</code>\n", "is_correct": false}, {"alternative": " <code>printf(\"%s\", string[1][2]);</code>\n", "is_correct": true}, {"alternative": " <code>printf(\"%s\", string[1]);</code>\n", "is_correct": false}, {"alternative": " <code>printf(string[1]);</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q24. What is the expression player-&gt;name equivalent to?\n", "alternatives": [{"alternative": " <code>player.name</code>\n", "is_correct": false}, {"alternative": " <code>(*player).name</code>\n", "is_correct": true}, {"alternative": " <code>*player.name</code>\n", "is_correct": false}, {"alternative": " <code>player.*name</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q25. Which program will compile and run without errors?\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\nmain() {\n    for(i=0; i&lt;10; i++) ;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nmain() {\nint i=0;\n    for(; i&lt;10; i++) ;\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>c\nmain() {\n    int i;\n    for(i=0; i&lt;j; i++) ;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nmain() {\nint i;\n    for (i= 10; i&lt;10; i++)\n}</code></p>\n", "is_correct": false}]}, {"question": "Q26. What does this function call return?\n<p><code>c\n1 main() { float x = f1(10, 5); }\n2 float f1(int a, int b) { return (a/b); }</code></p>\n", "alternatives": [{"alternative": " 2\n", "is_correct": false}, {"alternative": " 2.000000\n", "is_correct": false}, {"alternative": " a runtime error\n", "is_correct": false}, {"alternative": " a compiler error\n</ul>\n", "is_correct": true}]}, {"question": "Q27. What does this program create?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>int main() {\n    int *p = NULL;\n    return 0;\n}\n```</p>\n", "alternatives": [{"alternative": " a runtime error\n", "is_correct": false}, {"alternative": " a NULL pointer\n", "is_correct": true}, {"alternative": " a compile error\n", "is_correct": false}, {"alternative": " a void pointer\n</ul>\n", "is_correct": false}]}, {"question": "Q28. What is an alternative way to write the expression (*x).y?\n", "alternatives": [{"alternative": " There is no equivalent.\n", "is_correct": false}, {"alternative": " x-&gt;y\n", "is_correct": true}, {"alternative": " *x-&gt;y\n", "is_correct": false}, {"alternative": " y-&gt;x\n</ul>\n", "is_correct": false}]}, {"question": "Q29. Compile time errors are static errors that can be found where in the code?\n", "alternatives": [{"alternative": " in declarations and definitions\n", "is_correct": true}, {"alternative": " in functions and expressions\n", "is_correct": false}, {"alternative": " in syntax and semantics\n", "is_correct": false}, {"alternative": " in objects and statements\n</ul>\n", "is_correct": false}]}, {"question": "Q30. File input and output (I/O) in C is heavily based on the way it is done <code>___</code>?\n", "alternatives": [{"alternative": " in Unix\n", "is_correct": true}, {"alternative": " in C++\n", "is_correct": false}, {"alternative": " in C#\n", "is_correct": false}, {"alternative": " in DOS\n</ul>\n", "is_correct": false}]}, {"question": "Q31. What does the strcmp(str1, str2); function return?\n", "alternatives": [{"alternative": " 0 if str1 and str2 are the same, a negative number if str1 is less than str2, a positive number if str1 is greater than str2\n", "is_correct": true}, {"alternative": " true (1) if str1 and str2 are the same, false (0) if str1 and str2 are not the same\n", "is_correct": false}, {"alternative": " true (1) if str1 and str2 are the same, NULL if str1 and str2 are not the same\n", "is_correct": false}, {"alternative": " 0 if str1 and str2 are the same, a negative number if str2 is less than str1, a positive number if str2 is greater than str1\n</ul>\n", "is_correct": false}]}, {"question": "Q32. What is the output of this program?\n<p><code>c\nint a=10, b=20;\nint f1(a) { return(a*b); }\nmain() {\nprintf(\"%d\", f1(5));\n}</code></p>\n", "alternatives": [{"alternative": " 100\n", "is_correct": true}, {"alternative": " 200\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " 50\n</ul>\n", "is_correct": false}]}, {"question": "Q33. Which is <em>not</em> a correct way to declare a string variable?\n", "alternatives": [{"alternative": " <code>char *string = \"Hello World\";</code>\n", "is_correct": false}, {"alternative": " <code>char string = \"Hello World\";</code>\n", "is_correct": true}, {"alternative": " <code>char string[20] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'};</code>\n", "is_correct": false}, {"alternative": " <code>char string[] = \"Hello World\";</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q34. Which choice is an include guard for the header file mylib.h?\n", "alternatives": [{"alternative": " :\n</ul>\n<p>```c</p>\n<h1>ifdef MYLIB_H</h1>\n<h1>undef MYLIB_H</h1>\n<p>// mylib.h content</p>\n<h1>endif /<em> MYLIB_H </em>/</h1>\n<p>```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c</p>\n<h1>ifndef MYLIB_H</h1>\n<h1>define MYLIB_H</h1>\n<p>// mylib.h content</p>\n<h1>endif /<em> MYLIB_H </em>/</h1>\n<p>```</p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p>```c</p>\n<h1>define MYLIB_H</h1>\n<h1>include \"mylib.h\"</h1>\n<h1>undef MYLIB_H</h1>\n<p>```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c</p>\n<h1>ifdef MYLIB_H</h1>\n<h1>define MYLIB_H</h1>\n<p>// mylib.h content</p>\n<h1>endif /<em> MYLIB_H </em>/</h1>\n<p>```</p>\n", "is_correct": false}]}, {"question": "Q35. How many times does the code inside the while loop get executed in this program?\n<p><code>c\nmain(){\n int x=1;\n while(x++&lt;100){\n    x*=x;\n    if(x&lt;10) continue;\n    if(x&gt;50) break;\n }\n}</code></p>\n", "alternatives": [{"alternative": " 100\n", "is_correct": false}, {"alternative": " 3\n", "is_correct": true}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " 50\n</ul>\n", "is_correct": false}]}, {"question": "Q36. File input and output (I/O) in C is done through what?\n", "alternatives": [{"alternative": " syntax-driven components\n", "is_correct": false}, {"alternative": " native interfaces\n", "is_correct": false}, {"alternative": " system objects\n", "is_correct": false}, {"alternative": " function calls\n</ul>\n", "is_correct": true}]}, {"question": "Q37. Directives are translated by the?\n", "alternatives": [{"alternative": " Pre-processor\n", "is_correct": true}, {"alternative": " Compiler\n", "is_correct": false}, {"alternative": " Linker\n", "is_correct": false}, {"alternative": " Editor\n</ul>\n", "is_correct": false}]}, {"question": "Q38. The main loop structures in C programming are the for loop, the while loop, and which other loop?\n", "alternatives": [{"alternative": " do...while\n", "is_correct": true}, {"alternative": " for...in\n", "is_correct": false}, {"alternative": " repeat...until\n", "is_correct": false}, {"alternative": " do...until\n</ul>\n", "is_correct": false}]}, {"question": "Q39. By default, C Functions are what type of functions?\n", "alternatives": [{"alternative": " global\n", "is_correct": false}, {"alternative": " static\n", "is_correct": false}, {"alternative": " library\n", "is_correct": true}, {"alternative": " system\n</ul>\n", "is_correct": false}]}, {"question": "Q40. You have written a function that you want to include as a member of structure a. How is such as structure member defined?\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\nstruct a {\n    void *f1;\n};</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>c\nstruct a {\n    void (*f1)();\n};</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nstruct a {\n    *(void *f1)();\n};</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\nstruct a {\n    void *f1();\n};</code></p>\n", "is_correct": false}]}, {"question": "Q41. A Stack data structure allows all data operations at one end only, making it what kind of an implementation?\n", "alternatives": [{"alternative": " FIFO\n", "is_correct": false}, {"alternative": " LIFO\n", "is_correct": true}, {"alternative": " LILO\n", "is_correct": false}, {"alternative": " LOLI\n</ul>\n", "is_correct": false}]}, {"question": "Q42. What does this program display?\n<p><code>c\nmain(){\n    char *p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i;\n    for (i=0;i&lt;5;i++) *p++; *p++;\n    printf(\"%c\",*p++);\n}</code></p>\n", "alternatives": [{"alternative": " K\n", "is_correct": false}, {"alternative": " M\n", "is_correct": false}, {"alternative": " H\n", "is_correct": false}, {"alternative": " G\n</ul>\n", "is_correct": true}]}, {"question": "Q43. Describe the relationship between lvalue and rvalue.\n", "alternatives": [{"alternative": " An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear only on the right-hand side.\n", "is_correct": false}, {"alternative": " An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear on either the left-hand or right-hand side.\n", "is_correct": false}, {"alternative": " An lvalue and an rvalue may appear on either left-hand or right-hand side of an assignment.\n", "is_correct": false}, {"alternative": " An lvalue may appear on the left-hand or right-hand side of an assignment; an rvalue may appear only on the right-hand side.\n</ul>\n", "is_correct": true}]}, {"question": "Q44. Which operator is used to access the address of a variable?\n", "alternatives": [{"alternative": " <code>%</code>\n", "is_correct": false}, {"alternative": " <code>**</code>\n", "is_correct": false}, {"alternative": " <code>*</code>\n", "is_correct": false}, {"alternative": " <code>&amp;</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q45. Which add function properly returns the updated value of result?\n", "alternatives": [{"alternative": " :\n</ul>\n<p>```c\nvoid add (int a, int b, int <em>result)\n{\n    </em>result = a+b;\n}</p>\n<p>main()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;</p>\n<pre><code>add(a,b,&amp;result);\n</code></pre>\n<p>}\n```</p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p>```c\nvoid add (int a, int b, int result)\n{\n    result = a+b;\n}</p>\n<p>main()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;</p>\n<pre><code>add(a,b,result);\n</code></pre>\n<p>}\n```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c\nvoid add (int a, int b, int *result)\n{\n    result = a+b;\n}</p>\n<p>main()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;</p>\n<pre><code>add(a,b,result);\n</code></pre>\n<p>}\n```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c\nvoid add (int <em>a, int </em>b, int *result)\n{\n    result = a+b;\n}</p>\n<p>main()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;</p>\n<pre><code>add(*a,*b,*result);\n</code></pre>\n<p>}\n```</p>\n", "is_correct": false}]}, {"question": "Q46. Consider the number of the Fibonacci series below 100: 0,1,1,2,3,5,8,13,21,34,55,89. Which piece of code outputs the sequence?\n", "alternatives": [{"alternative": " :\n</ul>\n<p>```c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;</p>\n<pre><code>if(a&gt;100)\n   return;\n\nprintf(\"%d\", a);\n\nfibonacci(a,b);\n</code></pre>\n<p>}</p>\n<p>int main()\n{\n    fibonacci(0,1);\n}\n```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;</p>\n<pre><code>if(a&gt;100)\n   return;\n\nprintf(\"%d\", b);\n\nfibonacci(a,c);\n</code></pre>\n<p>}</p>\n<p>int main()\n{\n    fibonacci(0,1);\n}\n```</p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p>```c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;</p>\n<pre><code>if(a&gt;100)\n   return;\n\nprintf(\"%d\", a);\n\nfibonacci(b,c);\n</code></pre>\n<p>}</p>\n<p>int main()\n{\n    fibonacci(0,1);\n}\n```</p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p>```c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;</p>\n<pre><code>if(a&gt;100)\n   return;\n\nprintf(\"%d\", c);\n\nfibonacci(b,c);\n</code></pre>\n<p>}</p>\n<p>int main()\n{\n    fibonacci(0,1);\n}\n```</p>\n", "is_correct": false}]}, {"question": "Q47. Which is <em>not</em> a storage class specifier?\n", "alternatives": [{"alternative": " <code>intern</code>\n", "is_correct": true}, {"alternative": " <code>extern</code>\n", "is_correct": false}, {"alternative": " <code>register</code>\n", "is_correct": false}, {"alternative": " <code>static</code>\n</ul>\n<p><a href=\"https://en.cppreference.com/w/cpp/language/storage_duration\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q48. Which line of code, after execution, results in <code>i</code> having the value of 1?\n", "alternatives": [{"alternative": " <code>for(i=1; i&lt;=1; i++);</code>\n", "is_correct": false}, {"alternative": " <code>for(i=1; i=10; i++);</code>\n", "is_correct": false}, {"alternative": " <code>for(i=1; i==10; i++);</code>\n", "is_correct": true}, {"alternative": " <code>for(i=10; i&gt;=1; i--);</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q49. What is the value of variable c at the end of this program?\n<p><code>1 main() {\n2   int a, b, c;\n3   a=10; b=50;\n4   c=a * b % a;\n5 }</code></p>\n", "alternatives": [{"alternative": " 50\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " 0\n", "is_correct": true}, {"alternative": " 500\n</ul>\n", "is_correct": false}]}, {"question": "Q50. What is <em>not</em> one of the basic data types in C\n", "alternatives": [{"alternative": " long double\n", "is_correct": false}, {"alternative": " unsigned char\n", "is_correct": false}, {"alternative": " array\n", "is_correct": true}, {"alternative": " float\n</ul>\n", "is_correct": false}]}, {"question": "Q51. What is the member access operator for a structure?\n", "alternatives": [{"alternative": " ,\n", "is_correct": false}, {"alternative": " []\n", "is_correct": false}, {"alternative": " .\n", "is_correct": true}, {"alternative": " :\n</ul>\n", "is_correct": false}]}, {"question": "Q52. What standard data type provides the smallest storage size and can be used in computations?\n", "alternatives": [{"alternative": " char\n", "is_correct": true}, {"alternative": " float\n", "is_correct": false}, {"alternative": " int\n", "is_correct": false}, {"alternative": " short\n</ul>\n", "is_correct": false}]}, {"question": "Q53. what does the ctype tolower() function do?\n", "alternatives": [{"alternative": " It returns TRUE for lowercase letters of the alphabet.\n", "is_correct": false}, {"alternative": " It ensures that text output uses only ASCII values (0 through 127).\n", "is_correct": false}, {"alternative": " It returns FALSE for lowercase letters of the alphabet.\n", "is_correct": false}, {"alternative": " It converts an uppercase letter of the alphabet to lowercase.\n</ul>\n", "is_correct": true}]}, {"question": "Q54. Void pointer <em>vptr</em> is assigned the address of float variable <em>g</em>. What is a valid way to dereference <em>vptr</em> to assign its pointed value to a float variable named <em>f</em> later in the program?\n<p><code>c\nfloat g;\nvoid *vptr=&amp;g;</code></p>\n", "alternatives": [{"alternative": " <code>f=(float *)vptr;</code>\n", "is_correct": false}, {"alternative": " <code>f=*(float *)vptr;</code>\n", "is_correct": true}, {"alternative": " <code>f=*(float)vptr;</code>\n", "is_correct": false}, {"alternative": " <code>f=(float)*vptr;</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q55. The dynamic memory allocation functions are defined in which system header file ?\n", "alternatives": [{"alternative": " stdio.h\n", "is_correct": false}, {"alternative": " stdlib.h\n", "is_correct": true}, {"alternative": " limits.h\n", "is_correct": false}, {"alternative": " stddef.h\n</ul>\n", "is_correct": false}]}, {"question": "Q56. A function is a set of <strong>_</strong>.\n", "alternatives": [{"alternative": " declarations\n", "is_correct": false}, {"alternative": " statements\n", "is_correct": true}, {"alternative": " variables\n", "is_correct": false}, {"alternative": " objects\n</ul>\n", "is_correct": false}]}, {"question": "Q57. How are static functions different from global functions?\n", "alternatives": [{"alternative": " Static functions must be declared in advance of being defined.\n", "is_correct": false}, {"alternative": " Static functions must be declared is a separate header file.\n", "is_correct": false}, {"alternative": " Static functions always return the same value.\n", "is_correct": false}, {"alternative": " Static functions can be accessed only in the file where they are declared.\n</ul>\n", "is_correct": true}]}, {"question": "Q58. Which code example creates the string \"Hello Mars\" in storage buffer <code>hello</code>.\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\n    char hello[25];\n    strcpy(hello, \"Hello \");\n    strcpy(hello, \"Mars\");</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\n    char hello[25];\n    char *p;\n    strcpy(hello, \"Hello World\");\n    p = hello;\n    p +=6;\n    strcpy(p, \"Mars\");</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>c\n    char *hello;\n    strcpy(hello, \"Hello World\");\n    hello+=6;\n    strcpy(hello, \"Mars\");</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\n    char hello[25];\n    strcpy(hello, \"Hello World\");\n    strcpy(*hello[6], \"Mars\");</code></p>\n", "is_correct": false}]}, {"question": "Q59. If you use the fopen() function with the \"a\" mode, what happens if the named file doesn't exist?\n", "alternatives": [{"alternative": " The file is created and opened for reading.\n", "is_correct": false}, {"alternative": " The file is created and opened for writing.\n", "is_correct": true}, {"alternative": " The fopen() function returns a NULL indicating that the operation has failed.\n", "is_correct": false}, {"alternative": " The file is created and opened for both writing and reading\n</ul>\n<p><a href=\"https://www.tutorialspoint.com/c_standard_library/c_function_fopen.htm\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q60. What does this function return?\n<p><code>c\nint fl(int a, int b) { return(a&gt;b?a:b); }</code></p>\n", "alternatives": [{"alternative": " compiler error\n", "is_correct": false}, {"alternative": " the smaller value of the two passed parameters\n", "is_correct": false}, {"alternative": " runtime error\n", "is_correct": false}, {"alternative": " the greater value of the two passed parameters\n</ul>\n", "is_correct": true}]}, {"question": "Q61. Which option is a valid function name?\n", "alternatives": [{"alternative": " draw_star()\n", "is_correct": true}, {"alternative": " 5times()\n", "is_correct": false}, {"alternative": " upper-limit()\n", "is_correct": false}, {"alternative": " auto()\n</ul>\n", "is_correct": false}]}, {"question": "Q62. What is not a valid type definition of a structure that contains x and y coordinates as integers, and that can be used as shown for the variable named point?\n<p><code>c\ncoord point;\npoint.x = 9;\npoint.y = 3;</code></p>\n", "alternatives": [{"alternative": " :\n</ul>\n<p><code>c\nstruct coord{\n    int x;\n    int y;\n};\ntypedef struct coord coord;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\ntypedef struct coord{\n    int x;\n    int y;\n};</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " :\n</ul>\n<p><code>c\ntypedef struct coord{\n    int x;\n    int y;\n} coord;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " :\n</ul>\n<p><code>c\ntypedef struct{\n    int x;\n    int y;\n} coord;</code></p>\n", "is_correct": false}]}, {"question": "Q63. What is the output of the below program?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<h1>if X == 3</h1>\n<pre><code>#define Y 3\n</code></pre>\n<h1>else</h1>\n<pre><code>#define Y 5\n</code></pre>\n<h1>endif</h1>\n<p>int main()\n{\n    printf(\"%d\", Y);\n    return 0;\n}\n```</p>\n", "alternatives": [{"alternative": " 3\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": true}, {"alternative": " 3 or 5 depending on input\n", "is_correct": false}, {"alternative": " Compile time error\n</ul>\n", "is_correct": false}]}, {"question": "Q64. What do the functions malloc() and calloc() allocate?\n", "alternatives": [{"alternative": " reallocatged memory\n", "is_correct": false}, {"alternative": " static memeory\n", "is_correct": false}, {"alternative": " dynamic memory\n", "is_correct": true}, {"alternative": " fragmented memory\n</ul>\n<p><a href=\"https://devdocs.io/c/memory/calloc , https://devdocs.io/c/memory/malloc\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q65. You need to determine if a string variable is a substring of another string. Which standard C library function do you use?\n", "alternatives": [{"alternative": " substr(str1, str2);\n", "is_correct": false}, {"alternative": " strstr(str1, str2);\n", "is_correct": true}, {"alternative": " substring(str1, str2);\n", "is_correct": false}, {"alternative": " strspn(str1, str2);\n</ul>\n<p><a href=\"https://devdocs.io/c/string/byte/strstr\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q66. Find the output of the program?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<h1>define L 10</h1>\n<p>int main(){\n    int a =10;\n    switch (a,a&lt;&lt;2){\n        case L:printf(\"a==L\");     break;\n        case L<em>2 : printf(\"a = L</em> 2\\n\");     break;\n        case L<em>4 : printf(\"a = L</em> 4\\n\");    break;\n        default: printf(\"Error\\n\");\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " <code>a=L*2</code>\n", "is_correct": false}, {"alternative": " <code>a=L</code>\n", "is_correct": false}, {"alternative": " <code>Error</code>\n", "is_correct": false}, {"alternative": " <code>a=L*4</code>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/left-shift-right-shift-operators-c-cpp/\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q67. Predict the output of the following code when the <strong>interger</strong> variables x is initialized to 10,y to 2 and z to 0.\n<p><code>c\nz = x + y * x + 10 / 2 * x;\nprintf(\"value is =%d\",z);</code></p>\n", "alternatives": [{"alternative": " 80\n", "is_correct": true}, {"alternative": " 170\n", "is_correct": false}, {"alternative": " 31.5\n", "is_correct": false}, {"alternative": " 6\n</ul>\n<p><a href=\"https://www.informit.com/articles/article.aspx?p=2062174&amp;seqNum=4\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q68. What will be the output of the following code snippet?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>void solve() {\n    int x = 2;\n    printf(\"%d\", (x &lt;&lt; 1) + (x &gt;&gt; 1));\n}\nint main() {\n    solve();\n    return 0;\n}\n```</p>\n", "alternatives": [{"alternative": " 5\n", "is_correct": true}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 2\n", "is_correct": false}, {"alternative": " 1\n</ul>\n", "is_correct": false}]}, {"question": "Q69. What is the output of this program?\n<p><code>c\nint a=20, b=10;\nint f1(a) {\n    return(a*b);\n}\nmain() {\n    printf(\"%d\", f1(5));\n}</code></p>\n", "alternatives": [{"alternative": " 100\n", "is_correct": false}, {"alternative": " 200\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " 50\n</ul>\n", "is_correct": true}]}, {"question": "Q70. What is /0 character ?\n", "alternatives": [{"alternative": " String\n", "is_correct": false}, {"alternative": " NULL Character\n", "is_correct": true}, {"alternative": " ZERO\n", "is_correct": false}, {"alternative": " Variable\n</ul>\n<p><a href=\"https://www.youth4work.com/Talent/C-Language/Forum/117150-what-is-the-use-of-a-0-character-in-c-language#:~:text=by%20using%20of%20null%20character(%27%5C0%27)%20it%20terminates%20the%20string%20untill%20the%20null%20character%20hit...%20which%20means%20comes%20out%20of%20the%20loop...%20In%20strings%20by%20default%20takes%20the%20null%20charater\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q71. What is correct output for follwing code ?1\n<p>```c</p>\n<h1>include&lt;stdio.h&gt;</h1>\n<h1>include&lt;conio.h&gt;</h1>\n<p>main()\n{\n     int a=10, b=20;\n     clrscr();\n     printf(\"Before swapping a=%d b=%d\",a,b);\n     a=a+b;\n     b=a-b;\n     a=a-b;\n     printf(\"nAfter swapping a=%d b=%d\",a,b);\n     getch();\n}\n```</p>\n", "alternatives": [{"alternative": " Before a=10 b=20 , After a=10 b=10\n", "is_correct": false}, {"alternative": " Before a=10 b=10 , After a=20 b=10\n", "is_correct": false}, {"alternative": " Before a=10 b=20 , After a=20 b=20\n", "is_correct": false}, {"alternative": " Before a=10 b=20 , After a=20 b=10\n</ul>\n", "is_correct": true}]}, {"question": "Q72. What is Incorrect option that explain # pragma directive ?\n", "alternatives": [{"alternative": " #pragma exit allows us to specify functions called upon program exit.\n", "is_correct": false}, {"alternative": " This is a preprocessor directive that can be used to turn on or off certain features.\n", "is_correct": false}, {"alternative": " #pragma startup don't allows us to specify functions called upon program startup.\n", "is_correct": true}, {"alternative": " It is of two types #pragma startup, #pragma exit and pragma warn.\n</ul>\n", "is_correct": false}]}, {"question": "Q73. What will be the output of the following code snippet?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>union School {\n    int age, rollNo;\n    double marks;\n};\nvoid solve() {\n    union School sc;\n    sc.age = 19;\n    sc.rollNo = 82;\n    sc.marks = 19.04;\n    printf(\"%d\", (int)sizeof(sc));\n}\nint main() {\n    solve();\n    return 0;\n}\n```</p>\n", "alternatives": [{"alternative": " 2\n", "is_correct": false}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 8\n", "is_correct": true}, {"alternative": " 10\n</ul>\n", "is_correct": false}]}, {"question": "Q74. What will be the output of the following code snippet?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>struct School {\n    int age, rollNo;\n};\nvoid solve() {\n    struct School sc;\n    sc.age = 19;\n    sc.rollNo = 82;\n    printf(\"%d %d\", sc.age, sc.rollNo);\n}\nint main() {\n    solve();\n    return 0;\n}\n```</p>\n", "alternatives": [{"alternative": " 19 82\n", "is_correct": true}, {"alternative": " Compilation Error\n", "is_correct": false}, {"alternative": " 82 19\n", "is_correct": false}, {"alternative": " None of these\n</ul>\n", "is_correct": false}]}, {"question": "Q75. What is the output of the following code snippet?\n<p><code>c\nint main() {\n    int sum = 2 + 4 / 2 + 6 * 2;\n    printf(\"%d\", sum);\n    return 0;\n}</code></p>\n", "alternatives": [{"alternative": " 2\n", "is_correct": false}, {"alternative": " 15\n", "is_correct": false}, {"alternative": " 16\n", "is_correct": true}, {"alternative": " 18\n</ul>\n", "is_correct": false}]}, {"question": "Q76. What does the following declaration mean?\n<p><code>int (*ptr)[10];</code></p>\n", "alternatives": [{"alternative": " ptr is array of pointers to 10 integers\n", "is_correct": false}, {"alternative": " ptr is a pointer to an array of 10 integers\n", "is_correct": true}, {"alternative": " ptr is an array of 10 integers\n", "is_correct": false}, {"alternative": " ptr is an pointer to array\n</ul>\n", "is_correct": false}]}, {"question": "Q77. What will be the output of the following code snippet?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>void change(int,int);\nint main()\n{\n   int a=10,b=20;\n   change(a,b); //calling a function by passing the values of variables.\n   printf(\"Value of a is: %d\",a);\n   printf(\"\\n\");\n   printf(\"Value of b is: %d\",b);\n   return 0;\n}\nvoid change(int x,int y)\n{\n   x=13;\n   y=17;\n}\n```</p>\n", "alternatives": [{"alternative": " 10,20\n", "is_correct": true}, {"alternative": " 10,10\n", "is_correct": false}, {"alternative": " 20,20\n", "is_correct": false}, {"alternative": " 20,10\n</ul>\n<p><strong>Explanation :</strong> The function \"change\" will change the value of x and y only within its own scope, so a and is unaffected.</p>\n", "is_correct": false}]}, {"question": "Q78. Choose true or false.When variable is created in C, a memory address is assigned to the variable.\n", "alternatives": [{"alternative": " True\n", "is_correct": true}, {"alternative": " False\n</ul>\n", "is_correct": false}]}, {"question": "Q79. What does the following fragment of C-program print?\n<p>```c</p>\n<h1>include <stdio.h></h1>\n<p>int main()\n{\n    char c[] = \"GATE2011\";</p>\n<pre><code>char *p = c;\n\nprintf(\"%s\", p + p[3] -p[1]);\n\nreturn 0;\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " GATE 2011\n", "is_correct": false}, {"alternative": " E2011\n", "is_correct": false}, {"alternative": " 2011\n", "is_correct": true}, {"alternative": " 01\n</ul>\n<p><strong>Explanation :</strong> char c = \"GATE2011\";since char *p =c it means p represents to the base address of string \u201cGATE2011\u201d SO p[3] is 'E' and p[1] is 'A'. Value of Sub expression p[3] \u2013 p[1] = ASCII value of \u2018E\u2019 \u2013 ASCII value of \u2018A\u2019 = 4. So the expression p + p[3] \u2013 p[1] becomes ( p + 4) And (p+4) represent to base address of string \u201c2011\u201d printf(\u201c%s\u201d, p + p[3] \u2013 p[1]) ; So it will print 2011</p>\n", "is_correct": false}]}, {"question": "Q80. What is the output of the following code snippet?\n<p><code>c\nint main() {\n    int a = 5, b = 6, c;\n    c = a++ + ++b;\n    printf(\"%d %d %d\", a, b, c);\n    return 0;\n}</code></p>\n", "alternatives": [{"alternative": " 5 6 11\n", "is_correct": false}, {"alternative": " 6 7 12\n", "is_correct": true}, {"alternative": " 5 6 12\n", "is_correct": false}, {"alternative": " 6 6 12\n</ul>\n", "is_correct": false}]}, {"question": "Q81. What will be the output of the following C program segment?\n<p>```c\nchar inchar = 'A';\nswitch (inchar)\n{\ncase 'A' :\n    printf (\"choice A \\n\") ;\ncase 'B' :\n    printf (\"choice B \") ;\ncase 'C' :\ncase 'D' :\ncase 'E' :\ndefault:\n    printf (\"No Choice\") ;\n}</p>\n<p>```</p>\n", "alternatives": [{"alternative": " No choice\n", "is_correct": false}, {"alternative": " Choice A\n", "is_correct": false}, {"alternative": " Choice A\n      Choice B No choice\n", "is_correct": true}, {"alternative": " Program gives no output as it is erroneous\n</ul>\n", "is_correct": false}]}, {"question": "Q82. Which of the following is the correct syntax to print the message in C++ language?\n", "alternatives": [{"alternative": " Out &lt;&lt;\"Hello world!\n", "is_correct": false}, {"alternative": " Cout &lt;&lt; Hello world! ;\n", "is_correct": false}, {"alternative": " cout &lt;&lt;\"Hello world!\";\n", "is_correct": true}, {"alternative": " None of the above\n</ul>\n", "is_correct": false}]}, {"question": "Q83. String variable str1 has the value of \"abc\", and string variable str2 has the value \"xyz\". What are the values of str1 and str2 after this statement is executed?\n<p><code>c\nstrcpy(str1, str2);</code></p>\n", "alternatives": [{"alternative": " str1: \"xyz\" ; str2: \"xyz\"\n", "is_correct": true}, {"alternative": " str1: \"abc\" ; str2: \"xyz\"\n", "is_correct": false}, {"alternative": " str1: \"xyz\" ; str2: \"abc\"\n", "is_correct": false}, {"alternative": " str1: \"abc\" ; str2: \"abc\"\n</ul>", "is_correct": false}]}]}