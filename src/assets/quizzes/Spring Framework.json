{"title": "Spring Framework", "questions": [{"question": "Q1. How filters are used in Spring Web?\n", "alternatives": [{"alternative": " Filters are called before a request hits the DispatcherServlet. They allow for interception-style, chained processing of web requests for security, timeouts, and other purposes.\n", "is_correct": true}, {"alternative": " Filters are used with a checksum algorithm that will filter invalid bytes out of a byte stream request body and allow for processing of HTTP requests from the DispatcherRequestServlet.\n", "is_correct": false}, {"alternative": " Filters are used with a checksum algorithm that will filter invalid bytes out of an octet stream a multipart upload and allow for chained processing of WebDispatcherServlet requests.\n", "is_correct": false}, {"alternative": " Filters are used to validate request parameters out of the byte stream request body and allow for processing of requests from the DispatcherRequestServlet.\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-mvc-handlerinterceptor-vs-filter\">HandlerInterceptors vs. Filters in Spring MVC</a>. Also there is no such thing as DispatcherRequestServlet in Spring.</p>\n", "is_correct": false}]}, {"question": "Q2. How is a resource defined in the context of a REST service?\n", "alternatives": [{"alternative": " A resource is the actual String literal that composes a URI that is accessed on a RESTful web service.\n", "is_correct": false}, {"alternative": " It is an abstract concept that represents a typed object, data, relationships, and a set of methods that operate on it that is accessed via a URI.\n", "is_correct": true}, {"alternative": " A REST service has a pool of resources composed of allocations of memory that allow a request to be processed.\n", "is_correct": false}, {"alternative": " A resource for a REST service is an explicit allocation of a thread or CPU cycles to allow a request to be processed.\n</ul>\n", "is_correct": false}]}, {"question": "Q3. Which of these is a valid Advice annotation?\n", "alternatives": [{"alternative": " @AfterError\n", "is_correct": false}, {"alternative": " @AfterReturning\n", "is_correct": true}, {"alternative": " @AfterException\n", "is_correct": false}, {"alternative": " @AfterExecution\n</ul>\n", "is_correct": false}]}, {"question": "Q4. What does a ViewResolver do?\n", "alternatives": [{"alternative": " It supports internationalization of web applications by detecting a user's locale.\n", "is_correct": false}, {"alternative": " It generates a view by mapping a logical view name returned by a controller method to a view technology.\n", "is_correct": true}, {"alternative": " It creates a unique view determined by the uers's browser type,supporting cross-browser compatibility.\n", "is_correct": false}, {"alternative": " It maps custom parameters to SQL views in the database, allowing for dynamic content to be created in the response.\n</ul>\n", "is_correct": false}]}, {"question": "Q5. How are Spring Data repositories implemented by Spring at runtime?\n", "alternatives": [{"alternative": " Spring automatically generated code for you based on your YAML config that defined a MethodInterceptor chain that intercept calls to the instance and computed SQL on the fly.\n", "is_correct": false}, {"alternative": " A JDK proxy instance is created, which backs the repository interface, and a MethodInterceptor intercepts calls to the instance and routes as required.\n", "is_correct": true}, {"alternative": " The Spring JDK proxy creates a separate runtime process that acts as an intermediary between the database and the Web server, and intercepts calls to the instance and handles requests.\n", "is_correct": false}, {"alternative": " Spring automatically generated code for you based on your XML config files that define a SpringMethodAutoGeneration factory that intercepts calls to the instance and creates dynamic method that computer SQL on the fly.\n</ul>\n", "is_correct": false}]}, {"question": "Q6. What is SpEL and how is it used in Spring?\n", "alternatives": [{"alternative": " SpEL(Spring Expression Language) runs in the JVM and can act as a drop-in replacement for Groovy or other languages.\n", "is_correct": false}, {"alternative": " SpEL(Spring Expression Language) supports boolean and relational operators and regular expressions, and is used for querying a graph of objects at runtime.\n", "is_correct": true}, {"alternative": " SpEL(Spring Expression Language) allows you to build, configure,and execute tasks such as building artifacts and downloading object dependencies.\n", "is_correct": false}, {"alternative": " SpEL(Spring Expression Language) natively transpiles one JVM language to another, allowing for greater flexibility.\n</ul>\n", "is_correct": false}]}, {"question": "Q7. The process of linking aspects with other objects to create an advised object is called\n", "alternatives": [{"alternative": " dynamic chaining\n", "is_correct": false}, {"alternative": " banding\n", "is_correct": false}, {"alternative": " weaving\n", "is_correct": true}, {"alternative": " interleaving\n</ul>\n", "is_correct": false}]}, {"question": "Q8. How are JDK Dynamic proxies and CGLIB proxies used in Spring?\n", "alternatives": [{"alternative": " JDK Dynamic proxy can proxy only interface, so it is used if the target implements at least one interface. A CGLIB proxy can create a proxy by subclassing and is used if the target does not implement an interface.\n", "is_correct": true}, {"alternative": " Only JDK Dynamic proxies are used in the Spring Bean Lifecycle. CGLIB proxies are used only for integrating with other frameworks.\n", "is_correct": false}, {"alternative": " Only CGLIB proxies are used in the Spring Bean Lifecycle. JDK Dynamic proxies are used only for integrating with other frameworks.\n", "is_correct": false}, {"alternative": " JDK Dynamic proxy can only using an abstract class extended by a target. A CGLIB proxy can create a proxy through bytecode interweaving and is used if the target does not extend an abstract class.\n</ul>\n", "is_correct": false}]}, {"question": "Q9. Which of these is not a valid method on the JoinPoint interface?\n", "alternatives": [{"alternative": " getArgs()\n", "is_correct": false}, {"alternative": " getExceptions()\n", "is_correct": true}, {"alternative": " getSignature()\n", "is_correct": false}, {"alternative": " getTarget()\n</ul>\n", "is_correct": false}]}, {"question": "Q10. In what order do the @PostConstruct annotated method, the init-method parameter method on beans and the afterPropertiesSet() method execute?\n", "alternatives": [{"alternative": " 1. afterPropertiesSet() 2. init-method 3. @PostConstruct\n", "is_correct": false}, {"alternative": " 1. @PostConstruct 2. afterPropertiesSet() 3. init-method\n", "is_correct": true}, {"alternative": " 1. init-method 2. afterPropertiesSet() 3. @PostConstruct\n", "is_correct": false}, {"alternative": " You cannot use these methods together-you must choose only one.\n</ul>\n", "is_correct": false}]}, {"question": "Q11. What is the function of the <code>@Transactional</code> annotation at the class level?\n", "alternatives": [{"alternative": " It's a transaction attribute configured by <code>spring.security.transactions.xml</code> config file that uses Spring's transaction implementation and validation code.\n", "is_correct": false}, {"alternative": " It's a transaction that must actively validate by the bytecode of a transaction using Spring's <code>TransactionBytecodeValidator</code> class. Default Transaction behavior rolls back on validation exception but commits on proper validation\n", "is_correct": false}, {"alternative": " It creates a proxy that implements the same interface(s) as the annotated class, allowing Spring to inject behaviors before, after, or around method calls into the object being proxied.\n", "is_correct": true}, {"alternative": " It's a transaction that must be actively validated by Spring's <code>TransactionValidator</code> class using Spring's transaction validation code. Default Transaction behavior rolls back on validation exception.\n</ul>\n", "is_correct": false}]}, {"question": "Q12. Which is a valid example of the output from this code (ignoring logging statements) ?\n<p>```java\n@SpringBootApplication\npublic class App {\n     public static void main(String args[]) {\n          SpringApplication.run(App.class, args);\n          System.out.println(\"startup\");\n     }\n}</p>\n<p>public class Print implements InitializingBean {\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.println(\"init\");\n     }\n}\n```</p>\n", "alternatives": [{"alternative": " Nothing will print\n", "is_correct": true}, {"alternative": " startup\n      init\n", "is_correct": false}, {"alternative": " init\n", "is_correct": false}, {"alternative": " startup\n</ul>\n", "is_correct": false}]}, {"question": "Q13. Which println statement would you remove to stop this code throwing a null pointer exception?\n<p>```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     @Autowired\n     static SimpleDateFormat formatter;</p>\n<pre><code> @Override\n public void afterPropertiesSet() throws Exception {\n      System.out.println(context.containsBean(\"formatter\") + \" \");\n      System.out.println(context.getBean(\"formatter\").getClass());\n      System.out.println(formatter.getClass());\n      System.out.println(context.getClass());\n }\n</code></pre>\n<p>}</p>\n<p>@Configuration\nclass TestConfig {\n     @Bean\n     public SimpleDateFormat formatter() {\n          return new SimpleDateFormat();\n     }\n}\n```</p>\n", "alternatives": [{"alternative": " formatter.getClass()\n", "is_correct": true}, {"alternative": " context.getClass()\n", "is_correct": false}, {"alternative": " context.getBean(\"formatter\").getClass()\n", "is_correct": false}, {"alternative": " context.containsBean(\"formatter\")\n</ul>\n", "is_correct": false}]}, {"question": "Q14. What is the root interface for accessing a Spring bean container?\n", "alternatives": [{"alternative": " SpringInitContainer\n", "is_correct": false}, {"alternative": " ResourceLoader\n", "is_correct": false}, {"alternative": " ApplicationEventPublisher\n", "is_correct": false}, {"alternative": " BeanFactory\n</ul>\n", "is_correct": true}]}, {"question": "Q15. Which annotation can be used within Spring Security to apply method level security?\n", "alternatives": [{"alternative": " @Secured\n", "is_correct": true}, {"alternative": " @RequiresRole\n", "is_correct": false}, {"alternative": " @RestrictedTo\n", "is_correct": false}, {"alternative": " @SecurePath\n</ul>\n", "is_correct": false}]}, {"question": "Q16. What is the result of calling the map controller method using the HTTP request GET localhost:8080/map?foo=foo&amp;bar=bar ?\n<p>```java\n@RestController\npublic class SampleController {</p>\n<pre><code> @RequestMapping(\"/map\")\n public String map(@RequestParam(\"bar\") String foo, @RequestParam(\"foo\") String bar) {\n      return bar + foo;\n }\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " An InvalidParameterNameMappingException is thrown at runtime.\n", "is_correct": false}, {"alternative": " barfoo\n", "is_correct": false}, {"alternative": " foobar\n", "is_correct": true}, {"alternative": " A status code of 400 Bad Request is returned.\n</ul>\n", "is_correct": false}]}, {"question": "Q17. What is the purpose of the @Lazy annotation and why would you use it?\n", "alternatives": [{"alternative": " It prevents a bean from being created and injected until you run a specific CLI command. It reduces complexity in the application.\n", "is_correct": false}, {"alternative": " It can be applied to a bean so that the bean is not persisted in the database. It reduces the number of database operations.\n", "is_correct": false}, {"alternative": " It can be applied to a bean so that the bean is not created and injected until it is needed. It can help speed up startup time for your application.\n", "is_correct": true}, {"alternative": " It prevents a bean from being created and injected until it receives a HTTP request to a callback hook. It reduces disk footprint.\n</ul>\n", "is_correct": false}]}, {"question": "Q18. What is dependency injection?\n", "alternatives": [{"alternative": " a method by which objects define dependencies they need as abstractions that allows the framework to instantiate and configure them in a central location at runtime.\n", "is_correct": true}, {"alternative": " a paradigm where dependent code is injected into the bytecode of a Java application on a remote server.\n", "is_correct": false}, {"alternative": " a way of injecting remote dependencies into a pre-packaged JAR file from the file system.\n", "is_correct": false}, {"alternative": " a way of injecting remote dependencies into a pre-packaged WAR file from the file system.\n</ul>\n", "is_correct": false}]}, {"question": "Q19. What is a RESTful web service?\n", "alternatives": [{"alternative": " Reactive Enterprise Status Transfer is a web service comprising a set of guidelines and technical constraints for web services that monitor and alert of a set of mission-critical resources.\n", "is_correct": false}, {"alternative": " Representational State Transfer an architectural style for creating web services that includes client-server architecture, statelessness, cacheability, a layered system, and a uniform interface.\n", "is_correct": true}, {"alternative": " Redundant Enumerated State Transfer is a web service that provides redundancy in the case of failure and outlines technical constraints for web services that have access to resources.\n", "is_correct": false}, {"alternative": " Reactive Enterprise State Transfer is a web service comprising a set of guidelines and technical constraints for web services y that have access to resources and are async in nature.\n</ul>\n", "is_correct": false}]}, {"question": "Q20. What happens when a class is annotated with the @Controller annotation?\n", "alternatives": [{"alternative": " A controller bean definition is defined in the servlet's WebApplicationContext. The class is marked as a web component, and you can map requests to controller methods.\n", "is_correct": true}, {"alternative": " A controller bean definition is defined in the Web Context, and Web Servlet is marked as a component that reads mapped controller requests from an XML config file.\n", "is_correct": false}, {"alternative": " A controller bean definition is defined in the Tomcat Context, and the Controller Servlet is marked as a web component that reads mapped controller requests from a YAML config file.\n", "is_correct": false}, {"alternative": " A controller bean definition is defined in the Servlet Context, and the Controller Servlet is marked as a component that reads mapped controller requests from an XML config file.\n</ul>\n", "is_correct": false}]}, {"question": "Q21. Which property can be used to change the port of a Spring application?\n", "alternatives": [{"alternative": " Port\n", "is_correct": false}, {"alternative": " spring.port\n", "is_correct": false}, {"alternative": " spring.settings.port\n", "is_correct": false}, {"alternative": " server.port\n</ul>\n", "is_correct": true}]}, {"question": "Q22. What is the purpose of the @ResponseBody annotation?\n", "alternatives": [{"alternative": " to validate the char array contained in a response to ensure that it is a valid character encoding\n", "is_correct": false}, {"alternative": " to generate a local byte stream from the body of a response that allows a request to be scanned for security risks\n", "is_correct": false}, {"alternative": " to indicate whether a handler method return value should be bound to the web response body in servlet environments\n", "is_correct": true}, {"alternative": " to ensure a ThreadLocal byte stream that allows a response to be encoded for reading directly into a socket stream\n</ul>\n", "is_correct": false}]}, {"question": "Q23. How are mocking frameworks such as Mockito used with Spring?\n", "alternatives": [{"alternative": " Mockito will spin up a mock web service hosted in a Docker container that can respond to HTTP requests to mock out third-party APIs.\n", "is_correct": false}, {"alternative": " Mockito can use annotations or factory methods to create mock objects that may be injected into tests in place of dependencies. The behavior of mocks can be explicitly configured.\n", "is_correct": true}, {"alternative": " Mockito will create mock users to repeatedly perform requests against your Spring application to test your app's ability to take load.\n", "is_correct": false}, {"alternative": " Mockito will spin up a mock web service hosted in a Docker container that can respond to RPC calls to mock out remote resources.\n</ul>\n", "is_correct": false}]}, {"question": "Q24. What is the name of the central servlet that dispatches requests to controllers?\n", "alternatives": [{"alternative": " DispatchingDelegatorServlet\n", "is_correct": false}, {"alternative": " DispatcherServlet\n", "is_correct": true}, {"alternative": " Router\n", "is_correct": false}, {"alternative": " FrontControllerServlet\n</ul>\n", "is_correct": false}]}, {"question": "Q25. What is the purpose of the Spring IoC (Inversion of Control) container?\n", "alternatives": [{"alternative": " It instantiates and configures objects, supplied at runtime, to classes that define them as a dependency.\n", "is_correct": true}, {"alternative": " It allows the front-end code to manage the ResponseBody objects provided by a back-end REST API.\n", "is_correct": false}, {"alternative": " It allows a database to define business objects via a shared schema at compile time.\n", "is_correct": false}, {"alternative": " It facilitates a remote server to configure a local application.\n</ul>\n", "is_correct": false}]}, {"question": "Q26. What is component scanning?\n", "alternatives": [{"alternative": " feature that scans packages for classes with specific annotations and, when found, creates their bean definitions within the IoC container\n", "is_correct": true}, {"alternative": " paradigm where bytecode is actively scanned to identify additional optimizations to inject into components in the application context\n", "is_correct": false}, {"alternative": " a method by which cloud repositories are scanned to identify components for injection into an IoC container\n", "is_correct": false}, {"alternative": " a method by which binary data in a database is searched to identify components for injection into the IoC container\n</ul>\n", "is_correct": false}]}, {"question": "Q27. What does @SpringBootApplication do?\n", "alternatives": [{"alternative": " This annotation takes the String literal passed into the annotation as a parameter and automatically generates all the code for your application as per the passed in template parameter.\n", "is_correct": false}, {"alternative": " This compound annotation applies the @Bootable, @Springify, and @StandardConfig annotations that launch a CLI tool after launching the Spring Boot WAR file that will guide you through a series of prompts to set up your app.\n", "is_correct": true}, {"alternative": " This annotation scans the provided spring-boot-config-construction.yaml file in your root directory and automatically generates all the code for your application as defined in the YAML file.\n</ul>\n", "is_correct": false}]}, {"question": "Q28. How does Spring Data facilitate queries against a datastore?\n", "alternatives": [{"alternative": " Queries are explicitly coded in repository implementations using the Spring Data CriteriaBuilder.\n", "is_correct": false}, {"alternative": " Query metadata is stored in the underlying datastore and retrieved at runtime per repository.\n", "is_correct": false}, {"alternative": " Queries are derived from the signatures of methods on a Spring Data repository that contain keywords in their name for constructing the query logic.\n", "is_correct": true}, {"alternative": " A spring-data-queries.xml file contains queries within entity tags that specify the query logic for each repository.\n</ul>\n", "is_correct": false}]}, {"question": "Q29. How does Spring generate bean names for classes annotated with @Component that do not specify a name?\n", "alternatives": [{"alternative": " It uses the short name of the class with the first letter in lowercase.\n", "is_correct": true}, {"alternative": " It uses the short name of the class.\n", "is_correct": false}, {"alternative": " It uses the short name of the class in uppercase.\n", "is_correct": false}, {"alternative": " It uses the canonical name of the class in lowercase.\n</ul>\n", "is_correct": false}]}, {"question": "Q30. What is the delegating filter proxy?\n", "alternatives": [{"alternative": " It's the servlet filter chain proxy that handles all requests to the route defined in spring.security.xml. All calls to the filter proxy are forwarded to the ErrorDispatcherServlet.\n", "is_correct": false}, {"alternative": " It's the servlet filter chain that handles requests to the route defined in spring.security.factories. All calls to the filter proxy y are forwarded to the ErrorServlet.\n", "is_correct": false}, {"alternative": " It's the servlet filter proxy delegating to a filter bean specified in web.xml. All calls to the filter proxy will be delegated to that servlet filter bean.\n", "is_correct": true}, {"alternative": " It's the web servlet daemon filter proxy that delegates to a bean specified in spring.security.factories. All calls to the filter proxy that do not contain a proper route will return an error.\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-delegating-filter-proxy\">Overview and Need for DelegatingFilterProxy in Spring</a></p>\n", "is_correct": false}]}, {"question": "Q31. What value does Spring Boot Actuator provide?\n", "alternatives": [{"alternative": " It helps monitor and manage a Spring Boot application by providing endpoints such as health checks, auditing, metrics gathering, and HTTP tracing.\n", "is_correct": true}, {"alternative": " It provides out-of-the-box functionality that integrates with third-party metrics platforms to automatically scale up and down the number of threads in threadpools.\n", "is_correct": false}, {"alternative": " It's a CLI that allows you to modify the configuration of a running Spring Boot application without the need for restarting or downtime.\n", "is_correct": false}, {"alternative": " It provides out-of-the-box functionality that integrates wiltr?third-party metrics platforms to automatically scale up and down the number of instances of the Spring Boot application.\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-boot-actuators\">Spring Boot Actuator</a></p>\n", "is_correct": false}]}, {"question": "Q32. What is the purpose of the @ContextConfiguration annotation in a JUnit Test?\n", "alternatives": [{"alternative": " It introspects the local machine and automatically provisions resources based on certain contextual configuration files.\n", "is_correct": false}, {"alternative": " It automatically generates comments for annotated classes on autowired dependencies to provide additional context about dependencies.\n", "is_correct": false}, {"alternative": " It defines metadata at the class-level to determine how to load or configure an ApplicationContext in Spring integration tests.\n", "is_correct": true}, {"alternative": " It automatically generates JavaDocs for annotated classes to provide additional context about the purpose of the class.\n</ul>\n<p><a href=\"https://www.concretepage.com/spring-5/contextconfiguration-example-spring-test\">@ContextConfiguration Example in Spring Test</a></p>\n", "is_correct": false}]}, {"question": "Q33. How are authentication and authorization different?\n", "alternatives": [{"alternative": " Authentication is the act of granting access to specific resources and functions based on config settings. Authorization is the act of introspecting a user's credentials to ensure they are not impersonating another user.\n", "is_correct": false}, {"alternative": " Authentication is the act of verifying certain resources and functions are actually valid. Authorization is the act of verifying a user's credentials have not expired.\n", "is_correct": false}, {"alternative": " Authentication is the act of verifying that certain resources and functions actually exist in the database. Authorization is the act of verifying a user's credentials to ensure they are valid.\n", "is_correct": false}, {"alternative": " Authentication is validating that users are who they claim to be. Authorization is granting access to specific resources and functions.\n</ul>\n", "is_correct": true}]}, {"question": "Q34. What is the purpose of the @RequestBody annotation?\n", "alternatives": [{"alternative": " to create a ThreadLocal byte stream that allows a request to be encoded for reading directly into a database\n", "is_correct": false}, {"alternative": " to automatically generate a ThreadLocal byte stream from the body of a request that allows a request to scanned for security risks\n", "is_correct": false}, {"alternative": " to indicate whether an annotated handler method parameter should be bound to the web request body, which is converted by an HttpMessageConverter\n", "is_correct": true}, {"alternative": " to automatically validate the characters contained in a request to ensure that they are a valid character encoding\n</ul>\n", "is_correct": false}]}, {"question": "Q35. What is the DispatcherServlet and what is its function?\n", "alternatives": [{"alternative": " The DispatcherServlet process daemon assigns a separate Web Servlet Container process to each HTTP request that comes into the web server.\n", "is_correct": false}, {"alternative": " It is a servlet that dispatches HTTP requests to registered handlers/controllers for processing.\n", "is_correct": true}, {"alternative": " The DispatcherServlet API assigns a separate Web Servlet Node process to each additional HTTP request that comes into the web server.\n", "is_correct": false}, {"alternative": " It is a servlet that dispatches an array of background daemon processes that allocate memory and CPU cycles to each request.\n</ul>\n", "is_correct": false}]}, {"question": "Q36. What is Spring Boot autoconfiguration?\n", "alternatives": [{"alternative": " It triggers a local automated review of configuration files such as web.xml and detects possible security issues or automatically resolves circular dependencies.\n", "is_correct": false}, {"alternative": " It triggers an automated review of configuration by a web-based agent that reviews your existing web.xml file and detects possible security issues.\n", "is_correct": false}, {"alternative": " It's an opinionated, intelligent method of introspecting an app to configure beans that are likely to be needed. This configuration can be overridden over time with manual configuration.\n", "is_correct": true}, {"alternative": " It provides plug-in functionality while editing your web.xml and other config files that will autocomplete common dependencies while typing.\n</ul>\n", "is_correct": false}]}, {"question": "Q37. Which are valid steps to take to enable JPA in Spring Boot?\n", "alternatives": [{"alternative": " Add an @EnableJpaRepositories annotation to your configuration class and create a Spring Data Repository.\n", "is_correct": true}, {"alternative": " Add an @EnableJpaEntities annotation to your configuration class, create a Spring Data YAML configuration file, and manually update the Spring XML config files to define your repository locations.\n", "is_correct": false}, {"alternative": " Add an @EnableDbFunctionality annotation to your configuration class, create a Spring Data XML configuration file, and manually update the Spring factories file to define your repositories.\n", "is_correct": false}, {"alternative": " Add an @InitJpaEntities annotation to your configuration class, create a Spring Data properties configuration file, and manually update the Spring startup parameters to define your repository locations.\n</ul>\n", "is_correct": false}]}, {"question": "Q38. What is a transaction in the context of Spring Data?\n", "alternatives": [{"alternative": " a version-controlled schema change that is applied to a database\n", "is_correct": false}, {"alternative": " a sequence of actions representing a single unit of work managed as a single operation that can be either committed or rolled back\n", "is_correct": true}, {"alternative": " an encoded message and response between various shards of a database\n", "is_correct": false}, {"alternative": " an exchange or interaction between various worker nodes in a multithreaded environment\n</ul>\n", "is_correct": false}]}, {"question": "Q39. Modularization of a concern that cuts across multiple classes is known as a(n)<code>____</code>.\n", "alternatives": [{"alternative": " multiclass\n", "is_correct": false}, {"alternative": " aspect\n", "is_correct": true}, {"alternative": " crosscut\n", "is_correct": false}, {"alternative": " sidecut\n</ul>\n", "is_correct": false}]}, {"question": "Q40. How do you inject a dependency into a Spring bean?\n", "alternatives": [{"alternative": " any of these answers\n", "is_correct": true}, {"alternative": " Annotate a Setter method with the @Autowired annotation.\n", "is_correct": false}, {"alternative": " Specify parameters in the constructor with an optional @Autowired annotation.\n", "is_correct": false}, {"alternative": " Use field injection.\n</ul>\n", "is_correct": false}]}, {"question": "Q41. Consider the properties file application.properties. How would you load the property my.property?\n<p><code>java\nmy.property=Test</code></p>\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\n@Prop(\"${my.property}\")\nprivate String val;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\n@GetVal(\"my.property\")\nprivate String val;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\n@GetProperty(\"${my.property}\")\nprivate String val;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " D\n</ul>\n<p><code>java\n@Value(\"${my.property}\")\nprivate String val;</code></p>\n", "is_correct": true}]}, {"question": "Q42. What is a bean in the context of Spring?\n", "alternatives": [{"alternative": " a managed dependency defined by configuration metadata that can be injected into downstream classes\n", "is_correct": true}, {"alternative": " a binary-encoded, agnostic, named entity that is translatable between different data formats\n", "is_correct": false}, {"alternative": " a payload that is transferable between different services in a Service-Oriented Architecture (SOA)\n", "is_correct": false}, {"alternative": " a discrete piece of data that is encoded in a binary format for persisting to a file system\n</ul>\n", "is_correct": false}]}, {"question": "Q43. Which property is given precedence by Spring?\n", "alternatives": [{"alternative": " application properties located in an application.properties file outside the application.jar\n", "is_correct": false}, {"alternative": " @PropertySource annotations on configuration classes\n", "is_correct": false}, {"alternative": " profile-specific application-{profile}.properties files\n", "is_correct": true}, {"alternative": " application properties located in an application.properties file inside the application.jar\n</ul>\n", "is_correct": false}]}, {"question": "Q44. In the Spring Bean lifecycle pictured, what should the third step of the process be?\n<p><img alt=\"Alt text\" src=\"https://usaupload.com/cache/plugins/filepreviewer/69009/c5e6eedce33819dd3b16bff7590d244b0fedf52561323c444b4b63e19e61e2e8/1100x800_cropped.jpg\" title=\"Spring bean lifecycle\" /></p>\n", "alternatives": [{"alternative": " Persist bean definitions into a database\n", "is_correct": false}, {"alternative": " Instance bean objects\n", "is_correct": true}, {"alternative": " De-normalize bean definition\n", "is_correct": false}, {"alternative": " Use reflection to inject bean objects into the servlet container\n</ul>\n", "is_correct": false}]}, {"question": "Q45. What Spring Boot property is used to set the logging level for the entire application in the application.properties file?\n", "alternatives": [{"alternative": " logging.settings\n", "is_correct": false}, {"alternative": " log.level\n", "is_correct": false}, {"alternative": " root.logger.level\n", "is_correct": false}, {"alternative": " logging.level.root\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-boot-logging\">Logging in Spring Boot</a></p>\n", "is_correct": true}]}, {"question": "Q46. What is a Spring bean uniquely identified?\n", "alternatives": [{"alternative": " an autogenerated UUID\n", "is_correct": false}, {"alternative": " a unique String name\n", "is_correct": true}, {"alternative": " an auto-incremented Integer ID\n", "is_correct": false}, {"alternative": " an ID derived from its location in memory\n</ul>\n", "is_correct": false}]}, {"question": "Q47. What is the difference between a JAR and a WAR distribution in Spring Boot?\n", "alternatives": [{"alternative": " Spring Boot can create a self-executable WAR file that runs without needing a servlet container. A JAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\n", "is_correct": false}, {"alternative": " Spring Boot can create a JAR file that contains bytecode that interacts directly with the OS without needing a servlet container. A WAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\n", "is_correct": false}, {"alternative": " The Spring Boot JAR file will be deployed to a Servlet container such as Tomcat on an existing running web server locally. The WAR file will be deployed to a cloud-based servlet container.\n", "is_correct": false}, {"alternative": " Spring Boot can create a self-executable JAR file that contains all the dependencies and an embedded Servlet container. A WAR file has to be deployed to an existing web container such as Tomcat.\n</ul>\n", "is_correct": true}]}, {"question": "Q48. How does the transaction propagation setting impact the behavior of transactions?\n", "alternatives": [{"alternative": " It ensures that transactions that are commited to the database are propagated to all the shards of a clustered database system.\n", "is_correct": false}, {"alternative": " None of these answers is correct.\n", "is_correct": false}, {"alternative": " It guarantees that transactions that are submitted to the database cluster are propagated to all the nodes of a clustered database cloud.\n", "is_correct": false}, {"alternative": " It enforces that a logical transaction scope is created for each method that determines rollback-only status, with an outer transaction scope being logically independent from the inner transaction scope.\n</ul>\n", "is_correct": true}]}, {"question": "Q49. What is printed when this code is run as a @SpringBootApplication?\n<p>```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;</p>\n<pre><code> private TestService service;\n public void setService(TestService service) {\n      this.service = service;\n }\n\n @Override\n public void afterPropertiesSet() throws Exception {\n      System.out.print(context.containsBean(\"testService\") + \" \");\n      System.out.println(service.getClass());\n }\n</code></pre>\n<p>}\n@Service\nclass TestService {}\n```</p>\n", "alternatives": [{"alternative": " a null pointer stacktrace\n", "is_correct": true}, {"alternative": " true null\n", "is_correct": false}, {"alternative": " true package.TestService\n", "is_correct": false}, {"alternative": " false package.TestService\n</ul>\n<p>Explanation: missing <code>@Autowired</code> on <code>private TestService service</code> or on the setter</p>\n", "is_correct": false}]}, {"question": "Q50. To register a custom filter that applies only to certain URL patterns, you should remove the <strong>_</strong> annotation from the filter class and register a @Bean of type <code>_</code> in Spring @Configuration.\n", "alternatives": [{"alternative": " @RequestMapping; WebRequest\n", "is_correct": false}, {"alternative": " @Controller; URLFilter\n", "is_correct": false}, {"alternative": " @WebFilter; ServletContextInitializer\n", "is_correct": false}, {"alternative": " @Component; FilterRegistrationBean\n</ul>\n", "is_correct": true}]}, {"question": "Q51. What is the correct term for each definition bellow?\n<ol>\n<li>A predicate that matches join points.</li>\n<li>A point during the execution of a program, such as the execution of a method or the handling of an exception.</li>\n<li>\n<p>An action taken by an aspect at a particular join point.</p>\n</li>\n<li>\n<p>[ ]\n  ```</p>\n</li>\n<li>Pointcut</li>\n<li>Advice</li>\n<li>Join point\n  ```</li>\n<li>[ ]\n  ```</li>\n<li>Join point</li>\n<li>Pointcut</li>\n<li>Advice\n  ```</li>\n<li>[ ]\n  ```</li>\n<li>Advice</li>\n<li>Pointcut</li>\n<li>Join point\n  ```</li>\n<li>[x]\n  ```</li>\n<li>Pointcut</li>\n<li>Join point</li>\n<li>Advice\n  ```</li>\n</ol>\n", "alternatives": [{"alternative": "A predicate that matches join points.\n", "is_correct": false}, {"alternative": "A point during the execution of a program, such as the execution of a method or the handling of an exception.\n", "is_correct": false}, {"alternative": "\n<p>An action taken by an aspect at a particular join point.</p>\n\n", "is_correct": false}, {"alternative": "\n<p>\n  ```</p>\n\n", "is_correct": false}, {"alternative": "Pointcut\n", "is_correct": false}, {"alternative": "Advice\n", "is_correct": false}, {"alternative": "Join point\n  ```\n", "is_correct": false}, {"alternative": "\n  ```\n", "is_correct": false}, {"alternative": "Join point\n", "is_correct": false}, {"alternative": "Pointcut\n", "is_correct": false}, {"alternative": "Advice\n  ```\n", "is_correct": false}, {"alternative": "\n  ```\n", "is_correct": false}, {"alternative": "Advice\n", "is_correct": false}, {"alternative": "Pointcut\n", "is_correct": false}, {"alternative": "Join point\n  ```\n", "is_correct": false}, {"alternative": "\n  ```\n", "is_correct": true}, {"alternative": "Pointcut\n", "is_correct": false}, {"alternative": "Join point\n", "is_correct": false}, {"alternative": "Advice\n  ```\n</ol>\n", "is_correct": false}]}, {"question": "Q52. How should passwords be stored?\n", "alternatives": [{"alternative": " Passwords should be hashed using an adaptive one-way function such as bcrypt.\n", "is_correct": true}, {"alternative": " Passwords can be stored in a BASE64 encoded format if they are stored in a private database.\n", "is_correct": false}, {"alternative": " Passwords should be salted and hashed using the MD5 algorithm.\n", "is_correct": false}, {"alternative": " Passwords should be hashed using the SHA-1 algorithm, then salted to provide defence against rainbow table attacks.\n</ul>\n<p>Explanation: sha-1 is not considered secure anymore: https://en.wikipedia.org/wiki/SHA-1#Attacks . With bcrypt you can select more complex hashes https://en.wikipedia.org/wiki/Bcrypt</p>\n", "is_correct": false}]}, {"question": "Q53. What methods does this Pointcut expression reference?\n<p><code>@target(com.linkedin.annotation.Loggable)</code></p>\n", "alternatives": [{"alternative": " any join point where the target object has a @Loggable annotation\n", "is_correct": true}, {"alternative": " any join point where the executing method has a @Loggable annotation\n", "is_correct": false}, {"alternative": " any method that implements Loggable\n", "is_correct": false}, {"alternative": " any method that extends Loggable\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/51124771/difference-between-target-and-within-spring-aop\">Difference between @target and @within (Spring AOP)</a></p>\n", "is_correct": false}]}, {"question": "Q54. What is printed when this code is run as a @SpringBootApplication?\n<p>```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;</p>\n<pre><code> @Autowired\n SimpleDateFormat formatter;\n\n @Override\n public void afterPropertiesSet() throws Exception {\n      System.out.println(context.containsBean(\"formatter\"));\n      System.out.println(formatter.getClass());\n }\n</code></pre>\n<p>}\n@Configuration\nclass TestConfig2 {\n    @Bean\n    public final SimpleDateFormat formatter() {\n        return new SimpleDateFormat();\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " true <br />\n      &emsp; class java.text.SimpleDateFormat <br />\n", "is_correct": false}, {"alternative": " true <br />\n      &emsp; SimpleDateFormat <br />\n", "is_correct": false}, {"alternative": " a NullPointerException stacktrace\n", "is_correct": false}, {"alternative": " a BeanDefinitionParsingException stacktrace\n</ul>\n<p>Explanation: <code>@Bean</code>-method in <code>@Configuration</code> must be overridable. Remove the <code>final</code> keyword to fix.</p>\n", "is_correct": true}]}, {"question": "Q55. What is the purpose of a web application context?\n", "alternatives": [{"alternative": " Configures a web application that is able to be deleted and re-created during runtime through hot swap. It adds a <strong>recreateContext()</strong> method and defines a root WebDaemon that must be bound to in the bootstrap process.\n", "is_correct": false}, {"alternative": " It configures a Spring application that is able to be modified on the fly during runtime through bytecode re-encoding. Also it adds an <strong>updateContext()</strong> method and defines a root WebServlet that must be bound to in the bootstrap process.\n", "is_correct": false}, {"alternative": " It provides configuration for a web application that is read-only while running. Also, it adds a <strong>getServletContext()</strong> method and defines an attribute name to which the root context must be bound in the bootstrap process.\n", "is_correct": true}, {"alternative": " It provides configuration for a Spring application that is updatable on the fly during runtime through bytecode weaving. Also it adds an <strong>updateServletContext()</strong> method and defines a root servlet that must be bound to in the bootstrap process.\n</ul>\n", "is_correct": false}]}, {"question": "Q56. What is Spring AOP?\n", "alternatives": [{"alternative": " Aspect-Oriented Programming allows you to define different cross-cutting aspects that isolate beans to be available only in certain environments and profiles.\n", "is_correct": false}, {"alternative": " Aspect-Oriented Programming enables you to perform profiling, which lets you develop different cross-cutting JVM performance-tuning profiles for different aspects of your applications.\n", "is_correct": false}, {"alternative": " Aspect-Oriented Programming enables the modularization of cross-cutting concerns so that repeated boilerplate logic, such as logging code, does not pollute business logic.\n", "is_correct": true}, {"alternative": " Aspect-Oriented Programming enables you to persist cross-cutting data across modularized shards of your database.\n</ul>\n", "is_correct": false}]}, {"question": "Q57. Assuming username and password authentication is in place, what method on the Authentication object can be used to obtain the username?\n", "alternatives": [{"alternative": " getPrincipal\n", "is_correct": true}, {"alternative": " getUsername\n", "is_correct": false}, {"alternative": " getUser\n", "is_correct": false}, {"alternative": " getDn\n</ul>\n", "is_correct": false}]}, {"question": "Q58. Assuming no additional configuration is provided, what is the first selection criteria Spring uses to choose a bean when autowiring a property?\n", "alternatives": [{"alternative": " none of these answers\n", "is_correct": false}, {"alternative": " bean type\n", "is_correct": false}, {"alternative": " bean size\n", "is_correct": false}, {"alternative": " bean name\n</ul>\n", "is_correct": true}]}, {"question": "Q59. What is the result of calling the map controller method using the following HTTP request?\n<p><code>POST localhost:8080/map\n{\"b\" : \"b\", \"d\" : \"d\"}</code></p>\n<p><code>java\n@RestController\npublic class SampleController {\n    @RequestMapping(\"/map\")\n    public String map(@RequestBody SampleObject sampleObject) {\n        return sampleObject.getB() + sampleObject.getC();\n    }\n}</code></p>\n<p>```java\npublic class SampleObject {</p>\n<pre><code>String b;\nString c;\n\npublic String getB() { return b; }\n\npublic void setB() { this.b = b; }\n\npublic String getC() { return c; }\n\npublic void setC() { this.c = c; }\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " An InvalidRequestBodyException is thrown at runtime.\n", "is_correct": false}, {"alternative": " A MissingPropertyException is thrown at runtime.\n", "is_correct": false}, {"alternative": " The text \"bnull\" is returned in the response body.\n", "is_correct": true}, {"alternative": " The text \"a\" is returned in th response body.\n</ul>\n", "is_correct": false}]}, {"question": "Q60. What effect does private static have on the object service below?\n<p>```java\n@SpringBootApplication\npublic class Question14 {\n    @Autowired\n    private static Service service;</p>\n<pre><code>public static void main(String[] args) {\n    SpringApplication.run(Question14.class, args);\n}\n</code></pre>\n<p>}</p>\n<p>@Component\nclass Service {}\n```</p>\n", "alternatives": [{"alternative": " The application will result in a compile error because you can't autowire a private variable.\n", "is_correct": false}, {"alternative": " The application will compile and run, and service will have its dependency correctly injected by Spring.\n", "is_correct": false}, {"alternative": " The application will compile and run, but service will not be autowired because you cannot autowire a static class member.\n", "is_correct": true}, {"alternative": " The application will result in a compile error because you attempted to autowire a static variable.\n</ul>\n", "is_correct": false}]}, {"question": "Q61. What is a security context?\n", "alternatives": [{"alternative": " The security context includes details of the principal currently using the app, which is stored by default in a <code>ThreadLocal</code> in an <code>Authentication</code> object.\n", "is_correct": true}, {"alternative": " The security context holds a list of all users and their encrypted passwords in memory and a list of resources that users are able to access.\n", "is_correct": false}, {"alternative": " The security context includes information about safe network IDs and IP addresses that are able to access the system.\n", "is_correct": false}, {"alternative": " The security context includes information about permissions on the local file system describing how local file resources can be accessed.\n</ul>\n", "is_correct": false}]}, {"question": "Q62. How might you map an incoming request to a controller method?\n", "alternatives": [{"alternative": " Annotate a Controller class with <code>@Controller</code>. Then, using a specific naming convention for the methods, the <code>RequestMappingHandlerAdapter</code> will automatically configure your endpoints with the proper HTTP verb and URI.\n", "is_correct": false}, {"alternative": " Register a controller as a bean. Then, using a specific naming convention for the methods, the <code>RequestMappingHandlerAdapter</code> will automatically configure your endpoints based on values from the YAML config file.\n", "is_correct": false}, {"alternative": " Annotate a controller method with <code>@RequestMapping</code>, or a HTTP verb-specific annotation with a String URI pattern parameter (and other params as needed), which is supported through a <code>RequestMappingHandlerMapping/Adapter</code>.\n", "is_correct": true}, {"alternative": " Register a controller as a bean. Then, using a specific naming convention for the methods, the RequestMappingHandlerAdapter will automatically configure your endpoints based on values passed into the bean definition.\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-requestmapping\">Spring RequestMapping</a>. Spring does not use naming conventions for web requests (unlike e.g. for the Data Repositories)</p>\n", "is_correct": false}]}, {"question": "Q63. What methods does the Pointcut expression below reference?\n<p><code>execution(* setter*(..))</code></p>\n", "alternatives": [{"alternative": " any method with a name that contains the String \"setter\" with a single parameter\n", "is_correct": false}, {"alternative": " any method with a name that begins with String \"setter\" with a single parameter\n", "is_correct": false}, {"alternative": " any method with a name that begins with String \"setter\"\n", "is_correct": true}, {"alternative": " any method with a name that contains the String \"setter\"\n</ul>\n<p><a href=\"https://www.baeldung.com/spring-aop-pointcut-tutorial#1-execution\">baeldung</a></p>\n", "is_correct": false}]}, {"question": "Q64. What pattern does Spring MVC implement to delegate request processing to controllers?\n", "alternatives": [{"alternative": " Front Controller\n", "is_correct": true}, {"alternative": " Facade\n", "is_correct": false}, {"alternative": " Reactive Chain\n", "is_correct": false}, {"alternative": " Observer\n</ul>\n", "is_correct": false}]}, {"question": "Q65. What methods does this Pointcut expression?\n<p><code>within(com.linkedin.service..*)</code></p>\n", "alternatives": [{"alternative": " any join point only within the service package\n", "is_correct": false}, {"alternative": " This is not valid Pointcut expression\n", "is_correct": false}, {"alternative": " any method in a class that autowires a service bean\n", "is_correct": false}, {"alternative": " any join point within the service package or one of its subpackages\n</ul>\n", "is_correct": true}]}, {"question": "Q66. What is the output from invoking this Actuator endpoint in an unmodified Spring Boot application generated using Spring Intializr?\n<p><code>/shutdown</code></p>\n", "alternatives": [{"alternative": " The request would fail because the endpoint is disabled by default.\n", "is_correct": true}, {"alternative": " The Spring Boot app would return a URL and a list of currently running processes, and ask you to confirm the shutdown command.\n", "is_correct": false}, {"alternative": " The Spring Boot app would return a URL to confirm the shutdown command.\n", "is_correct": false}, {"alternative": " The Spring Boot app would begin shutting down.\n</ul>\n<p>Reason: By default, all the endpoints are enabled in Spring Boot Application except /shutdown; this is, naturally, part of the Actuator endpoints.</p>\n", "is_correct": false}]}, {"question": "Q67. How can you access the application context in a Spring integration test?\n", "alternatives": [{"alternative": " The context is present in a ThreadLocal so you can just call getSpringApplicationContextInstance() anywhere in a test to get the current context.\n", "is_correct": false}, {"alternative": " Test classes can implement the ApplicationContextAware interface or autowire the ApplicationContext.\n", "is_correct": true}, {"alternative": " The context is automatically injected in every test so you can just call getSpringApplicationContextInstance() anywhere in a test to get the current context.\n", "is_correct": false}, {"alternative": " You can just add the parameter Context context to any method so that the context is automatically wired in.\n</ul>\n<p><a href=\"https://spring.io/blog/2011/06/21/spring-3-1-m2-testing-with-configuration-classes-and-profiles#:~:text=By%20default%20the%20ApplicationContext%20is,%40Resource%20%2C%20or%20%40Inject%20.\">spring(dot)io</a></p>\n", "is_correct": false}]}, {"question": "Q68. What interface can be specified as a parameter in a controller method signature to handle file uploads?\n", "alternatives": [{"alternative": " FilePath\n", "is_correct": false}, {"alternative": " MultipartFile\n", "is_correct": true}, {"alternative": " File\n", "is_correct": false}, {"alternative": " MvcFile\n</ul>\n", "is_correct": false}]}, {"question": "Q69. What is the purpose of this endpoint?\n<p><code>java\n@GetMapping(\"api/v1/domain/resource/{id}\")\npublic Pojo getPojo(@PathVariable(\"id\") String id) {\n  return testService.getPojo(id);\n}</code></p>\n", "alternatives": [{"alternative": " This endpoint is designed to delete an object of the typetype Pojo with the passed in path variable\n", "is_correct": false}, {"alternative": " This endpoint is designed to return JSON mapped to the object type Pojo with the passed in id.\n", "is_correct": true}, {"alternative": " This endpoint returns the path variable that describes the Pojo's location within the container.\n", "is_correct": false}, {"alternative": " This endpoint is designed to update an existing resource of the object type Pojo with the passed in id.\n</ul>\n", "is_correct": false}]}, {"question": "Q70. What property can be used to set the active Spring profiles\n", "alternatives": [{"alternative": " active.profile\n", "is_correct": false}, {"alternative": " active.spring.profiles\n", "is_correct": false}, {"alternative": " spring.profiles.active\n", "is_correct": true}, {"alternative": " profiles\n</ul>\n", "is_correct": false}]}, {"question": "Q71. Which statement is true regarding loading and instantiation of Spring factories?\n", "alternatives": [{"alternative": " During startup, the SpringFactoryInitializr collects all files in the CONFIG-INF directory from each dependency and downloads binaries to run each file.\n", "is_correct": false}, {"alternative": " During startup, the SpringFactoriesLoader gets a list of config and collects all the files in META-INF directory from dependencies. Then it builds a composite list for application context configurations.\n", "is_correct": true}, {"alternative": " During shutdown, the SpringFactoryDestructor collects all the files in META-INF directory from each dependency and begins shutting down each thread and process.\n", "is_correct": false}, {"alternative": " During startup and shutdown, the SpringFactoryInitializr downloads project configs for all configured dependencies.\n</ul>\n", "is_correct": false}]}, {"question": "Q72. What methods does this Pointcut expression reference?\n<p><code>java\n     execution(* com.linkedin.TestService.*(..))</code></p>\n", "alternatives": [{"alternative": " all methods of classes in the com.linkedin.TestService package\n", "is_correct": true}, {"alternative": " all methods of classes in the com.linkedin.TestService package annotated whith @Service\n", "is_correct": false}, {"alternative": " This Pointcut is not valid.\n", "is_correct": false}, {"alternative": " all methods defined by the TestService interface\n</ul>\n", "is_correct": false}]}, {"question": "Q73. When configuring an application, which configuration is given precedence by Spring?\n", "alternatives": [{"alternative": " profile specific application-{profile}.properties files\n", "is_correct": false}, {"alternative": " Java System Properties\n", "is_correct": false}, {"alternative": " application properties located in an application.properties file inside the application.jar\n", "is_correct": false}, {"alternative": " profile specific application-{profile}.properties files located outside the application.jar\n</ul>\n", "is_correct": true}]}, {"question": "Q74. What interface is used to represent a permission in Spring Security?\n", "alternatives": [{"alternative": " GrantedAuthority\n", "is_correct": false}, {"alternative": " SecurityChain\n", "is_correct": false}, {"alternative": " PermissionMatrix\n", "is_correct": false}, {"alternative": " AccessRule\n</ul>\n", "is_correct": true}]}, {"question": "Q75. What is the difference between constructor injection and setter injection?\n", "alternatives": [{"alternative": " Constructor injection overrides setter injection.\n", "is_correct": false}, {"alternative": " Setter injection creates a new instance if any modification occurs.\n", "is_correct": false}, {"alternative": " You can't use constructor injection for partial injection.\n", "is_correct": true}, {"alternative": " Constructor injection is more flexible than setter injection.\n</ul>\n<p>[Explanation] There are many key differences between constructor injection and setter injection.</p>\n<p>Partial dependency: can be injected using setter injection but it is not possible by constructor. Suppose there are 3 properties in a class, having 3 arg constructor and setters methods. In such case, if you want to pass information for only one property, it is possible by setter method only.\nOverriding: Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container will use the setter injection.\nChanges: We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor. So setter injection is flexible than constructor injection.</p>\n", "is_correct": false}]}, {"question": "Q76. Which println would you remove to stop this code from throwing a null pointer exception?\n<p>```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     @Autowired\n     static SimpleDateFormat formatter;</p>\n<pre><code> @Override\n public void afterPropertiesSet() throws Exception {\n      System.out.println(context.containsBean(\"formatter\") + \" \");\n      System.out.println(context.getBean(\"formatter\").getClass());\n      System.out.println(formatter.getClass());\n      System.out.println(context.getClass());\n }\n</code></pre>\n<p>}\n@Configuration\nclass TestConfig {\n     @Bean\n     public SimpleDateFormat formatter() {\n          return new SimpleDateFormat();\n     }\n}\n```</p>\n", "alternatives": [{"alternative": " formatter.getClass()\n", "is_correct": false}, {"alternative": " context.containsBean(\"formatter\")\n", "is_correct": false}, {"alternative": " context.getBean(\"formatter\").getClass()\n", "is_correct": true}, {"alternative": " context.getClass()\n</ul>\n<p>Explanation: Here only one line can throw NPE. Calling getClass() from context.getBean(\"formatter\") can potentially throw NPE if context.getBean(\"formatter\") will return null.</p>\n", "is_correct": false}]}, {"question": "Q77. What is the default rollback policy?\n", "alternatives": [{"alternative": " A rollback is triggered during any error that occurs during the transaction.\n", "is_correct": false}, {"alternative": " When an instance or subclass of Exception is thrown, this triggers a rollback, while any runtime exceptions do not.\n", "is_correct": false}, {"alternative": " Anytime an instance or subclass of Throwable is thrown, this triggers a rollback.\n", "is_correct": false}, {"alternative": " When an instance or subclass of RuntimeException is thrown, this triggers a rollback, while any checked Exception does not.\n</ul>\n", "is_correct": true}]}, {"question": "Q78. What is the difference between a CrudRepository and a JpaRepository?\n", "alternatives": [{"alternative": " The CrudRepository extends the PagingAndSortingRepository, while the JpaRepository does not.\n", "is_correct": false}, {"alternative": " The CrudRepository exposes a superset of interface methods containing every datastore-specific method supported by Spring data. The JpaRepository contains only those specific to Spring Data JPA.\n", "is_correct": true}, {"alternative": " The CrudRepository is a base interface within Spring Data core that exposes a dedicated set of functions. The JpaRepository is a store-specific interface that exposes functionality specific to JPA.\n", "is_correct": false}, {"alternative": " The CrudRepository is part of the Java EE API, while JpaRepository is specific to Spring Data.\n</ul>\n", "is_correct": false}]}, {"question": "Q79. What is the security filter chain?\n", "alternatives": [{"alternative": " It's a security filter chain that provides authentication with manual intervention such that multiple administrators of the system are able to approve users with auditability and traceability.\n", "is_correct": false}, {"alternative": " It's a series of user-completed activities\u2014such as password authorization, token verification, and many others\u2014that require multiple factors of authentication to increase the level of security in the system.\n", "is_correct": false}, {"alternative": " It's a servlet filter chain where each filter has a specific responsibility such as security context, user and password authorization, exception translation, or filter security interception, processed in order.\n", "is_correct": true}, {"alternative": " It's a security filter chain that consumes multiple factors of authentication\u2014such as password, token verification, biometrics, and IP whitelisting\u2014to successfully log a user into the system.\n</ul>\n", "is_correct": false}]}, {"question": "Q80. Which is not a valid stereotype annotation?\n", "alternatives": [{"alternative": " @Component\n", "is_correct": false}, {"alternative": " @Service\n", "is_correct": false}, {"alternative": " @HtmlController\n", "is_correct": true}, {"alternative": " @Controller\n</ul>\n", "is_correct": false}]}, {"question": "Q81. Which statement is true regarding loading and instantiation of Spring factories?\n", "alternatives": [{"alternative": " During startup, the SpringFactoriesLoader gets a list of configs and collects all the files in META-INF directory from dependencies. Then it builds a composite list for application context configurations.\n", "is_correct": true}, {"alternative": " During shutdown, the SpringFactoryDestructor collects all the files in META-INF directory from each dependency and begins shutting down each thread and process.\n", "is_correct": false}, {"alternative": " During startup, the SpringFactoryInitializr collects all files in the CONFIG-INF directory from each dependency and downloads binaries to run each file.\n", "is_correct": false}, {"alternative": " During startup and shutdown, the SpringFactoryInitializr downloads project configs for all configured dependencies.\n</ul>\n", "is_correct": false}]}, {"question": "Q82. What methods does this Pointcut expression reference?\n", "alternatives": [{"alternative": " all methods defined in the service package\n", "is_correct": true}, {"alternative": " The Pointcut is not valid.\n", "is_correct": false}, {"alternative": " all methods defined in a service interface\n", "is_correct": false}, {"alternative": " all methods defined in the service package or one of its subpackages\n</ul>\n", "is_correct": false}]}, {"question": "Q83. What is a transaction isolation level?\n", "alternatives": [{"alternative": " executing each transaction in its own dedicated threadpool to facilitate thread isolation\n", "is_correct": false}, {"alternative": " facilitating each transaction to occur on its own dedicated vCPU to guarantee throughput\n", "is_correct": false}, {"alternative": " the level of visibility and access a transaction has to the units of work of other transactions such as uncommitted writes\n", "is_correct": true}, {"alternative": " executing each transaction on its own process to provide resource isolation\n</ul>\n", "is_correct": false}]}, {"question": "Q84. What does the statement \"Spring offers fully-typed advice\" mean?\n", "alternatives": [{"alternative": " You declare the parameters you need in the advice signature rather than work with Object[] arrays.\n", "is_correct": false}, {"alternative": " You work with a collection of Objects that need to be explicitly casted.\n", "is_correct": false}, {"alternative": " You work with an array of a Generic type T[] instead of Object[] arrays.\n", "is_correct": true}, {"alternative": " You are able to undo type erasure in the Object[] that is exposed\n</ul>\n", "is_correct": false}]}, {"question": "Q84. Which are considered to be typical, common, cross-cutting concerns that would be a good fit for AOP? (Choose 3)\n<pre><code>- A. Creating SQL queries\n- B. Logging\n- C. Filtering, sorting and transforming data\n- D. Transaction management\n- E. Audit logging\n- F. Business logic\n</code></pre>\n", "alternatives": [{"alternative": " A, D, F\n", "is_correct": false}, {"alternative": " D, E, F\n", "is_correct": false}, {"alternative": " A, B, F\n", "is_correct": false}, {"alternative": " B, D, E\n</ul>", "is_correct": true}]}]}