{"title": "Java", "questions": [{"question": "Q1. Given the string \"strawberries\" saved in a variable called fruit, what would <code>fruit.substring(2, 5)</code> return?\n", "alternatives": [{"alternative": " rawb\n", "is_correct": false}, {"alternative": " raw\n", "is_correct": true}, {"alternative": " awb\n", "is_correct": false}, {"alternative": " traw\n</ul>\n<p><strong>Reasoning:</strong> The substring method is accepting two arguments.</p>\n<ul>\n", "is_correct": false}, {"alternative": "The first argument being the index to start(includes that char at 2)\n", "is_correct": false}, {"alternative": "and the second the index of the string to end the substring(excludes the char at 5).\n", "is_correct": false}, {"alternative": "Strings in Java are like arrays of chars.\n", "is_correct": false}, {"alternative": "Therefore, the method will return \"raw\" as those are the chars in indexes 2,3, and 4.\n", "is_correct": false}, {"alternative": "You can also take the ending index and subtract the beginning index from it, to determine how many chars will be included in the substring (5-2=3).\n</ul>\n", "is_correct": false}]}, {"question": "Q2. How can you achieve runtime polymorphism in Java?\n", "alternatives": [{"alternative": " method overloading\n", "is_correct": false}, {"alternative": " method overrunning\n", "is_correct": false}, {"alternative": " method overriding\n", "is_correct": true}, {"alternative": " method calling\n</ul>\n", "is_correct": false}]}, {"question": "Q3. Given the following definitions, which of these expression will <strong>NOT</strong> evaluate to true?\n<p><code>boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;</code></p>\n", "alternatives": [{"alternative": " <code>(i1 | i2) == 3</code>\n", "is_correct": false}, {"alternative": " <code>i2 &amp;&amp; b1</code>\n", "is_correct": true}, {"alternative": " <code>b1 || !b2</code>\n", "is_correct": false}, {"alternative": " <code>(i1 ^ i2) &lt; 4</code>\n</ul>\n<p><strong>Reasoning:</strong> i2 &amp;&amp; b1 is not allowed between int and boolean.</p>\n", "is_correct": false}]}, {"question": "Q4. What is the output of this code?\n<p><code>java\n1: class Main {\n2:   public static void main (String[] args) {\n3:     int array[] = {1, 2, 3, 4};\n4:     for (int i = 0; i &lt; array.size(); i++) {\n5:        System.out.print(array[i]);\n6:     }\n7:   }\n8: }</code></p>\n", "alternatives": [{"alternative": " It will not compile because of line 4.\n", "is_correct": true}, {"alternative": " It will not compile because of line 3.\n", "is_correct": false}, {"alternative": " 123\n", "is_correct": false}, {"alternative": " 1234\n</ul>\n<p><strong>Reasoning:</strong> array.size() is invalid, to get size or length of array array.length can be used.</p>\n", "is_correct": false}]}, {"question": "Q5. Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?\n<p>```java\ninterface Interface1 {\n    static void print() {\n        System.out.print(\"Hello\");\n    }\n}</p>\n<p>interface Interface2 {\n    static void print() {\n        System.out.print(\"World!\");\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " <code>super1.print(); super2.print();</code>\n", "is_correct": false}, {"alternative": " <code>this.print();</code>\n", "is_correct": false}, {"alternative": " <code>super.print();</code>\n", "is_correct": false}, {"alternative": " <code>Interface1.print(); Interface2.print();</code>\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/static-method-in-interface-in-java/\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q6. What does the following code print?\n<p><code>java\nString str = \"abcde\";\nstr.trim();\nstr.toUpperCase();\nstr.substring(3, 4);\nSystem.out.println(str);</code></p>\n", "alternatives": [{"alternative": " CD\n", "is_correct": false}, {"alternative": " CDE\n", "is_correct": false}, {"alternative": " D\n", "is_correct": false}, {"alternative": " \"abcde\"\n</ul>\n<p><strong>Reasoning:</strong> You should assign the result of trim back to the String variable. Otherwise, it is not going to work, because strings in Java are immutable.</p>\n", "is_correct": true}]}, {"question": "Q7. What is the result of this code?\n<p><code>java\nclass Main {\n    public static void main (String[] args){\n        System.out.println(print(1));\n    }\n    static Exception print(int i){\n        if (i&gt;0) {\n            return new Exception();\n        } else {\n            throw new RuntimeException();\n        }\n    }\n}</code></p>\n", "alternatives": [{"alternative": " It will show a stack trace with a runtime exception.\n", "is_correct": false}, {"alternative": " \"java.lang.Exception\"\n", "is_correct": true}, {"alternative": " It will run and throw an exception.\n", "is_correct": false}, {"alternative": " It will not compile.\n</ul>\n", "is_correct": false}]}, {"question": "Q8. Which class can compile given these declarations?\n<p>```java\ninterface One {\n    default void method() {\n        System.out.println(\"One\");\n    }\n}</p>\n<p>interface Two {\n    default void method () {\n        System.out.println(\"One\");\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\nclass Three implements One, Two {\n    public void method() {\n        super.One.method();\n    }\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\nclass Three implements One, Two {\n    public void method() {\n        One.method();\n    }\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\nclass Three implements One, Two {\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " D\n</ul>\n<p><code>java\nclass Three implements One, Two {\n    public void method() {\n        One.super.method();\n    }\n}</code></p>\n", "is_correct": true}]}, {"question": "Q9. What is the output of this code?\n<p><code>java\nclass Main {\n    public static void main (String[] args) {\n        List list = new ArrayList();\n        list.add(\"hello\");\n        list.add(2);\n        System.out.print(list.get(0) instanceof Object);\n        System.out.print(list.get(1) instanceof Integer);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " The code does not compile.\n", "is_correct": false}, {"alternative": " truefalse\n", "is_correct": false}, {"alternative": " truetrue\n", "is_correct": true}, {"alternative": " falsetrue\n</ul>\n", "is_correct": false}]}, {"question": "Q10. Given the following two classes, what will be the output of the Main class?\n<p><code>java\npackage mypackage;\npublic class Math {\n    public static int abs(int num){\n        return num &lt; 0 ? -num : num;\n    }\n}\npackage mypackage.elementary;\npublic class Math {\n    public static int abs (int num) {\n        return -num;\n    }\n}</code></p>\n<p>```java\nimport mypackage.Math;\nimport mypackage.elementary.*;</p>\n<p>class Main {\n    public static void main (String args[]){\n        System.out.println(Math.abs(123));\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " Lines 1 and 2 generate compiler errors due to class name conflicts.\n", "is_correct": false}, {"alternative": " \"-123\"\n", "is_correct": false}, {"alternative": " It will throw an exception on line 5.\n", "is_correct": false}, {"alternative": " \"123\"\n</ul>\n<p><strong>Explanation:</strong> The answer is \"123\". The <code>abs()</code> method evaluates to the one inside mypackage.Math class, because the import statements of the form:</p>\n<p><code>import packageName.subPackage.*</code></p>\n<p>is <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5.2\">Type-Import-on-Demand Declarations</a>, which <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.4.1\">never causes any other declaration to be shadowed</a>.</p>\n", "is_correct": true}]}, {"question": "Q11. What is the result of this code?\n<p>```java\n1: class MainClass {\n2:     final String message() {\n3:         return \"Hello!\";\n4:     }\n5: }</p>\n<p>6: class Main extends MainClass {\n7:     public static void main(String[] args) {\n8:         System.out.println(message());\n9:     }</p>\n<p>10:     String message() {\n11:         return \"World!\";\n12:     }\n13: }\n```</p>\n", "alternatives": [{"alternative": " It will not compile because of line 10.\n", "is_correct": true}, {"alternative": " \"Hello!\"\n", "is_correct": false}, {"alternative": " It will not compile because of line 2.\n", "is_correct": false}, {"alternative": " \"World!\"\n</ul>\n<p><strong>Explanation:</strong> Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.</p>\n", "is_correct": false}]}, {"question": "Q12. Given this code, which command will output \"2\"?\n<p><code>java\nclass Main {\n    public static void main(String[] args) {\n        System.out.println(args[2]);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " <code>java Main 1 2 \"3 4\" 5</code>\n", "is_correct": false}, {"alternative": " <code>java Main 1 \"2\" \"2\" 5</code>\n", "is_correct": true}, {"alternative": " <code>java Main.class 1 \"2\" 2 5</code>\n", "is_correct": false}, {"alternative": " <code>java Main 1 \"2\" \"3 4\" 5</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q13. What is the output of this code?\n<p><code>java\nclass Main {\n    public static void main(String[] args){\n        int a = 123451234512345;\n        System.out.println(a);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " \"123451234512345\"\n", "is_correct": false}, {"alternative": " Nothing - this will not compile.\n", "is_correct": true}, {"alternative": " a negative integer value\n", "is_correct": false}, {"alternative": " \"12345100000\"\n</ul>\n<p><strong>Reasoning:</strong> The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.</p>\n", "is_correct": false}]}, {"question": "Q14. What is the output of this code?\n<p><code>java\nclass Main {\n    public static void main (String[] args) {\n        String message = \"Hello world!\";\n        String newMessage = message.substring(6, 12)\n            + message.substring(12, 6);\n        System.out.println(newMessage);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " The code does not compile.\n", "is_correct": false}, {"alternative": " A runtime exception is thrown.\n", "is_correct": true}, {"alternative": " \"world!!world\"\n", "is_correct": false}, {"alternative": " \"world!world!\"\n</ul>\n", "is_correct": false}]}, {"question": "Q15. How do you write a foreach loop that will iterate over ArrayList\\&lt;Pencil&gt;pencilCase?\n", "alternatives": [{"alternative": " <code>for (Pencil pencil : pencilCase) {}</code>\n", "is_correct": true}, {"alternative": " <code>for (pencilCase.next()) {}</code>\n", "is_correct": false}, {"alternative": " <code>for (Pencil pencil : pencilCase.iterator()) {}</code>\n", "is_correct": false}, {"alternative": " <code>for (pencil in pencilCase) {}</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q16. What does this code print?\n<p><code>java\nSystem.out.print(\"apple\".compareTo(\"banana\"));</code></p>\n", "alternatives": [{"alternative": " <code>0</code>\n", "is_correct": false}, {"alternative": " positive number\n", "is_correct": false}, {"alternative": " negative number\n", "is_correct": true}, {"alternative": " compilation error\n</ul>\n", "is_correct": false}]}, {"question": "Q17. You have an ArrayList of names that you want to sort alphabetically. Which approach would <strong>NOT</strong> work?\n", "alternatives": [{"alternative": " <code>names.sort(Comparator.comparing(String::toString))</code>\n", "is_correct": false}, {"alternative": " <code>Collections.sort(names)</code>\n", "is_correct": false}, {"alternative": " <code>names.sort(List.DESCENDING)</code>\n", "is_correct": true}, {"alternative": " <code>names.stream().sorted((s1, s2) -&gt; s1.compareTo(s2)).collect(Collectors.toList())</code>\n</ul>\n<p><a href=\"https://www.scaler.com/topics/java/arraylist-in-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q18. By implementing encapsulation, you cannot directly access the class's _ properties unless you are writing code inside the class itself.\n", "alternatives": [{"alternative": " private\n", "is_correct": true}, {"alternative": " protected\n", "is_correct": false}, {"alternative": " no-modifier\n", "is_correct": false}, {"alternative": " public\n</ul>\n", "is_correct": false}]}, {"question": "Q19. Which is the most up-to-date way to instantiate the current date?\n", "alternatives": [{"alternative": " <code>new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())</code>\n", "is_correct": false}, {"alternative": " <code>new Date(System.currentTimeMillis())</code>\n", "is_correct": false}, {"alternative": " <code>LocalDate.now()</code>\n", "is_correct": true}, {"alternative": " <code>Calendar.getInstance().getTime()</code>\n</ul>\n<p><strong>Explanation:</strong> LocalDate is the newest class added in java 8</p>\n", "is_correct": false}]}, {"question": "Q20. Fill in the blank to create a piece of code that will tell whether <code>int0</code> is divisible by <code>5</code>:\n<p><code>boolean isDivisibleBy5 = _____</code></p>\n", "alternatives": [{"alternative": " <code>int0 / 5 ? true: false</code>\n", "is_correct": false}, {"alternative": " <code>int0 % 5 == 0</code>\n", "is_correct": true}, {"alternative": " <code>int0 % 5 != 5</code>\n", "is_correct": false}, {"alternative": " <code>Math.isDivisible(int0, 5)</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q21. How many times will this code print \"Hello World!\"?\n<p><code>java\nclass Main {\n    public static void main(String[] args){\n        for (int i=0; i&lt;10; i=i++){\n            i+=1;\n            System.out.println(\"Hello World!\");\n        }\n    }\n}</code></p>\n", "alternatives": [{"alternative": " 10 times\n", "is_correct": true}, {"alternative": " 9 times\n", "is_correct": false}, {"alternative": " 5 times\n", "is_correct": false}, {"alternative": " infinite number of times\n</ul>\n<p><strong>Explanation:</strong> Observe the loop increment. It's not an increment, it's an assignment(post).</p>\n", "is_correct": false}]}, {"question": "Q22. The runtime system starts your program by calling which function first?\n", "alternatives": [{"alternative": " print\n", "is_correct": false}, {"alternative": " iterative\n", "is_correct": false}, {"alternative": " hello\n", "is_correct": false}, {"alternative": " main\n</ul>\n", "is_correct": true}]}, {"question": "Q23. What code would you use in Constructor A to call Constructor B?\n<p>```java\npublic class Jedi {\n  /<em> Constructor A </em>/\n  Jedi(String name, String species){}</p>\n<p>/<em> Constructor B </em>/\n  Jedi(String name, String species, boolean followsTheDarkSide){}\n}\n```</p>\n", "alternatives": [{"alternative": " Jedi(name, species, false)\n", "is_correct": false}, {"alternative": " new Jedi(name, species, false)\n", "is_correct": false}, {"alternative": " this(name, species, false)\n", "is_correct": true}, {"alternative": " super(name, species, false)\n</ul>\n<p><strong>Note:</strong> This code won't compile, possibly broken code sample.</p>\n<p><a href=\"https://www.scaler.com/topics/java/constructor-in-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q24. Which statement is <strong>NOT</strong> true?\n", "alternatives": [{"alternative": " An anonymous class may specify an abstract base class as its base type.\n", "is_correct": false}, {"alternative": " An anonymous class does not require a zero-argument constructor.\n", "is_correct": true}, {"alternative": " An anonymous class may specify an interface as its base type.\n", "is_correct": false}, {"alternative": " An anonymous class may specify both an abstract class and interface as base types.\n</ul>\n", "is_correct": false}]}, {"question": "Q25. What will this program print out to the console when executed?\n<p>```java\nimport java.util.LinkedList;</p>\n<p>public class Main {\n    public static void main(String[] args){\n        LinkedList<Integer> list = new LinkedList&lt;&gt;();\n        list.add(5);\n        list.add(1);\n        list.add(10);\n        System.out.println(list);\n    }\n}\n```</p>\n", "alternatives": [{"alternative": " [5, 1, 10]\n", "is_correct": true}, {"alternative": " [10, 5, 1]\n", "is_correct": false}, {"alternative": " [1, 5, 10]\n", "is_correct": false}, {"alternative": " [10, 1, 5]\n</ul>\n", "is_correct": false}]}, {"question": "Q26. What is the output of this code?\n<p><code>java\nclass Main {\n    public static void main(String[] args){\n       String message = \"Hello\";\n       for (int i = 0; i&lt;message.length(); i++){\n          System.out.print(message.charAt(i+1));\n       }\n    }\n}</code></p>\n", "alternatives": [{"alternative": " \"Hello\"\n", "is_correct": false}, {"alternative": " A runtime exception is thrown.\n", "is_correct": true}, {"alternative": " The code does not compile.\n", "is_correct": false}, {"alternative": " \"ello\"\n</ul>\n", "is_correct": false}]}, {"question": "Q27. Object-oriented programming is a style of programming where you organize your program around _ and data, rather than _ and logic.\n", "alternatives": [{"alternative": " functions; actions\n", "is_correct": false}, {"alternative": " objects; actions\n", "is_correct": true}, {"alternative": " actions; functions\n", "is_correct": false}, {"alternative": " actions; objects\n</ul>\n", "is_correct": false}]}, {"question": "Q28. What statement returns true if \"nifty\" is of type String?\n", "alternatives": [{"alternative": " <code>\"nifty\".getType().equals(\"String\")</code>\n", "is_correct": false}, {"alternative": " <code>\"nifty\".getType() == String</code>\n", "is_correct": false}, {"alternative": " <code>\"nifty\".getClass().getSimpleName() == \"String\"</code>\n", "is_correct": false}, {"alternative": " <code>\"nifty\" instanceof String</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q29. What is the output of this code?\n<p><code>java\nimport java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        List&lt;Boolean&gt; list = new ArrayList&lt;&gt;();\n        list.add(true);\n        list.add(Boolean.parseBoolean(\"FalSe\"));\n        list.add(Boolean.TRUE);\n        System.out.print(list.size());\n        System.out.print(list.get(1) instanceof Boolean);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " A runtime exception is thrown.\n", "is_correct": false}, {"alternative": " 3false\n", "is_correct": false}, {"alternative": " 2true\n", "is_correct": false}, {"alternative": " 3true\n</ul>\n", "is_correct": true}]}, {"question": "Q30. What is the result of this code?\n<p><code>java\n1: class Main {\n2:     Object message() {\n3:         return \"Hello!\";\n4:     }\n5:     public static void main(String[] args) {\n6:         System.out.print(new Main().message());\n7:         System.out.print(new Main2().message());\n8:     }\n9: }\n10: class Main2 extends Main {\n11:     String message() {\n12:         return \"World!\";\n13:     }\n14: }</code></p>\n", "alternatives": [{"alternative": " It will not compile because of line 7.\n", "is_correct": false}, {"alternative": " Hello!Hello!\n", "is_correct": false}, {"alternative": " Hello!World!\n", "is_correct": true}, {"alternative": " It will not compile because of line 11.\n</ul>\n", "is_correct": false}]}, {"question": "Q31. What method can be used to create a new instance of an object?\n", "alternatives": [{"alternative": " another instance\n", "is_correct": false}, {"alternative": " field\n", "is_correct": false}, {"alternative": " constructor\n", "is_correct": true}, {"alternative": " private method\n</ul>\n", "is_correct": false}]}, {"question": "Q32. Which is the most reliable expression for testing whether the values of two string variables are the same?\n", "alternatives": [{"alternative": " string1 == string2\n", "is_correct": false}, {"alternative": " string1 = string2\n", "is_correct": false}, {"alternative": " string1.matches(string2)\n", "is_correct": false}, {"alternative": " string1.equals(string2)\n</ul>\n", "is_correct": true}]}, {"question": "Q33. Which letters will print when this code is run?\n<p><code>java\npublic static void main(String[] args) {\n    try {\n        System.out.println(\"A\");\n        badMethod();\n        System.out.println(\"B\");\n    } catch (Exception ex) {\n        System.out.println(\"C\");\n    } finally {\n        System.out.println(\"D\");\n    }\n}\npublic static void badMethod() {\n    throw new Error();\n}</code></p>\n", "alternatives": [{"alternative": " A, B, and D\n", "is_correct": false}, {"alternative": " A, C, and D\n", "is_correct": false}, {"alternative": " C and D\n", "is_correct": false}, {"alternative": " A and D\n</ul>\n<p><strong>Explanation:</strong> <code>Error</code> is not inherited from <code>Exception</code>.</p>\n", "is_correct": true}]}, {"question": "Q34. What is the output of this code?\n<p><code>java\nclass Main {\n    static int count = 0;\n    public static void main(String[] args) {\n        if (count &lt; 3) {\n            count++;\n            main(null);\n        } else {\n            return;\n        }\n        System.out.println(\"Hello World!\");\n    }\n}</code></p>\n", "alternatives": [{"alternative": " It will throw a runtime exception.\n", "is_correct": false}, {"alternative": " It will not compile.\n", "is_correct": false}, {"alternative": " It will print \"Hello World!\" three times.\n", "is_correct": true}, {"alternative": " It will run forever.\n</ul>\n", "is_correct": false}]}, {"question": "Q35. What is the output of this code?\n<p><code>java\nimport java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        String[] array = {\"abc\", \"2\", \"10\", \"0\"};\n        List&lt;String&gt; list = Arrays.asList(array);\n        Collections.sort(list);\n        System.out.println(Arrays.toString(array));\n    }\n}</code></p>\n", "alternatives": [{"alternative": " <code>[abc, 0, 2, 10]</code>\n", "is_correct": false}, {"alternative": " The code does not compile.\n", "is_correct": false}, {"alternative": " <code>[abc, 2, 10, 0]</code>\n", "is_correct": false}, {"alternative": " <code>[0, 10, 2, abc]</code>\n</ul>\n<p><strong>Explanation:</strong> The <code>java.util.Arrays.asList(T... a)</code> returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)</p>\n", "is_correct": true}]}, {"question": "Q36. What is the output of this code?\n<p><code>java\nclass Main {\n    public static void main(String[] args) {\n        String message = \"Hello\";\n        print(message);\n        message += \"World!\";\n        print(message);\n    }\n    static void print(String message) {\n        System.out.print(message);\n        message += \" \";\n    }\n}</code></p>\n", "alternatives": [{"alternative": " Hello World!\n", "is_correct": false}, {"alternative": " HelloHelloWorld!\n", "is_correct": true}, {"alternative": " Hello Hello World!\n", "is_correct": false}, {"alternative": " Hello HelloWorld!\n</ul>\n", "is_correct": false}]}, {"question": "Q37. What is displayed when this code is compiled and executed?\n<p><code>java\npublic class Main {\n    public static void main(String[] args) {\n        int x = 5;\n        x = 10;\n        System.out.println(x);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " x\n", "is_correct": false}, {"alternative": " null\n", "is_correct": false}, {"alternative": " 10\n", "is_correct": true}, {"alternative": " 5\n</ul>\n", "is_correct": false}]}, {"question": "Q38. Which approach cannot be used to iterate over a List named <em>theList</em>?\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\nfor (int i = 0; i &lt; theList.size(); i++) {\n    System.out.println(theList.get(i));\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\nfor (Object object : theList) {\n    System.out.println(object);\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\nIterator it = theList.iterator();\nfor (it.hasNext()) {\n    System.out.println(it.next());\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " D\n</ul>\n<p><code>java\ntheList.forEach(System.out::println);</code></p>\n<p><strong>Explanation:</strong> <code>for (it.hasNext())</code> should be <code>while (it.hasNext())</code>.</p>\n", "is_correct": false}]}, {"question": "Q39. What method signature will work with this code?\n<p><code>boolean healthyOrNot = isHealthy(\"avocado\");</code></p>\n", "alternatives": [{"alternative": " public void isHealthy(String avocado)\n", "is_correct": false}, {"alternative": " boolean isHealthy(String string)\n", "is_correct": true}, {"alternative": " public isHealthy(\"avocado\")\n", "is_correct": false}, {"alternative": " private String isHealthy(String food)\n</ul>\n", "is_correct": false}]}, {"question": "Q40. Which are valid keywords in a Java module descriptor (module-info.java)?\n", "alternatives": [{"alternative": " provides, employs\n", "is_correct": false}, {"alternative": " imports, exports\n", "is_correct": false}, {"alternative": " consumes, supplies\n", "is_correct": false}, {"alternative": " requires, exports\n</ul>\n", "is_correct": true}]}, {"question": "Q41. Which type of variable keeps a constant value once it is assigned?\n", "alternatives": [{"alternative": " non-static\n", "is_correct": false}, {"alternative": " static\n", "is_correct": false}, {"alternative": " final\n", "is_correct": true}, {"alternative": " private\n</ul>\n", "is_correct": false}]}, {"question": "Q42. How does the keyword <code>volatile</code> affect how a variable is handled?\n", "alternatives": [{"alternative": " It will be read by only one thread at a time.\n", "is_correct": false}, {"alternative": " It will be stored on the hard drive.\n", "is_correct": false}, {"alternative": " It will never be cached by the CPU.\n", "is_correct": true}, {"alternative": " It will be preferentially garbage collected.\n</ul>\n", "is_correct": false}]}, {"question": "Q43. What is the result of this code?\n<p><code>java\nchar smooch = 'x';\nSystem.out.println((int) smooch);</code></p>\n", "alternatives": [{"alternative": " an alphanumeric character\n", "is_correct": false}, {"alternative": " a negative number\n", "is_correct": false}, {"alternative": " a positive number\n", "is_correct": true}, {"alternative": " a ClassCastException\n</ul>\n", "is_correct": false}]}, {"question": "Q44. You get a NullPointerException. What is the most likely cause?\n", "alternatives": [{"alternative": " A file that needs to be opened cannot be found.\n", "is_correct": false}, {"alternative": " A network connection has been lost in the middle of communications.\n", "is_correct": false}, {"alternative": " Your code has used up all available memory.\n", "is_correct": false}, {"alternative": " The object you are using has not been instantiated.\n</ul>\n", "is_correct": true}]}, {"question": "Q45. How would you fix this code so that it compiles?\n<p><code>java\npublic class Nosey {\n    int age;\n    public static void main(String[] args) {\n        System.out.println(\"Your age is: \" + age);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " Make age static.\n", "is_correct": true}, {"alternative": " Make age global.\n", "is_correct": false}, {"alternative": " Make age public.\n", "is_correct": false}, {"alternative": " Initialize age to a number.\n</ul>\n", "is_correct": false}]}, {"question": "Q46. Add a Duck called \"Waddles\" to the ArrayList <strong>ducks</strong>.\n<p><code>java\npublic class Duck {\n    private String name;\n    Duck(String name) {}\n}</code></p>\n", "alternatives": [{"alternative": " <code>Duck waddles = new Duck();</code>\n      <code>ducks.add(waddles);</code>\n", "is_correct": false}, {"alternative": " <code>Duck duck = new Duck(\"Waddles\");</code>\n      <code>ducks.add(waddles);</code>\n", "is_correct": false}, {"alternative": " <code>ducks.add(new Duck(\"Waddles\"));</code>\n", "is_correct": true}, {"alternative": " <code>ducks.add(new Waddles());</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q47. If you encounter <code>UnsupportedClassVersionError</code> it means the code was <code>___</code> on a newer version of Java than the JRE <code>___</code> it.\n", "alternatives": [{"alternative": " executed; interpreting\n", "is_correct": false}, {"alternative": " executed; compiling\n", "is_correct": false}, {"alternative": " compiled; executing\n", "is_correct": true}, {"alternative": " compiled, translating\n</ul>\n", "is_correct": false}]}, {"question": "Q48. Given this class, how would you make the code compile?\n<p><code>java\npublic class TheClass {\n    private final int x;\n}</code></p>\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\npublic TheClass() {\n    x += 77;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\npublic TheClass() {\n    x = null;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\npublic TheClass() {\n    x = 77;\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " D\n</ul>\n<p><code>java\nprivate void setX(int x) {\n    this.x = x;\n}\npublic TheClass() {\n    setX(77);\n}</code></p>\n<p><strong>Explanation:</strong> <code>final</code> class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.</p>\n", "is_correct": false}]}, {"question": "Q49. How many times f will be printed?\n<p><code>java\npublic class Solution {\n    public static void main(String[] args) {\n        for (int i = 44; i &gt; 40; i--) {\n            System.out.println(\"f\");\n        }\n    }\n}</code></p>\n", "alternatives": [{"alternative": " 4\n", "is_correct": true}, {"alternative": " 3\n", "is_correct": false}, {"alternative": " 5\n", "is_correct": false}, {"alternative": " A Runtime exception will be thrown\n</ul>\n", "is_correct": false}]}, {"question": "Q50. Which statements about <code>abstract</code> classes are true?\n<p><code>1. They can be instantiated.\n2. They allow member variables and methods to be inherited by subclasses.\n3. They can contain constructors.</code></p>\n", "alternatives": [{"alternative": " 1, 2, and 3\n", "is_correct": false}, {"alternative": " only 3\n", "is_correct": false}, {"alternative": " 2 and 3\n", "is_correct": true}, {"alternative": " only 2\n</ul>\n", "is_correct": false}]}, {"question": "Q51. Which keyword lets you call the constructor of a parent class?\n", "alternatives": [{"alternative": " parent\n", "is_correct": false}, {"alternative": " super\n", "is_correct": true}, {"alternative": " this\n", "is_correct": false}, {"alternative": " new\n</ul>\n", "is_correct": false}]}, {"question": "Q52. What is the result of this code?\n<p><code>java\n  1: int a = 1;\n  2: int b = 0;\n  3: int c = a/b;\n  4: System.out.println(c);</code></p>\n", "alternatives": [{"alternative": " It will throw an ArithmeticException.\n", "is_correct": true}, {"alternative": " It will run and output 0.\n", "is_correct": false}, {"alternative": " It will not compile because of line 3.\n", "is_correct": false}, {"alternative": " It will run and output infinity.\n</ul>\n", "is_correct": false}]}, {"question": "Q53. Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?\n", "alternatives": [{"alternative": " Add a static import.\n", "is_correct": true}, {"alternative": " Declare local copies of the constant in your code.\n", "is_correct": false}, {"alternative": " This cannot be done. You must always qualify references to static members with the class form which they came from.\n", "is_correct": false}, {"alternative": " Put the static members in an interface and inherit from that interface.\n</ul>\n", "is_correct": false}]}, {"question": "Q54. Which keyword lets you use an interface?\n", "alternatives": [{"alternative": " extends\n", "is_correct": false}, {"alternative": " implements\n", "is_correct": true}, {"alternative": " inherits\n", "is_correct": false}, {"alternative": " import\n</ul>\n", "is_correct": false}]}, {"question": "Q55. Why are ArrayLists better than arrays?\n", "alternatives": [{"alternative": " You don't have to decide the size of an ArrayList when you first make it.\n", "is_correct": true}, {"alternative": " You can put more items into an ArrayList than into an array.\n", "is_correct": false}, {"alternative": " ArrayLists can hold more kinds of objects than arrays.\n", "is_correct": false}, {"alternative": " You don't have to decide the type of an ArrayList when you first make it.\n</ul>\n", "is_correct": false}]}, {"question": "Q56. Declare a variable that holds the first four digits of \u03a0\n", "alternatives": [{"alternative": " int pi = 3.141;\n", "is_correct": false}, {"alternative": " decimal pi = 3.141;\n", "is_correct": false}, {"alternative": " double pi = 3.141;\n", "is_correct": true}, {"alternative": " float pi = 3.141;\n</ul>\n<p><strong>Reasoning:</strong></p>\n<p>```java\npublic class TestReal {\n    public static void main (String[] argv)\n    {\n      double pi = 3.14159265;       //accuracy up to 15 digits\n      float pi2 = 3.141F;           //accuracy up to 6-7 digits</p>\n<pre><code>  System.out.println (\"Pi=\" + pi);\n  System.out.println (\"Pi2=\" + pi2);\n}\n</code></pre>\n<p>}\n```</p>\n<p><code>The default Java type which Java will be using for a float variable will be double.\nSo, even if you declare any variable as float, what the compiler has to actually do is to assign a double value to a float variable,\nwhich is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.</code></p>\n", "is_correct": false}]}, {"question": "Q57. Use the magic power to cast a spell\n<p><code>java\npublic class MagicPower {\n    void castSpell(String spell) {}\n}</code></p>\n", "alternatives": [{"alternative": " <code>new MagicPower().castSpell(\"expecto patronum\");</code>\n", "is_correct": true}, {"alternative": " <code>MagicPower magicPower = new MagicPower();</code>\n      <code>magicPower.castSpell();</code>\n", "is_correct": false}, {"alternative": " <code>MagicPower.castSpell(\"expelliarmus\");</code>\n", "is_correct": false}, {"alternative": " <code>new MagicPower.castSpell();</code>\n</ul>\n<p><a href=\"https://stackoverflow.com/a/2042836/993246\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q58. What language construct serves as a blueprint containing an object's properties and functionality?\n", "alternatives": [{"alternative": " constructor\n", "is_correct": false}, {"alternative": " instance\n", "is_correct": false}, {"alternative": " class\n", "is_correct": true}, {"alternative": " method\n</ul>\n", "is_correct": false}]}, {"question": "Q59. What does this code print?\n<p>```java\npublic static void main(String[] args) {\n    int x=5,y=10;\n    swapsies(x,y);\n    System.out.println(x+\" \"+y);\n}</p>\n<p>static void swapsies(int a, int b) {\n    int temp=a;\n    a=b;\n    b=temp;\n}\n```</p>\n", "alternatives": [{"alternative": " 10 10\n", "is_correct": false}, {"alternative": " 5 10\n", "is_correct": true}, {"alternative": " 10 5\n", "is_correct": false}, {"alternative": " 5 5\n</ul>\n", "is_correct": false}]}, {"question": "Q60. What is the result of this code?\n<p><code>java\ntry {\n    System.out.println(\"Hello World\");\n} catch (Exception e) {\n    System.out.println(\"e\");\n} catch (ArithmeticException e) {\n    System.out.println(\"e\");\n} finally {\n    System.out.println(\"!\");\n}</code></p>\n", "alternatives": [{"alternative": " Hello World\n", "is_correct": false}, {"alternative": " It will not compile because the second catch statement is unreachable\n", "is_correct": true}, {"alternative": " Hello World!\n", "is_correct": false}, {"alternative": " It will throw runtime exception\n</ul>\n", "is_correct": false}]}, {"question": "Q61. Which is not a java keyword\n", "alternatives": [{"alternative": " finally\n", "is_correct": false}, {"alternative": " native\n", "is_correct": false}, {"alternative": " interface\n", "is_correct": false}, {"alternative": " unsigned\n</ul>\n<p><strong>Explanation:</strong> <code>native</code> is a part of JNI interface.</p>\n", "is_correct": true}]}, {"question": "Q62. Which operator would you use to find the remainder after division?\n", "alternatives": [{"alternative": " <code>%</code>\n", "is_correct": true}, {"alternative": " <code>//</code>\n", "is_correct": false}, {"alternative": " <code>/</code>\n", "is_correct": false}, {"alternative": " <code>DIV</code>\n</ul>\n<p><a href=\"http://www.cs.ukzn.ac.za/~hughm/java/intro/week2/21.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q63. Which choice is a disadvantage of inheritance?\n", "alternatives": [{"alternative": " Overridden methods of the parent class cannot be reused.\n", "is_correct": false}, {"alternative": " Responsibilities are not evenly distributed between parent and child classes.\n", "is_correct": false}, {"alternative": " Classes related by inheritance are tightly coupled to each other.\n", "is_correct": true}, {"alternative": " The internal state of the parent class is accessible to its children.\n</ul>\n<p><a href=\"http://erpbasic.blogspot.com/2012/01/inheritance-advantages-and.html#:~:text=Main%20disadvantage%20of%20using%20inheritance,used%20independent%20of%20each%20other.&amp;text=4.,case%20of%20using%20that%20method.\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q64. How would you declare and initialize an array of 10 ints?\n", "alternatives": [{"alternative": " <code>Array&lt;Integer&gt; numbers = new Array&lt;Integer&gt;(10);</code>\n", "is_correct": false}, {"alternative": " <code>Array[int] numbers = new Array[int](10);</code>\n", "is_correct": false}, {"alternative": " <code>int[] numbers = new int[10];</code>\n", "is_correct": true}, {"alternative": " <code>int numbers[] = int[10];</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q65. Refactor this event handler to a lambda expression:\n<p><code>java\ngroucyButton.addActionListener(new ActionListener() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"Press me one more time..\");\n    }\n});</code></p>\n", "alternatives": [{"alternative": " <code>groucyButton.addActionListener(ActionListener listener -&gt; System.out.println(\"Press me one more time...\"));</code>\n", "is_correct": false}, {"alternative": " <code>groucyButton.addActionListener((event) -&gt; System.out.println(\"Press me one more time...\"));</code>\n", "is_correct": true}, {"alternative": " <code>groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -&gt; System.out.println(\"Press me one more time...\");});</code>\n", "is_correct": false}, {"alternative": " <code>groucyButton.addActionListener(() -&gt; System.out.println(\"Press me one more time...\"));</code>\n</ul>\n<p><a href=\"https://www.codejava.net/java-core/the-java-language/java-8-lambda-listener-example\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q66. Which functional interfaces does Java provide to serve as data types for lambda expressions?\n", "alternatives": [{"alternative": " Observer, Observable\n", "is_correct": false}, {"alternative": " Collector, Builder\n", "is_correct": false}, {"alternative": " Filter, Map, Reduce\n", "is_correct": false}, {"alternative": " Consumer, Predicate, Supplier\n</ul>\n<p><a href=\"https://www.baeldung.com/java-8-functional-interfaces\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q67. What is a valid use of the hashCode() method?\n", "alternatives": [{"alternative": " encrypting user passwords\n", "is_correct": false}, {"alternative": " deciding if two instances of a class are equal\n", "is_correct": true}, {"alternative": " enabling HashMap to find matches faster\n", "is_correct": false}, {"alternative": " moving objects from a List to a HashMap\n</ul>\n<p><a href=\"https://www.baeldung.com/java-hashcode\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q68. What kind of relationship does \"extends\" denote?\n", "alternatives": [{"alternative": " uses-a\n", "is_correct": false}, {"alternative": " is-a\n", "is_correct": true}, {"alternative": " has-a\n", "is_correct": false}, {"alternative": " was-a\n</ul>\n<p><a href=\"https://www.c-sharpcorner.com/UploadFile/3614a6/is-a-and-has-a-relationship-in-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q69. How do you force an object to be garbage collected?\n", "alternatives": [{"alternative": " Set object to null and call Runtime.gc()\n", "is_correct": false}, {"alternative": " Set object to null and call System.gc()\n", "is_correct": true}, {"alternative": " Set object to null and call Runtime.getRuntime().runFinalization()\n", "is_correct": false}, {"alternative": " There is no way to force an object to be garbage collected\n</ul>\n<p><a href=\"https://sematext.com/blog/java-garbage-collection/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q70. Java programmers commonly use design patterns. Some examples are the <strong>_</strong>, which helps create instances of a class, the <strong>_</strong>, which ensures that only one instance of a class can be created; and the <strong>_</strong>, which allows for a group of algorithms to be interchangeable.\n", "alternatives": [{"alternative": " static factory method; singleton; strategy pattern\n", "is_correct": true}, {"alternative": " strategy pattern; static factory method; singleton\n", "is_correct": false}, {"alternative": " creation pattern; singleton; prototype pattern\n", "is_correct": false}, {"alternative": " singleton; strategy pattern; static factory method\n</ul>\n", "is_correct": false}]}, {"question": "Q71. Using Java's Reflection API, you can use _ to get the name of a class and _ to retrieve an array of its methods.\n", "alternatives": [{"alternative": " this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()\n", "is_correct": true}, {"alternative": " this.getName(); this.getMethods()\n", "is_correct": false}, {"alternative": " Reflection.getName(this); Reflection.getMethods(this)\n", "is_correct": false}, {"alternative": " Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()\n</ul>\n", "is_correct": false}]}, {"question": "Q72. Which is not a valid lambda expression?\n", "alternatives": [{"alternative": " <code>a -&gt; false;</code>\n", "is_correct": false}, {"alternative": " <code>(a) -&gt; false;</code>\n", "is_correct": false}, {"alternative": " <code>String a -&gt; false;</code>\n", "is_correct": true}, {"alternative": " <code>(String a) -&gt; false;</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q73. Which access modifier makes variables and methods visible only in the class where they are declared?\n", "alternatives": [{"alternative": " public\n", "is_correct": false}, {"alternative": " protected\n", "is_correct": false}, {"alternative": " nonmodifier\n", "is_correct": false}, {"alternative": " private\n</ul>\n", "is_correct": true}]}, {"question": "Q74. What type of variable can be assigned to only once?\n", "alternatives": [{"alternative": " private\n", "is_correct": false}, {"alternative": " non-static\n", "is_correct": false}, {"alternative": " final\n", "is_correct": true}, {"alternative": " static\n</ul>\n", "is_correct": false}]}, {"question": "Q75. How would you convert a String to an Int?\n", "alternatives": [{"alternative": " <code>\"21\".intValue()</code>\n", "is_correct": false}, {"alternative": " <code>String.toInt(\"21\")</code>\n", "is_correct": false}, {"alternative": " <code>Integer.parseInt(\"21\")</code>\n", "is_correct": true}, {"alternative": " <code>String.valueOf(\"21\")</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q76. What method should be added to the Duck class to print the name Moby?\n<p>```java\npublic class Duck {\n    private String name;</p>\n<pre><code>Duck(String name) {\n    this.name = name;\n}\n\npublic static void main(String[] args) {\n    System.out.println(new Duck(\"Moby\"));\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " <code>public String toString() { return name; }</code>\n", "is_correct": true}, {"alternative": " <code>public void println() { System.out.println(name); }</code>\n", "is_correct": false}, {"alternative": " <code>String toString() { return this.name; }</code>\n", "is_correct": false}, {"alternative": " <code>public void toString() { System.out.println(this.name); }</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q77. Which operator is used to concatenate Strings in Java\n", "alternatives": [{"alternative": " <code>+</code>\n", "is_correct": true}, {"alternative": " <code>&amp;</code>\n", "is_correct": false}, {"alternative": " <code>.</code>\n", "is_correct": false}, {"alternative": " <code>-</code>\n</ul>\n<p><a href=\"https://www.techiedelight.com/concatenate-two-strings-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q78. How many times does this loop print \"exterminate\"?\n<p><code>java\nfor (int i = 44; i &gt; 40; i--) {\n    System.out.println(\"exterminate\");\n}</code></p>\n", "alternatives": [{"alternative": " two\n", "is_correct": false}, {"alternative": " four\n", "is_correct": true}, {"alternative": " three\n", "is_correct": false}, {"alternative": " five\n</ul>\n", "is_correct": false}]}, {"question": "Q79. What is the value of myCharacter after line 3 is run?\n<p><code>java\n1: public class Main {\n2:   public static void main (String[] args) {\n3:     char myCharacter = \"piper\".charAt(3);\n4:   }\n5: }</code></p>\n", "alternatives": [{"alternative": " p\n", "is_correct": false}, {"alternative": " r\n", "is_correct": false}, {"alternative": " e\n", "is_correct": true}, {"alternative": " i\n</ul>\n", "is_correct": false}]}, {"question": "Q80. When should you use a static method?\n", "alternatives": [{"alternative": " when your method is related to the object's characteristics\n", "is_correct": false}, {"alternative": " when you want your method to be available independently of class instances\n", "is_correct": true}, {"alternative": " when your method uses an object's instance variable\n", "is_correct": false}, {"alternative": " when your method is dependent on the specific instance that calls it\n</ul>\n", "is_correct": false}]}, {"question": "Q81. What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?\n", "alternatives": [{"alternative": " pass by reference\n", "is_correct": false}, {"alternative": " pass by occurrence\n", "is_correct": false}, {"alternative": " pass by value\n", "is_correct": true}, {"alternative": " API call\n</ul>\n", "is_correct": false}]}, {"question": "Q82. In Java, what is the scope of a method's argument or parameter?\n", "alternatives": [{"alternative": " inside the method\n", "is_correct": true}, {"alternative": " both inside and outside the method\n", "is_correct": false}, {"alternative": " neither inside nor outside the method\n", "is_correct": false}, {"alternative": " outside the method\n</ul>\n", "is_correct": false}]}, {"question": "Q83. What is the output of this code?\n<p><code>java\npublic class Main {\n  public static void main (String[] args) {\n    int[] sampleNumbers = {8, 5, 3, 1};\n    System.out.println(sampleNumbers[2]);\n  }\n}</code></p>\n", "alternatives": [{"alternative": " 5\n", "is_correct": false}, {"alternative": " 8\n", "is_correct": false}, {"alternative": " 1\n", "is_correct": false}, {"alternative": " 3\n</ul>\n", "is_correct": true}]}, {"question": "Q84. Which change will make this code compile successfully?\n<p><code>java\n1: public class Main {\n2:   String MESSAGE =\"Hello!\";\n3:   static void print(){\n4:     System.out.println(message);\n5:   }\n6:   void print2(){}\n7: }</code></p>\n", "alternatives": [{"alternative": " Change line 2 to <code>public static final String message</code>\n", "is_correct": false}, {"alternative": " Change line 6 to <code>public void print2(){}</code>\n", "is_correct": false}, {"alternative": " Remove the body of the <code>print2</code> method and add a semicolon.\n", "is_correct": false}, {"alternative": " Remove the body of the <code>print</code> method.\n</ul>\n<p><strong>Explanation:</strong> Changing line 2 to <code>public static final String message</code> raises the error <code>message not initialized in the default constructor</code>.</p>\n", "is_correct": true}]}, {"question": "Q85. What is the output of this code?\n<p><code>java\nimport java.util.*;\nclass Main {\n  public static void main(String[] args) {\n    String[] array = new String[]{\"A\", \"B\", \"C\"};\n    List&lt;String&gt; list1 = Arrays.asList(array);\n    List&lt;String&gt; list2 = new ArrayList&lt;&gt;(Arrays.asList(array));\n    List&lt;String&gt; list3 = new ArrayList&lt;&gt;(Arrays.asList(\"A\", new String(\"B\"), \"C\"));\n    System.out.print(list1.equals(list2));\n    System.out.print(list1.equals(list3));\n  }\n}</code></p>\n", "alternatives": [{"alternative": " falsefalse\n", "is_correct": false}, {"alternative": " truetrue\n", "is_correct": true}, {"alternative": " falsetrue\n", "is_correct": false}, {"alternative": " truefalse\n</ul>\n", "is_correct": false}]}, {"question": "Q86. Which code snippet is valid?\n", "alternatives": [{"alternative": " <code>ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;(){\"Hello\", \"World\"};</code>\n", "is_correct": false}, {"alternative": " <code>ArrayList words = Arrays.asList(\"Hello\", \"World\");</code>\n", "is_correct": false}, {"alternative": " <code>ArrayList&lt;String&gt; words = {\"Hello\", \"World\"};</code>\n", "is_correct": false}, {"alternative": " <code>ArrayList&lt;String&gt; words = new ArrayList&lt;&gt;(Arrays.asList(\"Hello\", \"World\"));</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q87. What is the output of this code?\n<p><code>java\nclass Main {\n  public static void main(String[] args) {\n    StringBuilder sb = new StringBuilder(\"hello\");\n    sb.deleteCharAt(0).insert(0, \"H\").\" World!\";\n    System.out.println(sb);\n  }\n}</code></p>\n", "alternatives": [{"alternative": " It will not compile.\n", "is_correct": true}, {"alternative": " \"HelloWorld!\"\n", "is_correct": false}, {"alternative": " \"hello\"\n", "is_correct": false}, {"alternative": " ????\n</ul>\n", "is_correct": false}]}, {"question": "Q88. How would you use the TaxCalculator to determine the amount of tax on $50?\n<p><code>java\nclass TaxCalculator {\n  static calculate(total) {\n    return total * .05;\n  }\n}</code></p>\n", "alternatives": [{"alternative": " TaxCalculator.calculate(50);\n", "is_correct": true}, {"alternative": " new TaxCalculator.calculate(50);\n", "is_correct": false}, {"alternative": " calculate(50);\n", "is_correct": false}, {"alternative": " new TaxCalculator.calculate($50);\n</ul>\n<p><strong>Note:</strong> This code won't compile, broken code sample.</p>\n<ol>\n", "is_correct": false}, {"alternative": "<a href=\"https://www.geeksforgeeks.org/static-methods-vs-instance-methods-java/\">Reference</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://replit.com/@mattheweller/EverlastingShadyBraces#TaxCalculator.java\">Code sample</a>\n</ol>\n", "is_correct": false}]}, {"question": "Q89. Which characteristic does not apply to instances of java.util.HashSet?\n", "alternatives": [{"alternative": " uses hashcode of objects when inserted\n", "is_correct": false}, {"alternative": " contains unordred elements\n", "is_correct": false}, {"alternative": " contains unique elements\n", "is_correct": false}, {"alternative": " contains sorted elements\n</ul>\n<p><strong>Explanation:</strong> HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.</p>\n<p><a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q90. What is the output?\n<p>```java\nimport java.util.*;</p>\n<p>public class Main {\n    public static void main(String[] args)\n    {\n        PriorityQueue<Integer> queue = new PriorityQueue&lt;&gt;();\n        queue.add(4);\n        queue.add(3);\n        queue.add(2);\n        queue.add(1);</p>\n<pre><code>    while (queue.isEmpty() == false) {\n        System.out.printf(\"%d\", queue.remove());\n    }\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " 1 3 2 4\n", "is_correct": false}, {"alternative": " 4 2 3 1\n", "is_correct": false}, {"alternative": " 1 2 3 4\n", "is_correct": true}, {"alternative": " 4 3 2 1\n</ul>\n", "is_correct": false}]}, {"question": "Q91. What will this code print, assuming it is inside the main method of a class?\n<p><code>System.out.println(\"hello my friends\".split(\" \")[0]);</code></p>\n", "alternatives": [{"alternative": " my\n", "is_correct": false}, {"alternative": " hellomyfriends\n", "is_correct": false}, {"alternative": " hello\n", "is_correct": true}, {"alternative": " friends\n</ul>\n", "is_correct": false}]}, {"question": "Q92. You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?\n", "alternatives": [{"alternative": " 2\n", "is_correct": false}, {"alternative": " When calling the put method, Java will throw an exception\n", "is_correct": false}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 3\n</ul>\n", "is_correct": true}]}, {"question": "Q93. Which class acts as root class for Java Exception hierarchy?\n", "alternatives": [{"alternative": " Clonable\n", "is_correct": false}, {"alternative": " Throwable\n", "is_correct": true}, {"alternative": " Object\n", "is_correct": false}, {"alternative": " Serializable\n</ul>\n", "is_correct": false}]}, {"question": "Q94. Which class does not implement the java.util.Collection interface?\n", "alternatives": [{"alternative": " java.util.Vector\n", "is_correct": false}, {"alternative": " java.util.ArrayList\n", "is_correct": false}, {"alternative": " java.util.HashSet\n", "is_correct": false}, {"alternative": " java.util.HashMap\n</ul>\n<p><strong>Explanation:</strong> HashMap class implements Map interface.</p>\n", "is_correct": true}]}, {"question": "Q95. You have a variable of named <code>employees</code> of type <code>List&lt;Employee&gt;</code> containing multiple entries. The <code>Employee</code> type has a method <code>getName()</code> that returns the employee name. Which statement properly extracts a list of employee names?\n", "alternatives": [{"alternative": " <code>employees.collect(employee -&gt; employee.getName());</code>\n", "is_correct": false}, {"alternative": " <code>employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());</code>\n", "is_correct": false}, {"alternative": " <code>employees.stream().map(Employee::getName).collect(Collectors.toList());</code>\n", "is_correct": true}, {"alternative": " <code>employees.stream().collect((e) -&gt; e.getName());</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q96. This code does not compile. What needs to be changed so that it does?\n<p>```java\npublic enum Direction {\n    EAST(\"E\"),\n    WEST(\"W\"),\n    NORTH(\"N\"),\n    SOUTH(\"S\");</p>\n<pre><code>private final String shortCode;\n\npublic String getShortCode() {\n    return shortCode;\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " Add a constructor that accepts a <code>String</code> parameter and assigns it to the field <code>shortCode</code>.\n", "is_correct": true}, {"alternative": " Remove the <code>final</code> keyword for the field <code>shortCode</code>.\n", "is_correct": false}, {"alternative": " All enums need to be defined on a single line of code.\n", "is_correct": false}, {"alternative": " Add a setter method for the field <code>shortCode</code>.\n</ul>\n", "is_correct": false}]}, {"question": "Q97. Which language feature ensures that objects implementing the <code>AutoCloseable</code> interface are closed when it completes?\n", "alternatives": [{"alternative": " try-catch-finally\n", "is_correct": false}, {"alternative": " try-finally-close\n", "is_correct": false}, {"alternative": " try-with-resources\n", "is_correct": true}, {"alternative": " try-catch-close\n</ul>\n", "is_correct": false}]}, {"question": "Q98. What code should go in line 3?\n<p><code>java\n1: class Main {\n2:     public static void main(String[] args) {\n3:\n4:         array[0] = new int[]{1, 2, 3};\n5:         array[1] = new int[]{4, 5, 6};\n6:         array[2] = new int[]{7, 8, 9};\n7:         for (int i = 0; i &lt; 3; i++)\n8:             System.out.print(array[i][1]); //prints 258\n9:     }\n10: }</code></p>\n", "alternatives": [{"alternative": " <code>int[][] array = new int[][];</code>\n", "is_correct": false}, {"alternative": " <code>int[][] array = new int[3][3];</code>\n", "is_correct": true}, {"alternative": " <code>int[][] array = new int[2][2];</code>\n", "is_correct": false}, {"alternative": " <code>int[][] array = [][];</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q99. Is this an example of method overloading or overriding?\n<p><code>java\nclass Car {\n    public void accelerate() {}\n}\nclass Lambo extends Car {\n    public void accelerate(int speedLimit) {}\n    public void accelerate() {}\n}</code></p>\n", "alternatives": [{"alternative": " neither\n", "is_correct": false}, {"alternative": " both\n", "is_correct": true}, {"alternative": " overloading\n", "is_correct": false}, {"alternative": " overriding\n</ul>\n", "is_correct": false}]}, {"question": "Q100. Which choice is the best data type for working with money in Java?\n", "alternatives": [{"alternative": " float\n", "is_correct": false}, {"alternative": " String\n", "is_correct": false}, {"alternative": " double\n", "is_correct": false}, {"alternative": " BigDecimal\n</ul>\n<p><a href=\"https://www.scaler.com/topics/java/primitive-data-types/#types-of-primitive-data-types-in-java\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q101. Which statement about constructors is not true?\n", "alternatives": [{"alternative": " A class can have multiple constructors with a different parameter list.\n", "is_correct": false}, {"alternative": " You can call another constructor with <code>this</code> or <code>super</code>.\n", "is_correct": false}, {"alternative": " A constructor does not define a return value.\n", "is_correct": false}, {"alternative": " Every class must explicitly define a constructor without parameters.\n</ul>\n", "is_correct": true}]}, {"question": "Q102. What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?\n", "alternatives": [{"alternative": " Regular Expressions\n", "is_correct": false}, {"alternative": " Reflection\n", "is_correct": false}, {"alternative": " Generics\n", "is_correct": true}, {"alternative": " Concurrency\n</ul>\n", "is_correct": false}]}, {"question": "Q103. What will be printed?\n<p>```java\npublic class Berries{</p>\n<pre><code>String berry = \"blue\";\n\npublic static void main(String[] args) {\n    new Berries().juicy(\"straw\");\n}\nvoid juicy(String berry){\n    this.berry = \"rasp\";\n    System.out.println(berry + \"berry\");\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " raspberry\n", "is_correct": false}, {"alternative": " strawberry\n", "is_correct": true}, {"alternative": " blueberry\n", "is_correct": false}, {"alternative": " rasp\n</ul>\n", "is_correct": false}]}, {"question": "Q104. What is the value of <code>forestCount</code> after this code executes?\n<p>```java\nMap<String, Integer> forestSpecies = new HashMap&lt;&gt;();</p>\n<p>forestSpecies.put(\"Amazon\", 30000);\nforestSpecies.put(\"Congo\", 10000);\nforestSpecies.put(\"Daintree\", 15000);\nforestSpecies.put(\"Amazon\", 40000);</p>\n<p>int forestCount = forestSpecies.size();\n```</p>\n", "alternatives": [{"alternative": " 3\n", "is_correct": true}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 2\n", "is_correct": false}, {"alternative": " When calling the put method, Java will throw an exception\n</ul>\n", "is_correct": false}]}, {"question": "Q105. What is a problem with this code?\n<p>```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;</p>\n<p>class Main {</p>\n<pre><code>public static void main(String[] args) {\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(\"a\", \"b\", \"c\"));\n    for(String value :list) {\n        if(value.equals(\"a\")) {\n            list.remove(value);\n        }\n    }\n    System.out.println(list); // outputs [b,c]\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " String should be compared using == method instead of equals.\n", "is_correct": false}, {"alternative": " Modifying a collection while iterating through it can throw a ConcurrentModificationException.\n", "is_correct": true}, {"alternative": " The List interface does not allow an argument of type String to be passed to the remove method.\n", "is_correct": false}, {"alternative": " ArrayList does not implement the List interface.\n</ul>\n", "is_correct": false}]}, {"question": "Q106. How do you convert this method into a lambda expression?\n<p><code>java\npublic int square(int x) {\n    return x * x;\n}</code></p>\n", "alternatives": [{"alternative": " <code>Function&lt;Integer, Integer&gt; squareLambda = (int x) -&gt; { x * x };</code>\n", "is_correct": false}, {"alternative": " <code>Function&lt;Integer, Integer&gt; squareLambda = () -&gt; { return x * x };</code>\n", "is_correct": false}, {"alternative": " <code>Function&lt;Integer, Integer&gt; squareLambda = x -&gt; x * x;</code>\n", "is_correct": true}, {"alternative": " <code>Function&lt;Integer, Integer&gt; squareLambda = x -&gt; return x * x;</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q107. Which choice is a valid implementation of this interface?\n<p><code>java\ninterface MyInterface {\n    int foo(int x);\n}</code></p>\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\npublic class MyClass implements MyInterface {\n    // ....\n    public void foo(int x){\n        System.out.println(x);\n    }\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\npublic class MyClass implements MyInterface {\n    // ....\n    public double foo(int x){\n        return x * 100;\n    }\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\npublic class MyClass implements MyInterface {\n    // ....\n    public int foo(int x){\n        return x * 100;\n    }\n}</code></p>\n<ul>\n", "is_correct": true}, {"alternative": " D\n</ul>\n<p><code>java\npublic class MyClass implements MyInterface {\n    // ....\n    public int foo(){\n        return 100;\n    }\n}</code></p>\n", "is_correct": false}]}, {"question": "Q108. What is the result of this program?\n<p>```java\ninterface Foo {\n    int x = 10;\n}</p>\n<p>public class Main{</p>\n<pre><code>public static void main(String[] args) {\n    Foo.x = 20;\n    System.out.println(Foo.x);\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " 10\n", "is_correct": false}, {"alternative": " 20\n", "is_correct": false}, {"alternative": " null\n", "is_correct": false}, {"alternative": " An error will occur when compiling.\n</ul>\n", "is_correct": true}]}, {"question": "Q109. Which statement must be inserted on line 1 to print the value true?\n<p><code>java\n1:\n2: Optional&lt;String&gt; opt = Optional.of(val);\n3: System.out.println(opt.isPresent());</code></p>\n", "alternatives": [{"alternative": " <code>Integer val = 15;</code>\n", "is_correct": false}, {"alternative": " <code>String val = \"Sam\";</code>\n", "is_correct": true}, {"alternative": " <code>String val = null;</code>\n", "is_correct": false}, {"alternative": " <code>Optional&lt;String&gt; val = Optional.empty();</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q110. What will this code print, assuming it is inside the main method of a class?\n<p><code>java\nSystem.out.println(true &amp;&amp; false || true);\nSystem.out.println(false || false &amp;&amp; true);</code></p>\n", "alternatives": [{"alternative": " false </br> true\n", "is_correct": false}, {"alternative": " true </br> true\n", "is_correct": false}, {"alternative": " true </br> false\n", "is_correct": true}, {"alternative": " false </br> false\n</ul>\n", "is_correct": false}]}, {"question": "Q111. What will this code print?\n<p>```java\nList<String> list1 = new ArrayList&lt;&gt;();\nlist1.add(\"One\");\nlist1.add(\"Two\");\nlist1.add(\"Three\");</p>\n<p>List<String> list2 = new ArrayList&lt;&gt;();\nlist2.add(\"Two\");</p>\n<p>list1.remove(list2);\nSystem.out.println(list1);\n```</p>\n", "alternatives": [{"alternative": " <code>[Two]</code>\n", "is_correct": false}, {"alternative": " <code>[One, Two, Three]</code>\n", "is_correct": true}, {"alternative": " <code>[One, Three]</code>\n", "is_correct": false}, {"alternative": " <code>Two</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q112. Which code checks whether the characters in two Strings,named <code>time</code> and <code>money</code>, are the same?\n", "alternatives": [{"alternative": " <code>if(time &lt;&gt; money){}</code>\n", "is_correct": false}, {"alternative": " <code>if(time.equals(money)){}</code>\n", "is_correct": true}, {"alternative": " <code>if(time == money){}</code>\n", "is_correct": false}, {"alternative": " <code>if(time = money){}</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q113. An <strong>_</strong> is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An <strong>_</strong> is an unexpected event that an application may be able to deal with in order to continue execution.\n", "alternatives": [{"alternative": " exception,assertion\n", "is_correct": false}, {"alternative": " AbnormalException, AccidentalException\n", "is_correct": false}, {"alternative": " error, exception\n", "is_correct": true}, {"alternative": " exception, error\n</ul>\n", "is_correct": false}]}, {"question": "Q114. Which keyword would not be allowed here?\n<p><code>java\nclass Unicorn {\n    _____ Unicorn(){}\n}</code></p>\n", "alternatives": [{"alternative": " static\n", "is_correct": true}, {"alternative": " protected\n", "is_correct": false}, {"alternative": " public\n", "is_correct": false}, {"alternative": " void\n</ul>\n", "is_correct": false}]}, {"question": "Q115. Which OOP concept is this code an example of?\n<p>```java\nList[] myLists = {\n    new ArrayList&lt;&gt;(),\n    new LinkedList&lt;&gt;(),\n    new Stack&lt;&gt;(),\n    new Vector&lt;&gt;(),\n};</p>\n<p>for (List list : myLists){\n    list.clear();\n}\n```</p>\n", "alternatives": [{"alternative": " composition\n", "is_correct": false}, {"alternative": " generics\n", "is_correct": false}, {"alternative": " polymorphism\n", "is_correct": true}, {"alternative": " encapsulation\n</ul>\n<p><strong>Explanation:</strong> switch between different implementations of the <code>List</code> interface.</p>\n", "is_correct": false}]}, {"question": "Q116. What does this code print?\n<p>```java\nString a = \"bikini\";\nString b = new String(\"bikini\");\nString c = new String(\"bikini\");</p>\n<p>System.out.println(a == b);\nSystem.out.println(b == c);\n```</p>\n", "alternatives": [{"alternative": " true; false\n", "is_correct": false}, {"alternative": " false; false\n", "is_correct": true}, {"alternative": " false; true\n", "is_correct": false}, {"alternative": " true; true\n</ul>\n<p><strong>Explanation:</strong> <code>== operator</code> compares the object reference. <code>String a = \"bikini\"; String b = \"bikini\";</code> would result in True. Here new creates a new object, so false. Use <code>equals() method</code> to compare the content.</p>\n", "is_correct": false}]}, {"question": "Q117. What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?\n", "alternatives": [{"alternative": " native\n", "is_correct": false}, {"alternative": " volatile\n", "is_correct": false}, {"alternative": " synchronized\n", "is_correct": true}, {"alternative": " lock\n</ul>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q118. Which is a valid type for this lambda function?\n<p><code>java\n_____ oddOrEven = x -&gt; {\n    return x % 2 == 0 ? \"even\" : \"odd\";\n};</code></p>\n", "alternatives": [{"alternative": " <code>Function&lt;Integer, Boolean&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Function&lt;String&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Function&lt;Integer, String&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Function&lt;Integer&gt;</code>\n</ul>\n<p><a href=\"https://github.com/0nyr/java/tree/main/examples/lambda_function\">Explaination</a>, <a href=\"https://www.geeksforgeeks.org/function-interface-in-java-with-examples/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q119. What is displayed when this code is compiled and executed?\n<p>```java\nimport java.util.HashMap;</p>\n<p>public class Main {\n    public static void main(String[] args) {\n        HashMap<String, Integer> pantry = new HashMap&lt;&gt;();</p>\n<pre><code>    pantry.put(\"Apples\", 3);\n    pantry.put(\"Oranges\", 2);\n\n    int currentApples = pantry.get(\"Apples\");\n    pantry.put(\"Apples\", currentApples + 4);\n\n    System.out.println(pantry.get(\"Apples\"));\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " 6\n", "is_correct": false}, {"alternative": " 3\n", "is_correct": false}, {"alternative": " 4\n", "is_correct": false}, {"alternative": " 7\n</ul>\n<p><a href=\"https://github.com/0nyr/java/tree/main/training/linkedin_assessment/what_is_displayed_0\">Explanation</a></p>\n", "is_correct": true}]}, {"question": "Q120. What variable type should be declared for capitalize?\n<p><code>shell\nList&lt;String&gt; songTitles = Arrays.asList(\"humble\", \"element\", \"dna\");\n_______ capitalize = (str) -&gt; str.toUpperCase();\nsongTitles.stream().map(capitalize).forEach(System.out::println);</code></p>\n", "alternatives": [{"alternative": " <code>Function&lt;String, String&gt;</code>\n", "is_correct": true}, {"alternative": " <code>Stream&lt;String&gt;</code>\n", "is_correct": false}, {"alternative": " <code>String&lt;String, String&gt;</code>\n", "is_correct": false}, {"alternative": " <code>Map&lt;String, String&gt;</code>\n</ul>\n<p><a href=\"https://github.com/0nyr/java/tree/main/training/linkedin_assessment/what_variable_type_0\">Explanation</a>, <a href=\"https://www.geeksforgeeks.org/function-interface-in-java-with-examples/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q121. Which is the correct return type for the processFunction method?\n<p><code>java\n_____ processFunction(Integer number, Function&lt;Integer, String&gt; lambda) {\n    return lambda.apply(number);\n}</code></p>\n", "alternatives": [{"alternative": " <code>Integer</code>\n", "is_correct": false}, {"alternative": " <code>String</code>\n", "is_correct": true}, {"alternative": " <code>Consumer</code>\n", "is_correct": false}, {"alternative": " <code>Function&lt;Integer, String&gt;</code>\n</ul>\n<p><a href=\"https://github.com/0nyr/java/tree/main/training/linkedin_assessment/which_return_type_0\">Explanation</a></p>\n", "is_correct": false}]}, {"question": "Q122. What function could you use to replace slashes for dashes in a list of dates?\n<p><code>java\nList&lt;String&gt; dates = new ArrayList&lt;String&gt;();\n// missing code\ndates.replaceAll(replaceSlashes);</code></p>\n", "alternatives": [{"alternative": " <code>UnaryOperator&lt;String&gt; replaceSlashes = date -&gt; date.replace(\"/\", \"-\");</code>\n", "is_correct": true}, {"alternative": " <code>Function&lt;String, String&gt; replaceSlashes = dates -&gt; dates.replace(\"-\", \"/\");</code>\n", "is_correct": false}, {"alternative": " <code>Map&lt;String, String&gt; replaceSlashes = dates.replace(\"/\", \"-\");</code>\n", "is_correct": false}, {"alternative": " <code>Consumer&lt;Date&gt; replaceSlashes = date -&gt; date.replace(\"/\", \"-\");</code>\n</ul>\n<p><strong>Explanation:</strong> <code>replaceAll</code> method for any List<T> only accepts UnaryOperator<T> to pass every single element into it then put the result into the List<T> again.</p>\n", "is_correct": false}]}, {"question": "Q123. From which class do all other classes implicitly extend?\n", "alternatives": [{"alternative": " <code>Object</code>\n", "is_correct": true}, {"alternative": " <code>Main</code>\n", "is_correct": false}, {"alternative": " <code>Java</code>\n", "is_correct": false}, {"alternative": " <code>Class</code>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/17187218/default-class-that-is-extended-by-all-classes-in-java\">Explanation</a></p>\n", "is_correct": false}]}, {"question": "Q124. How do you create and run a Thread for this class?\n<p>```java\nimport java.util.date;</p>\n<p>public class CurrentDateRunnable implements Runnable {\n    @Override\n    public void run () {\n        while (true) {\n            System.out.println(\"Current date: \" + new Date());</p>\n<pre><code>        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " <code>Thread thread = new Thread(new CurrentDateRunnable()); thread.start();</code>\n", "is_correct": true}, {"alternative": " <code>new Thread(new CurrentDateRunnable()).join();</code>\n", "is_correct": false}, {"alternative": " <code>new CurrentDateRunnable().run();</code>\n", "is_correct": false}, {"alternative": " <code>new CurrentDateRunnable().start();</code>\n</ul>\n<p><a href=\"https://www.w3schools.com/java/java_threads.asp\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q125. Which expression is a functional equivalent?\n<p>```java\nList<Integer> numbers = List.of(1,2,3,4);\nint total = 0;</p>\n<p>for (Integer x : numbers) {\n    if (x % 2 == 0)\n    total += x * x;\n}\n```</p>\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>java\nint total = numbers.stream()\n                        .transform(x -&gt; x * x)\n                        .filter(x -&gt; x % 2 == 0)\n                        .sum ();</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>java\nint total = numbers.stream()\n                        .filter(x -&gt; x % 2 == 0)\n                        .collect(Collectors.toInt());</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>java\nint total = numbers.stream()\n                        .mapToInt (x -&gt; {if (x % 2 == 0) return x * x;})\n                        .sum();</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " D\n</ul>\n<p><code>java\nint total = numbers.stream()\n                        .filter(x -&gt; x % 2 == 0)\n                        .mapToInt(x -&gt; x * x)\n                        .sum();</code></p>\n<p><strong>Explanation:</strong> The given code in the question will give you the output 20 as total:</p>\n<p><code>java\nnumbers                         // Input `List&lt;Integer&gt;` &gt; [1, 2, 3, 4]\n    .stream()                   // Converts input into `Stream&lt;Integer&gt;`\n    .filter(x -&gt; x % 2 == 0)    // Filter even numbers and return `Stream&lt;Integer&gt;` &gt; [2, 4]\n    .mapToInt(x -&gt; x * x)       // Square the number, converts `Integer` to an `int`, and returns `IntStream` &gt; [4, 16]\n    .sum()                      // Returns the sum as `int` &gt; 20</code></p>\n", "is_correct": true}]}, {"question": "Q126. Which is not one of the standard input/output streams provided by java.lang.System?\n", "alternatives": [{"alternative": " print\n", "is_correct": true}, {"alternative": " out\n", "is_correct": false}, {"alternative": " err\n", "is_correct": false}, {"alternative": " in\n</ul>\n", "is_correct": false}]}, {"question": "Q127. The compiler is complaining about this assignment of the variable pickle to the variable jar. How woulld you fix this?\n<p><code>java\ndouble pickle = 2;\nint jar = pickle;</code></p>\n", "alternatives": [{"alternative": " Use the method toInt() to convert pickle before assigning it to jar.\n", "is_correct": false}, {"alternative": " Cast pickle to an int before assigning it to jar.\n", "is_correct": true}, {"alternative": " Make pickle into a double by adding + \".0\"\n", "is_correct": false}, {"alternative": " Use the new keyword to create a new Integer from pickle before assigning it to jar.\n</ul>\n<p><a href=\"https://www.w3schools.com/java/java_type_casting.asp\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q128. What value should x have to make this loop execute 10 times?\n<p><code>java\nfor(int i=0; i&lt;30; i+=x) {}</code></p>\n", "alternatives": [{"alternative": " 10\n", "is_correct": false}, {"alternative": " 3\n", "is_correct": true}, {"alternative": " 1\n", "is_correct": false}, {"alternative": " 0\n</ul>\n", "is_correct": false}]}, {"question": "Q129. The <strong>_</strong> runs compiled Java code, while the <strong>_</strong> compiles Java files.\n", "alternatives": [{"alternative": " IDE; JRE\n", "is_correct": false}, {"alternative": " JDK; IDE\n", "is_correct": false}, {"alternative": " JRE; JDK\n", "is_correct": true}, {"alternative": " JDK; JRE\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q130. Which packages are part of Java Standard Edition\n", "alternatives": [{"alternative": " java.net\n", "is_correct": false}, {"alternative": " java.util\n", "is_correct": false}, {"alternative": " java.lang\n", "is_correct": false}, {"alternative": " All above\n</ul>\n<p><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/allpackages-index.html\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q131. What values for x and y will cause this code to print \"btc\"?\n<p><code>java\nString buy = \"bitcoin\";\nSystem.out.println(buy.substring(x, x+1) + buy.substring(y, y+2))</code></p>\n", "alternatives": [{"alternative": " int x = 0; int y = 2;\n", "is_correct": true}, {"alternative": " int x = 1; int y = 3;\n", "is_correct": false}, {"alternative": " int x = 0; int y = 3;\n", "is_correct": false}, {"alternative": " int x = 1; int y = 3;\n</ul>\n", "is_correct": false}]}, {"question": "Q132. Which keyword would you add to make this method the entry point of the program?\n", "alternatives": [{"alternative": " exception\n", "is_correct": false}, {"alternative": " args\n", "is_correct": false}, {"alternative": " static\n", "is_correct": true}, {"alternative": " String\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/java-main-method-public-static-void-main-string-args/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q133. You have a list of Bunny objects that you want to sort by weight using Collections.sort. What modification would you make to the Bunny class?\n", "alternatives": [{"alternative": " Implement the comparable interface by overriding the compareTo method.\n", "is_correct": true}, {"alternative": " Add the keyword default to the weight variable.\n", "is_correct": false}, {"alternative": " Override the equals method inside the Bunny class.\n", "is_correct": false}, {"alternative": " Implement Sortable and override the sortBy method.\n</ul>\n<p><a href=\"https://www.geeksforgeeks.org/how-to-override-compareto-method-in-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q134. Identify the incorrect Java feature.\n", "alternatives": [{"alternative": " Object oriented\n", "is_correct": false}, {"alternative": " Use of pointers\n", "is_correct": true}, {"alternative": " Dynamic\n", "is_correct": false}, {"alternative": " Architectural neural\n</ul>\n<p><a href=\"https://www.interviewbit.com/blog/features-of-java/\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q135. What is the output of this code?\n<p><code>java\nint yearsMarried = 2;\nswitch (yearsMarried) {\n   case 1:\n      System.out.println(\"paper\");\n   case 2:\n      System.out.println(\"cotton\");\n   case 3:\n      System.out.println(\"leather\");\n   default:\n      System.out.println(\"I don't gotta buy gifts for nobody!\");\n}</code></p>\n", "alternatives": [{"alternative": " cotton\n", "is_correct": false}, {"alternative": " cotton <br> leather\n", "is_correct": false}, {"alternative": " cotton <br> leather <br> I don't gotta buy gifts for nobody!\n", "is_correct": true}, {"alternative": " cotton <br> I don't gotta buy gifts for nobody!\n</ul>\n<p><a href=\"https://stackoverflow.com/a/8564008\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q136. What language feature do these expressions demonstrate?\n<p><code>System.out::println\nDoggie::fetch</code></p>\n", "alternatives": [{"alternative": " condensed invocation\n", "is_correct": false}, {"alternative": " static references\n", "is_correct": false}, {"alternative": " method references\n", "is_correct": true}, {"alternative": " bad code\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/31020269/what-is-the-use-of-system-outprintln-in-java-8\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q137. What is the difference between the wait() and sleep methods?\n", "alternatives": [{"alternative": " Only Threads can wait, but any Object can be put to sleep.\n", "is_correct": false}, {"alternative": " A wait can be woken up by another Thread calling notify whereas a sleep cannot.\n", "is_correct": false}, {"alternative": " When things go wrong, sleep throws an IllegalMonitorStateException whereas wait throws an InterruptedException.\n", "is_correct": true}, {"alternative": " Sleep allows for multi-threading whereas wait does not.\n</ul>\n", "is_correct": false}]}, {"question": "Q138. Which is the right way to declare an enumeration of cats?\n", "alternatives": [{"alternative": " enum Cats (SPHYNX, SIAMESE, BENGAL);\n", "is_correct": false}, {"alternative": " enum Cats (\"sphynx\", \"siamese\", \"bengal\");\n", "is_correct": false}, {"alternative": " enum Cats {SPHYNX, SIAMESE, BENGAL}\n", "is_correct": true}, {"alternative": " enum Cats {\"sphynx\",\"siamese\",\"bengal}\n</ul>\n", "is_correct": false}]}, {"question": "Q139. What happens when this code is run?\n<p><code>java\nList&lt;String&gt; horses = new ArrayList&lt;String&gt;();\nhorses.add (\" Sea Biscuit \");\nSystem.out.println(horses.get(1).trim());</code></p>\n", "alternatives": [{"alternative": " \"Sea Biscuit\" will be printed.\n", "is_correct": false}, {"alternative": " \" Sea Biscuit \" will be printed.\n", "is_correct": false}, {"alternative": " An IndexOutOfBoundsException will be thrown.\n", "is_correct": true}, {"alternative": " A NullPointerException will be thrown.\n</ul>\n", "is_correct": false}]}, {"question": "Q140. Which data structure would you choose to associate the amount of rainfall with each month?\n", "alternatives": [{"alternative": " Vector\n", "is_correct": false}, {"alternative": " LinkedList\n", "is_correct": false}, {"alternative": " Map\n", "is_correct": true}, {"alternative": " Queue\n</ul>\n<p><strong>Explanation:</strong></p>\n<blockquote>\n<p>from @yktsang01 in #3915 thread</p>\n</blockquote>\n<p>Map because map is a key/value pair without creating new classes/objects. So can store the rainfall per month like <code>Map&lt;java.time.Month, Double&gt;</code>.\nThe other options will most likely need some new class to be meaningful:</p>\n<p><code>java\npublic class Rainfall {\n    private java.time.Month month;\n    private double rainfall;\n}\nVector&lt;Rainfall&gt;\nLinkedList&lt;Rainfall&gt;\nQueue&lt;Rainfall&gt;</code></p>\n", "is_correct": false}]}, {"question": "Q141. Among the following which contains date information?\n", "alternatives": [{"alternative": " java.sql timestamp\n", "is_correct": true}, {"alternative": " java.io time\n", "is_correct": false}, {"alternative": " java.io.timestamp\n", "is_correct": false}, {"alternative": " java.sql.time\n</ul>\n", "is_correct": false}]}, {"question": "Q142. What is the size of float and double in java?\n", "alternatives": [{"alternative": " 32 and 64\n", "is_correct": true}, {"alternative": " 32 and 32\n", "is_correct": false}, {"alternative": " 64 and 64\n", "is_correct": false}, {"alternative": " 64 and 32\n</ul>\n", "is_correct": false}]}, {"question": "Q143. When you pass an object reference as an argument to a method call what gets passed?\n", "alternatives": [{"alternative": " a reference to a copy\n", "is_correct": false}, {"alternative": " a copy of the reference\n", "is_correct": false}, {"alternative": " the object itself\n", "is_correct": false}, {"alternative": " the original reference\n</ul>\n", "is_correct": true}]}, {"question": "Q144. Which choice demonstrates a valid way to create a reference to a static function of another class?\n", "alternatives": [{"alternative": " Function<Integer, Integer> funcReference = MyClass::myFunction;\n", "is_correct": true}, {"alternative": " Function<Integer, Integer> funcReference = MyClass.myFunction;\n", "is_correct": false}, {"alternative": " Function<Integer, Integer> funcReference = MyClass().myFunction();\n", "is_correct": false}, {"alternative": " Function<Integer, Integer> funcReference = MyClass::myFunction();\n</ul>\n", "is_correct": false}]}, {"question": "Q145. What is UNICODE?\n", "alternatives": [{"alternative": " Unicode is used for external representation of words and strings\n", "is_correct": false}, {"alternative": " Unicode is used for internal representation of characters and strings\n", "is_correct": false}, {"alternative": " Unicode is used for external representation of characters and strings\n", "is_correct": true}, {"alternative": " Unicode is used for internal representation of words and strings\n</ul>\n", "is_correct": false}]}, {"question": "Q146. What kind of thread is the Garbage collector thread?\n", "alternatives": [{"alternative": " User thread\n", "is_correct": false}, {"alternative": " Daemon thread\n", "is_correct": true}, {"alternative": " Both\n", "is_correct": false}, {"alternative": " None of these\n</ul>\n", "is_correct": false}]}, {"question": "Q147. What is HashMap and Map?\n", "alternatives": [{"alternative": " HashMap is Interface and map is class that implements that\n", "is_correct": false}, {"alternative": " HashMap is class and map is interface that implements that\n", "is_correct": true}, {"alternative": " Map is class and Hashmap is interface that implements that\n", "is_correct": false}, {"alternative": " Map is Interface and Hashmap is class that implements that\n</ul>\n", "is_correct": true}]}, {"question": "Q148. What invokes a thread's run() method?\n", "alternatives": [{"alternative": " JVM invokes the thread's run() method when the thread is initially executed.\n", "is_correct": false}, {"alternative": " Main application running the thread.\n", "is_correct": false}, {"alternative": " start() method of the thread class.\n", "is_correct": true}, {"alternative": " None of the above.\n</ul>\n<p><strong>Explanation:</strong> After a thread is started, via its <code>start()</code> method of the Thread class, the JVM invokes the thread's <code>run()</code> method when the thread is initially executed.</p>\n", "is_correct": false}]}, {"question": "Q149. What is true about a final class?\n", "alternatives": [{"alternative": " class declared final is a final class.\n", "is_correct": false}, {"alternative": " Final classes are created so the methods implemented by that class cannot be overriddden.\n", "is_correct": false}, {"alternative": " It can't be inherited.\n", "is_correct": false}, {"alternative": " All of the above.\n</ul>\n<p><strong>Explanation:</strong> Final classes are created so the methods implemented by that class cannot be overridden. It can't be inherited. These classes are declared <code>final</code>.</p>\n", "is_correct": true}]}, {"question": "Q150. Which method can be used to find the highest value of x and y?\n", "alternatives": [{"alternative": " Math.largest(x,y)\n", "is_correct": false}, {"alternative": " Math.maxNum(x,y)\n", "is_correct": false}, {"alternative": " Math.max(x,y)\n", "is_correct": true}, {"alternative": " Math.maximum(x,y)\n</ul>\n", "is_correct": false}]}, {"question": "Q151. <code>void accept(T t)</code> is method of -?\n", "alternatives": [{"alternative": " Consumer\n", "is_correct": true}, {"alternative": " Producer\n", "is_correct": false}, {"alternative": " Both\n", "is_correct": false}, {"alternative": " None\n</ul>\n", "is_correct": false}]}, {"question": "Q152. Which of these does <code>Stream filter()</code> operates on?\n", "alternatives": [{"alternative": " Predicate\n", "is_correct": true}, {"alternative": " Interface\n", "is_correct": false}, {"alternative": " Class\n", "is_correct": false}, {"alternative": " Methods\n</ul>\n", "is_correct": false}]}, {"question": "Q153. Which of these does <code>Stream map()</code> operates on?\n", "alternatives": [{"alternative": " Class\n", "is_correct": false}, {"alternative": " Interface\n", "is_correct": false}, {"alternative": " Predicate\n", "is_correct": false}, {"alternative": " Function\n</ul>\n", "is_correct": true}]}, {"question": "Q154. What code is needed at line 8?\n<p>```java\n1: class Main {</p>\n<p>2:      public static void main(String[] args) {</p>\n<p>3:          Map<String, Integer> map = new HashMap&lt;&gt;();\n4:          map.put(\"a\", 1);\n5:          map.put(\"b\", 2);\n6:          map.put(\"c\", 3);</p>\n<p>7:          int result = 0;</p>\n<p>8:\n9:              result += entry.getValue();\n10:         }</p>\n<p>11:         System.out.println(result); // outputs 6\n12:     }\n13: }\n```</p>\n", "alternatives": [{"alternative": " for(MapEntry<String, Integer> entry: map.entrySet()) {\n", "is_correct": false}, {"alternative": " for(String entry: map) {\n", "is_correct": false}, {"alternative": " for(Integer entry: map.values()) {\n", "is_correct": false}, {"alternative": " for(Entry<String, Integer> entry: map.entrySet()) {\n</ul>\n", "is_correct": true}]}, {"question": "Q155. What will print when Lambo is instantiated?\n<p>```java\nclass Car {\n    String color = \"blue\";\n}</p>\n<p>class Lambo extends Car {\n    String color = \"white\";</p>\n<pre><code>public Lambo() {\n    System.out.println(super.color);\n    System.out.println(this.color);\n    System.out.println(color);\n}\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " blue\n      white\n      white\n", "is_correct": true}, {"alternative": " blue\n      white\n      blue\n", "is_correct": false}, {"alternative": " white\n      white\n      white\n", "is_correct": false}, {"alternative": " white\n      white\n      blue\n</ul>\n<h3>Q156. Which command will run a FrogSounds app that someone emailed to you as a jar?</h3>\n<ul>\n", "is_correct": false}, {"alternative": " jar FrogSounds.java\n", "is_correct": false}, {"alternative": " javac FrogSounds.exe\n", "is_correct": false}, {"alternative": " jar cf FrogSounds.jar\n", "is_correct": false}, {"alternative": " java -jar FrogSounds.jar\n</ul>\n", "is_correct": true}]}, {"question": "Q157. What is the default value of short variable?\n", "alternatives": [{"alternative": " 0\n", "is_correct": true}, {"alternative": " 0.0\n", "is_correct": false}, {"alternative": " null\n", "is_correct": false}, {"alternative": " undefined\n</ul>\n", "is_correct": false}]}, {"question": "Q158. What will be the output of the following Java program?\n<p><code>java\nclass variable_scope {\n    public static void main(String args[]) {\n        int x;\n        x = 5;\n        {\n            int y = 6;\n            System.out.print(x + \" \" + y);\n        }\n        System.out.println(x + \" \" + y);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " Compilation Error\n", "is_correct": true}, {"alternative": " Runtime Error\n", "is_correct": false}, {"alternative": " 5 6 5 6\n", "is_correct": false}, {"alternative": " 5 6 5\n</ul>\n<p><strong>Explanation:</strong> Scope of variable Y is limited.</p>\n", "is_correct": false}]}, {"question": "Q159. Subclasses of an abstract class are created using the keyword <strong>_</strong>.\n", "alternatives": [{"alternative": " extends\n", "is_correct": true}, {"alternative": " abstracts\n", "is_correct": false}, {"alternative": " interfaces\n", "is_correct": false}, {"alternative": " implements\n</ul>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html\">Reference</a></p>\n", "is_correct": false}]}, {"question": "Q160. What will be the output of the following program?\n<p><code>java\nimport java.util.Formatter;\npublic class Course {\n    public static void main(String[] args) {\n        Formatter data = new Formatter();\n        data.format(\"course %s\", \"java \");\n        System.out.println(data);\n        data.format(\"tutorial %s\", \"Merit campus\");\n        System.out.println(data);\n    }\n}</code></p>\n", "alternatives": [{"alternative": " course java\n      tutorial Merit campus\n", "is_correct": false}, {"alternative": " course java\n      course java tutorial Merit campus\n", "is_correct": true}, {"alternative": " Compilation Error\n", "is_correct": false}, {"alternative": " Runtime Error\n</ul>\n", "is_correct": false}]}, {"question": "Q161. Calculate the time complexity of the following program.\n<p><code>java\n void printUnorderedPairs(int[] arrayA, int[] arrayB){\n    for(int i = 0; i &lt; arrayA.length; i++){\n        for(int  j = 0; j &lt; arrayB.length; j++){\n            if(arrayA[i] &lt; arrayB[j]){\n                System.out.println(arrayA[i] + \",\" + arrayB[j]);\n            }\n        }\n    }\n }</code></p>\n", "alternatives": [{"alternative": " O(N*N)\n", "is_correct": false}, {"alternative": " O(1)\n", "is_correct": false}, {"alternative": " O(AB)\n", "is_correct": true}, {"alternative": " O(A*B)\n</ul>\n", "is_correct": false}]}, {"question": "Q162. What do these expressions evaluate to?\n<pre><code>1. true &amp;&amp; false\n2. true &amp;&amp; false || true\n</code></pre>\n", "alternatives": [{"alternative": " 1. false 2. true\n", "is_correct": true}, {"alternative": " 1. false 2. false\n", "is_correct": false}, {"alternative": " 1. true 2. false\n", "is_correct": false}, {"alternative": " 1. true 2. true\n</ul>\n<p><a href=\"http://englishonlineclub.com/pdf/Cracking%20the%20Coding%20Interview%20-%20189%20Programming%20Questions%20and%20Solutions%20(6th%20Edition)%20[EnglishOnlineClub.com].pdf\">Reference</a> //check page number 47 and example number 4.:-}</p>", "is_correct": false}]}]}