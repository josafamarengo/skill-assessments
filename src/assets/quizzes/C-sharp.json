{"title": "C", "questions": [{"question": "Q1. In which of these situations are interfaces better than abstract classes?\n", "alternatives": [{"alternative": " When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.\n", "is_correct": false}, {"alternative": " Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.\n", "is_correct": false}, {"alternative": " When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.\n", "is_correct": true}, {"alternative": " You should use both an interface and an abstract class when defining any complex object.\n</ul>\n", "is_correct": false}]}, {"question": "Q2. Which statement is true of delegates?\n", "alternatives": [{"alternative": " Delegates are not supported in the current version of C#\n", "is_correct": false}, {"alternative": " They cannot be used as callbacks.\n", "is_correct": false}, {"alternative": " Only variables can be passed to delegates as parameters.\n", "is_correct": false}, {"alternative": " They can be chained together.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/#delegates-overview\">Official documentation: Delegates</a></p>\n", "is_correct": true}]}, {"question": "Q3. Which choice best defines C#'s asynchronous programming model?\n", "alternatives": [{"alternative": " reactive\n", "is_correct": false}, {"alternative": " inherited callback\n", "is_correct": false}, {"alternative": " task-based\n", "is_correct": true}, {"alternative": " callback-based\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model\">Official documentation: Task asynchronous programming model</a> resposta correta --&gt; var contacts = new List<string>();</p>\n", "is_correct": false}]}, {"question": "Q4. How would you determine if a class has a particular attribute?\n", "alternatives": [{"alternative": " .\n</ul>\n<p><code>cs\nvar type = typeof(SomeType);\nvar attribute = type.GetCustomAttribute&lt;SomeAttribute&gt;();</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " .\n</ul>\n<p><code>cs\nvar typeof(MyPresentationModel).Should().BeDecoratedWith&lt;SomeAttribute&gt;();</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " .\n</ul>\n<p><code>cs\nAttribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute)</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " .\n</ul>\n<p><code>cs\nAttribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))</code></p>\n<ol>\n", "is_correct": true}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.attribute?view=net-5.0\">Official documentation: Attribute Class</a>\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.attribute.getcustomattribute?view=net-5.0\">Official documentation: Attribute.GetCustomAttribute Method</a>\n</ol>\n", "is_correct": false}]}, {"question": "Q5. What is the difference between the ref and out keywords?\n", "alternatives": [{"alternative": " Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.\n", "is_correct": false}, {"alternative": " Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.\n", "is_correct": false}, {"alternative": " Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.\n", "is_correct": true}, {"alternative": "\n<p> Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\">Official documentation: ref</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\">Official documentation: out parameter modifier</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q6. How could you retrieve information about a class, as well as create an instance at runtime?\n", "alternatives": [{"alternative": " reflection\n", "is_correct": true}, {"alternative": " serialization\n", "is_correct": false}, {"alternative": " abstraction\n", "is_correct": false}, {"alternative": " dependency injection\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection\">Official documentation: Reflection </a></p>\n", "is_correct": false}]}, {"question": "Q7. What is this code an example of?\n<p>```cs\n    private static object objA;\n    private static object objB;</p>\n<pre><code>private static void performTaskA()\n{\n    lock (objB)\n    {\n        Thread.Sleep(1000);\n        lock (objA) { }\n    }\n}\n\nprivate static void PerformTaskB()\n{\n    lock (objA)\n    {\n        lock (objB) { }\n    }\n}\n</code></pre>\n<p>```</p>\n", "alternatives": [{"alternative": " a private class that uses multithreading\n", "is_correct": false}, {"alternative": " multithread coding\n", "is_correct": false}, {"alternative": " thread mismanagement\n", "is_correct": false}, {"alternative": " a potential deadlock\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions\">Official documentation: Deadlocks and race conditions</a></p>\n", "is_correct": true}]}, {"question": "Q8. What is the difference between an anonymous type and a regular data type?\n", "alternatives": [{"alternative": " Anonymous types don't have type names\n", "is_correct": true}, {"alternative": " Anonymous types can only be static\n", "is_correct": false}, {"alternative": " Anonymous types can be used only in struts\n", "is_correct": false}, {"alternative": " Anonymous types don't work with LINQ.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types\">Official documentation: Anonymous Types</a></p>\n", "is_correct": false}]}, {"question": "Q9. When would you use a Dictionary rather that an Array type in your application?\n", "alternatives": [{"alternative": " when you need a jagged collection structure\n", "is_correct": false}, {"alternative": " when you need to store values of the same type\n", "is_correct": false}, {"alternative": " when you need to store key-value pairs rather than single values\n", "is_correct": true}, {"alternative": " when you need an ordered, searchable list\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-5.0\">Official documentation: Dictionary<TKey,TValue> Class</a></p>\n", "is_correct": false}]}, {"question": "Q10. What is the difference between a.Equals(b) and a == b?\n", "alternatives": [{"alternative": " The .Equals method compares reference identities while the <code>==</code> compares contents.\n", "is_correct": false}, {"alternative": " The .Equals method compares primitive values while <code>==</code> compares all values.\n", "is_correct": false}, {"alternative": " The .Equals method compares contents while <code>==</code> compares reference identity.\n", "is_correct": true}, {"alternative": "\n<p> The .Equals method compares reference type while <code>==</code> compares primitive value types</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.object.equals\">Official documentation: Object.Equals</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://www.c-sharpcorner.com/UploadFile/3d39b4/difference-between-operator-and-equals-method-in-C-Sharp\">c-sharpcorner: Equality Operator(==) vs .Equals()</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q11. Which choice best describes a deadlock situation?\n", "alternatives": [{"alternative": " when you try to instantiate two objects at the same time in the same class or struct\n", "is_correct": false}, {"alternative": " when you are trying to execute an action after a user event is registered\n", "is_correct": false}, {"alternative": " when simultaneous instructions are waiting on each other to finish before executing\n", "is_correct": true}, {"alternative": " when you try to execute a series of events simultaneously on multiple threads\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions\">Official documentation: Deadlocks and race conditions</a></p>\n", "is_correct": false}]}, {"question": "Q12. How does the async keyword work?\n", "alternatives": [{"alternative": " It allows access to asynchronous methods in the C# API\n", "is_correct": false}, {"alternative": " It allows thread pooling and synchronous processes in static classes.\n", "is_correct": false}, {"alternative": " It allows the await keyword to be used in a method\n", "is_correct": true}, {"alternative": " It allows access to synchronous methods in the C# API\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\">Official documentation: async</a></p>\n", "is_correct": false}]}, {"question": "Q13. What is an object in C#?\n", "alternatives": [{"alternative": " a class or struct, including its variables and functions\n", "is_correct": false}, {"alternative": " a primitive data type that can be created only at compile time\n", "is_correct": false}, {"alternative": " a value type that can be used only with an abstract class\n", "is_correct": false}, {"alternative": " an instance of a class or struct that includes fields, properties, and/or methods\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/objects\">Official documentation: Objects</a></p>\n", "is_correct": true}]}, {"question": "Q14. Which code snippet declares an anonymous type named userData?\n", "alternatives": [{"alternative": " <code>var&lt;&lt;!----&gt;T&gt; userData = new &lt;&lt;!----&gt;T&gt; { name = \"John\", age = 32 };</code>\n", "is_correct": false}, {"alternative": " <code>var userData = new { name = \"John\", age = 32 };</code>\n", "is_correct": true}, {"alternative": " <code>AType userData = new AType { name = \"John\", age = 32 };</code>\n", "is_correct": false}, {"alternative": " <code>Anonymous&lt;T&gt; userData = new Anonymous&lt;T&gt; { name = \"John\", age = 32 };</code>\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types\">Official documentation: Anonymous Types</a></p>\n", "is_correct": false}]}, {"question": "Q15. What will be returned when this method is executed?\n<p><code>public void userInput(string charParameters) { }</code></p>\n", "alternatives": [{"alternative": " nothing\n", "is_correct": true}, {"alternative": " a Boolean\n", "is_correct": false}, {"alternative": " a string variable\n", "is_correct": false}, {"alternative": " an integer\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void\">Official documentation: void</a></p>\n", "is_correct": false}]}, {"question": "Q16. In what order would the employee names in this example be printed to the console?\n<p>```cs\nstring[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" };</p>\n<p>IEnumerable<string> employeeQuery = from person in employees\n                                    orderby person\n                                    select person;</p>\n<p>foreach(string employee in employeeQuery)\n{\n    Console.WriteLine(employee);\n}\n```</p>\n", "alternatives": [{"alternative": " ascending\n", "is_correct": true}, {"alternative": " unordered\n", "is_correct": false}, {"alternative": " descending\n", "is_correct": false}, {"alternative": " first in, first out\n</ul>\n<p><a href=\"http://dotnetpattern.com/linq-orderby-operator\">dotnetpattern: LINQ OrderBy Operator</a></p>\n", "is_correct": false}]}, {"question": "Q17. Lambda expressions are often used in tandem with which of the following?\n", "alternatives": [{"alternative": " Namespaces\n", "is_correct": false}, {"alternative": " LINQ\n", "is_correct": true}, {"alternative": " Type Aliasing\n", "is_correct": false}, {"alternative": " Assemblies\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">Official documentation: Language Integrated Query (LINQ) Overview</a></p>\n", "is_correct": false}]}, {"question": "Q18. What is the correct formatting for single line and multiline comments?\n", "alternatives": [{"alternative": " <code>/_/ - Single Line</code>\n      <code>/_ - Multiline</code>\n", "is_correct": false}, {"alternative": " <code>// Multiline</code>\n      <code>/_ Single Line _/</code>\n", "is_correct": false}, {"alternative": " <code>//\\* Multiline</code>\n      <code>/ Single Line</code>\n", "is_correct": false}, {"alternative": " <code>// Single Line</code>\n      <code>/* Multiline */</code>\n</ul>\n<p><a href=\"https://www.w3schools.com/cs/cs_comments.php\">w3schools: C# Comments</a></p>\n", "is_correct": true}]}, {"question": "Q19. How do you make a method in an abstract class overridable?\n", "alternatives": [{"alternative": " Make it public\n", "is_correct": false}, {"alternative": " Make it static\n", "is_correct": false}, {"alternative": " Make it private\n", "is_correct": false}, {"alternative": "\n<p> Make it virtual</p>\n\n", "is_correct": true}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual\">Official documentation: virtual</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\">Official documentation: abstract</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q20. How would you write code for an integer property called Age with a getter and setter?\n", "alternatives": [{"alternative": " public int Age { get - set }\n", "is_correct": false}, {"alternative": " public int Age: get set;\n", "is_correct": false}, {"alternative": " public int Age (get, set );\n", "is_correct": false}, {"alternative": " public int Age { get; set; }\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties\">Official documentation: Using Properties</a></p>\n", "is_correct": true}]}, {"question": "Q21. What is an abstract class?\n", "alternatives": [{"alternative": " a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)\n", "is_correct": false}, {"alternative": " something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class\n", "is_correct": false}, {"alternative": " a class that is denoted by the virtual keyword\n", "is_correct": false}, {"alternative": " a class that can be used only as base class\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members\">Official documentation: Abstract and Sealed Classes and Class Members</a></p>\n", "is_correct": true}]}, {"question": "Q22. When using a thread pool what happens to a given thread after it finishes its task?\n", "alternatives": [{"alternative": " The thread is destroyed and memory is freed up.\n", "is_correct": false}, {"alternative": " The thread runs in loop until the next assignment.\n", "is_correct": false}, {"alternative": " The thread goes inactive in the background and waits for garbage collection.\n", "is_correct": false}, {"alternative": " The thread returns to the pool for reuse.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool#thread-pool-characteristics\">Official documentation: Thread pool characteristics</a></p>\n", "is_correct": true}]}, {"question": "Q23. Which choice represents a class that inherits behavior from a base class?\n", "alternatives": [{"alternative": " a second base class\n", "is_correct": false}, {"alternative": " a revised class\n", "is_correct": false}, {"alternative": " a derived class\n", "is_correct": true}, {"alternative": " a parent class\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance\">Official documentation: Inheritance</a></p>\n", "is_correct": false}]}, {"question": "Q24. What does operator overloading allow you to do?\n", "alternatives": [{"alternative": " hide built-in operators when necessary\n", "is_correct": false}, {"alternative": " add methods to be interpreted by the compiler at runtime\n", "is_correct": false}, {"alternative": " define how enums and other primitive value types work within the rest of the application\n", "is_correct": false}, {"alternative": " define custom functionality for common operators like addition and equality\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\">Official documentation: Operator overloading</a></p>\n", "is_correct": true}]}, {"question": "Q25. What is the main purpose of LINQ?\n", "alternatives": [{"alternative": " to delete duplicate data\n", "is_correct": false}, {"alternative": " to bind namespaces and assemblies\n", "is_correct": false}, {"alternative": " to query and transform data\n", "is_correct": true}, {"alternative": " to connect assemblies\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/#query-expression-overview\">Official documentation: Language Integrated Query (LINQ) Overview</a></p>\n", "is_correct": false}]}, {"question": "Q26. What is the correct syntax for a new generic list of strings named contacts?\n", "alternatives": [{"alternative": " public List<string names> contacts = new List<string names>();\n", "is_correct": false}, {"alternative": " public List(string names) contacts = new List(string names)();\n", "is_correct": false}, {"alternative": " var contacts = new List<string>();\n", "is_correct": true}, {"alternative": " var contacts = new List(string);\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0\">Official documentation: List<T> Class</a></p>\n", "is_correct": false}]}, {"question": "Q27. What is the difference between throw exceptions and throw clauses?\n", "alternatives": [{"alternative": " Throw clauses fire only at runtime, while throw exceptions can fire at any time.\n", "is_correct": false}, {"alternative": " Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.\n", "is_correct": true}, {"alternative": " Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.\n", "is_correct": false}, {"alternative": "\n<p> Throw exceptions fire only at runtime, while throw clauses can fire during compile time.</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\">Official documentation: throw</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://www.c-sharpcorner.com/UploadFile/akkiraju/difference-between-throw-exception-and-throw-clause/\">c-sharpcorner: Difference Between Throw Exception and Throw Clause</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q28. When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?\n", "alternatives": [{"alternative": " The return yield statement is missing at the end of the method.\n", "is_correct": false}, {"alternative": " The method is missing an await keyword in its body.\n", "is_correct": true}, {"alternative": " The wait keyword is missing from the end of the method.\n", "is_correct": false}, {"alternative": " The yield keyword is missing from the method.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/#start-tasks-concurrently\">Official documentation: Starting tasks concurrently</a></p>\n", "is_correct": false}]}, {"question": "Q29. What are C# events?\n", "alternatives": [{"alternative": " system actions that communicate directly with the compiler at runtime\n", "is_correct": false}, {"alternative": " actions that execute when the code compiles, generating logs and test output\n", "is_correct": false}, {"alternative": " actions that generate notifications, which are sent to their registered listeners\n", "is_correct": true}, {"alternative": " user-only methods that send data to the application's back end\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/events-overview\">Official documentation: Introduction to events</a></p>\n", "is_correct": false}]}, {"question": "Q30. What kind of values can arrays store?\n", "alternatives": [{"alternative": " unordered collections of numeric values\n", "is_correct": false}, {"alternative": " key-value pairs of any C# supported type\n", "is_correct": false}, {"alternative": " class and struct instances\n", "is_correct": false}, {"alternative": " multiple variables, or collections, of the same type\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/\">Official documentation: Arrays</a></p>\n", "is_correct": true}]}, {"question": "Q31. Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?\n<p><code>enum AppState { OffLine, Loading, Ready }</code></p>\n", "alternatives": [{"alternative": " string currentState = (string)AppState.Loading;\n", "is_correct": false}, {"alternative": " string currentState = AppState.Loading.integralVal;\n", "is_correct": false}, {"alternative": " int currentState = AppState.Loading.rawValue;\n", "is_correct": false}, {"alternative": " int currentState = (int)AppState.Loading;\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#conversions\">Official documentation: Enumeration types</a></p>\n", "is_correct": true}]}, {"question": "Q32. What character would you use to start a regular expression pattern at a word boundary?\n", "alternatives": [{"alternative": " d\n", "is_correct": false}, {"alternative": " \\a\n", "is_correct": false}, {"alternative": " \\b\n", "is_correct": true}, {"alternative": "\n<p> \\w</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://www.regular-expressions.info/wordboundaries.html\">regular-expressions: Word Boundaries</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference\">Official documentation: Regular Expression Language - Quick Reference</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q33. To conform to the following interface, which of its members need to be implemented?\n<p><code>cs\npublic interface INameable\n{\n    string FirstName { get; set; }\n    string LastName { get; }\n}</code></p>\n", "alternatives": [{"alternative": " Both the FirstName and LastName properties need to be implemented.\n", "is_correct": true}, {"alternative": " Neither, they are both optional.\n", "is_correct": false}, {"alternative": " Only the LastName property needs to be implemented.\n", "is_correct": false}, {"alternative": " Only the FirstName property needs to be implemented.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\">Official documentation: interface</a></p>\n", "is_correct": false}]}, {"question": "Q34. You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?\n", "alternatives": [{"alternative": " at runtime\n", "is_correct": false}, {"alternative": " at compile time\n", "is_correct": false}, {"alternative": " only when required\n", "is_correct": true}, {"alternative": "\n<p> only when programmatically loaded</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/framework/deployment/best-practices-for-assembly-loading\">Official documentation: Assembly Loading</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://stackoverflow.com/questions/21914692/when-exactly-are-assemblies-loaded\">Stackoverflow : When exactly are assemblies loaded?</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q35. What is most accurate description of a regular expression?\n", "alternatives": [{"alternative": " A regular expression is a C# tool used to parse HTML\n", "is_correct": false}, {"alternative": " A regular expression is a special text string for describing a search patters.\n", "is_correct": true}, {"alternative": " A regular expression allows a variable to be passed by reference.\n", "is_correct": false}, {"alternative": "\n<p> A regular expression allows a class to conform to the Equatable protocol.</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference\">Official documentation: Regular Expression Language - Quick Reference</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\">Official documentation: .NET regular expressions</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q36. Why would you use a class field in C\n", "alternatives": [{"alternative": " To define behaviours of the class\n", "is_correct": false}, {"alternative": " To hold information and data contained in the class object\n", "is_correct": true}, {"alternative": " To communicate between classes and object\n", "is_correct": false}, {"alternative": " To store the class definition value\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes\">Official documentation: Introduction to classes</a></p>\n", "is_correct": false}]}, {"question": "Q37. When would you use generics in your code?\n", "alternatives": [{"alternative": " to increase code performance\n", "is_correct": false}, {"alternative": " all of these answers\n", "is_correct": true}, {"alternative": " when code reuse is a priority\n", "is_correct": false}, {"alternative": " when type safety is important\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics\">Official documentation: Generic classes and methods</a></p>\n", "is_correct": false}]}, {"question": "Q38. What prints to the console when this code is executed?\n<p>```cs\npublic delegate void AuthCallback(bool validUser);\npublic static AuthCallback loginCallback = Login;\npublic static void Login()\n{\n    Console.WriteLine(\"Valid user!\");\n}</p>\n<p>public static void Main(string[] args)\n{\n    loginCallback(true);\n}\n```</p>\n", "alternatives": [{"alternative": " Login successful...\n", "is_correct": false}, {"alternative": " Valid user!\n", "is_correct": false}, {"alternative": " an error, because the method signature of Login doesn't match the delegate\n", "is_correct": true}, {"alternative": "\n<p> Login successful... Valid user!</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/delegates-overview\">Official documentation: Introduction to Delegates</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/events-overview\">Official documentation: Introduction to Events</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q39. How would you declare a sealed class named User?\n", "alternatives": [{"alternative": " public class User {}\n", "is_correct": false}, {"alternative": " abstract User {}\n", "is_correct": false}, {"alternative": " sealed class User {}\n", "is_correct": true}, {"alternative": " private sealed class User {}\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members\">Official documentation: Abstract and Sealed Classes and Class Members</a></p>\n", "is_correct": false}]}, {"question": "Q40. What is the difference between non-static and static classes?\n", "alternatives": [{"alternative": " non-static classes need to be initialized before use, while static classes do not\n", "is_correct": true}, {"alternative": " non-static classes are accessible only from an interface while static classes are accessible from anywhere\n", "is_correct": false}, {"alternative": " non-static classes need to initialize all class members at runtime, while static classes do not\n", "is_correct": false}, {"alternative": "\n<p> non-static classes do not need to be initialized while static classes do</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://stackoverflow.com/questions/20451554/whats-the-function-of-a-static-constructor-in-a-non-static-class\">stackoverflow</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors\">Official documentation: Static Constructors</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q41. Which characteristic prevents this code from compiling?\n<p><code>public int age=\"28\"</code></p>\n", "alternatives": [{"alternative": " type safety\n", "is_correct": true}, {"alternative": " single inheritance\n", "is_correct": false}, {"alternative": " dependency injection\n", "is_correct": false}, {"alternative": " multiple inheritance\n</ul>\n<p><a href=\"https://www.c-sharpcorner.com/UploadFile/vikie4u/type-safety-in-net/\">c-sharpcorner: Type Safety in .NET</a></p>\n", "is_correct": false}]}, {"question": "Q42. How would you serialize this class?\n<p><code>public class User {}</code></p>\n", "alternatives": [{"alternative": " Mark the User class with the <code>DeserializableAttribute</code>.\n", "is_correct": false}, {"alternative": " Declare the class as <code>public serializable class User {}</code>.\n", "is_correct": false}, {"alternative": " Mark the User class with the <code>SerializableAttribute</code> attribute.\n", "is_correct": true}, {"alternative": " Declare the class as <code>private serializable class User {}</code>.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute?view=net-5.0\">Official documentation: SerializableAttribute Class</a></p>\n", "is_correct": false}]}, {"question": "Q43. How would you write a delegate named ResultCallback with an int parameter named responseCode?\n", "alternatives": [{"alternative": " public delegate ResultCallback(int responseCode);\n", "is_correct": false}, {"alternative": " public delegate void ResultCallback&lt;(int) responseCode&gt;;\n", "is_correct": false}, {"alternative": " public void delegate ResultCallback\\&lt;int responseCode&gt;;\n", "is_correct": false}, {"alternative": " public delegate void ResultCallback(int responseCode);\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/\">Official documentation: Delegates</a></p>\n", "is_correct": true}]}, {"question": "Q44. What is the difference between a static and non-static method?\n", "alternatives": [{"alternative": " non-static methods always need to have a void return type\n", "is_correct": false}, {"alternative": " non-static methods do not have access to static member variables\n", "is_correct": false}, {"alternative": " static methods do not have to instantiate an instance of the class to call the method\n", "is_correct": true}, {"alternative": " static methods always have to be public\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members#static-members\">Official documentation: Static Members</a></p>\n", "is_correct": false}]}, {"question": "Q45. What is the correct way to write an event named apiResult based on a delegate named ResultCallback?\n", "alternatives": [{"alternative": " public void event ResultCallback apiResult;\n", "is_correct": false}, {"alternative": " public event ResultCallback(() -&gt; apiResult);\n", "is_correct": false}, {"alternative": " public event void ResultCallback\n", "is_correct": false}, {"alternative": " public event ResultCallback apiResult;\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/events-overview\">Official documentation: Introduction to events</a></p>\n", "is_correct": true}]}, {"question": "Q46. When will the code inside finally block be executed in a try-catch statement?\n", "alternatives": [{"alternative": " if there is an error, it won't execute at all\n", "is_correct": false}, {"alternative": " between the try and catch blocks\n", "is_correct": false}, {"alternative": " after the try and catch blocks\n", "is_correct": true}, {"alternative": " when the finally block overrides the catch block and executes in its place\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch\">Official documentation: try-catch</a></p>\n", "is_correct": false}]}, {"question": "Q47. What method correctly extends the string class?\n", "alternatives": [{"alternative": " public static string IsvalidName(this string i, string value) {}\n", "is_correct": true}, {"alternative": " public static void IsvalidName(this string i, string value) {}\n", "is_correct": false}, {"alternative": " public string IsvalidName(this string i, string value) {}\n", "is_correct": false}, {"alternative": " public void IsvalidName(this string i, string value) {}\n</ul>\n", "is_correct": false}]}, {"question": "Q48. How are C# classes limited?\n", "alternatives": [{"alternative": " They do not support multiple inheritance.\n", "is_correct": true}, {"alternative": " They support multiple inheritance.\n", "is_correct": false}, {"alternative": " They can have only a set number of properties.\n", "is_correct": false}, {"alternative": " They can have only a set number of methods.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes#class-inheritance\">Official documentation: Class inheritance</a></p>\n", "is_correct": false}]}, {"question": "Q49. What function do namespaces perform?\n", "alternatives": [{"alternative": " Namespaces calculate code coverage at runtime.\n", "is_correct": false}, {"alternative": " Namespaces compile application code together at compile time.\n", "is_correct": false}, {"alternative": " Namespaces group code together into a single repository.\n", "is_correct": false}, {"alternative": " Namespaces separate code into groupings, control access, and void naming collisions.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace\">Official documentation: namespace</a></p>\n", "is_correct": true}]}, {"question": "Q50. What is the correct way to write a public property with a private backing field?\n", "alternatives": [{"alternative": " A\n</ul>\n<p><code>cs\nprivate int _password;\npubic int Password = { get; set; }</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " B\n</ul>\n<p><code>cs\nprivate int _password;\npublic int Password = _password;</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " C\n</ul>\n<p><code>cs\nprivate int _password;\npublic int Password\n{\n  get -&gt; _password;\n  set-&gt; _password = value;\n}</code></p>\n<ul>\n", "is_correct": false}, {"alternative": " D\n</ul>\n<p><code>cs\nprivate int _password;\npublic int Password\n{\n  get { return _password; }\n  set { _password = value; }\n}</code></p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties\">Official documentation: Using Properties</a></p>\n", "is_correct": true}]}, {"question": "Q51. What is a thread pool?\n", "alternatives": [{"alternative": " a collection of synchronous methods created during initialization that cannot be reused\n", "is_correct": false}, {"alternative": " a collection of threads created during initialization that can be reused\n", "is_correct": true}, {"alternative": " a collection of threads only recognized at compile time that can be reused\n", "is_correct": false}, {"alternative": " a collection of asynchronous methods created at compile time that cannot be reused\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool?view=net-5.0\">Official documentation: ThreadPool Class</a></p>\n", "is_correct": false}]}, {"question": "Q52. When an object in C# is serialized, what is it converted to?\n", "alternatives": [{"alternative": " XML\n", "is_correct": false}, {"alternative": " JSON\n", "is_correct": false}, {"alternative": " byte stream\n", "is_correct": true}, {"alternative": " value stream\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/serialization/\">Official documentation: Serialization</a></p>\n", "is_correct": false}]}, {"question": "Q53. What is a delegate\n", "alternatives": [{"alternative": " a variable that holds a reference to a value type and its content\n", "is_correct": false}, {"alternative": " a specific value type that can be used only in callback methods\n", "is_correct": false}, {"alternative": " a type that holds a reference to a method with a particular parameter list and return type\n", "is_correct": true}, {"alternative": " a custom variable type that can be used in abstract classes\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/\">Official documentation: Delegates</a></p>\n", "is_correct": false}]}, {"question": "Q54. What are the four keywords associated with exception handling in C#?\n", "alternatives": [{"alternative": " try, catch, valid, invalid\n", "is_correct": false}, {"alternative": " try, valid, finally, throw\n", "is_correct": false}, {"alternative": " try, catch, finally, throw\n", "is_correct": true}, {"alternative": " finally, throw, valid, invalid\n</ul>\n<p><a href=\"https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm#:~:text=Exceptions%20provide%20a%20way%20to,catch%2C%20finally%2C%20and%20throw.\">Tutorial Point</a></p>\n", "is_correct": false}]}, {"question": "Q55. What is the main difference between the is and as operators?\n", "alternatives": [{"alternative": " The is operator checks instance types, while the as operator checks the inherited type.\n", "is_correct": false}, {"alternative": " The is operator checks primitive data types, while the as operator checks the object type.\n", "is_correct": false}, {"alternative": " The as operator checks object type, while the is operator attempts to cast an object to a specific type.\n", "is_correct": false}, {"alternative": " The is operator checks object type, while the as operator attempts to cast an object to a specific type.\n</ul>\n<p><a href=\"https://www.pluralsight.com/guides/csharp-is-as-operators-is-expressions\">Pluralsight guide</a></p>\n", "is_correct": true}]}, {"question": "Q56. What is the difference between finally and finalize blocks?\n", "alternatives": [{"alternative": " The finally block is called during the execution of a try and catch block, while the finalize method is called after garbage collection.\n", "is_correct": false}, {"alternative": " The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.\n", "is_correct": true}, {"alternative": " The finalize block is called before the execution of a try and catch block, while the finally method is called just before garbage collection.\n", "is_correct": false}, {"alternative": " The finalize block is called during the execution of a try and catch block, while the finally method is called after garbage collection.\n</ul>\n<p><a href=\"https://www.c-sharpcorner.com/forums/final-finally-and-finalize\">C-sharpcorner</a></p>\n", "is_correct": false}]}, {"question": "Q57. Your application has a value type called username that needs to be able to accept null values, but this is generating compile-time errors. How would you fix this in code?\n", "alternatives": [{"alternative": " Null<string> username = null;\n", "is_correct": false}, {"alternative": " string? username = null;\n", "is_correct": true}, {"alternative": " Type<string>? username = null;\n", "is_correct": false}, {"alternative": " Optional<string> username = null;\n</ul>\n", "is_correct": false}]}, {"question": "Q58. Which code snippet correctly declares a custom exception named InvalidResponse?\n", "alternatives": [{"alternative": " struct InvalidResponse: Exception {}\n", "is_correct": false}, {"alternative": " class InvalidResponse: Exception {}\n", "is_correct": true}, {"alternative": " public Exception InvalidResponse = new Exception ();\n", "is_correct": false}, {"alternative": " public Exception InvalidResponse () -&gt; Exception;\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions\">Official documentation: Exceptions</a></p>\n", "is_correct": false}]}, {"question": "Q59. How would you write an enum variable called AppState with values for Offline, Loading, and Ready?\n", "alternatives": [{"alternative": " enum AppState = [Offline, Loading, Ready]\n", "is_correct": false}, {"alternative": " enum AppState {\"Offline\", \"Loading\", \"Ready\"}\n", "is_correct": false}, {"alternative": " enum AppState = {Offline, Loading, Ready}\n", "is_correct": false}, {"alternative": " enum AppState {Offline, Loading, Ready}\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\">Official documentation: Enum</a></p>\n", "is_correct": true}]}, {"question": "Q60. What is the main difference between a value type and a reference type?\n", "alternatives": [{"alternative": " A value type can be any primitive type, while reference types must be type-agnostic.\n", "is_correct": false}, {"alternative": " A value type refers to another value, while a reference type refers to a value in memory.\n", "is_correct": false}, {"alternative": " A value type stores an actual value, while a reference type is a pointer to a value.\n", "is_correct": true}, {"alternative": "\n<p> A value type is available only at runtime, while a reference type is available only at compile time.</p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\">Official documentation: Value types</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\">Official documentation: Reference types</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q61. What is the difference between the <code>break</code> and <code>continue</code> keywords?\n", "alternatives": [{"alternative": " The <code>break</code> keyword is used to break out of multiple iteration statements, while <code>continue</code> can only break out of code blocks that have single iterations.\n", "is_correct": false}, {"alternative": " The <code>break</code> keyword literally breaks out of a control flow statement, while <code>continue</code> ignores the rest of the control statement or iteration and starts the next one.\n", "is_correct": true}, {"alternative": " The <code>break</code> keyword literally breaks out of the current control flow code and stops it dead, while <code>continue</code> keeps executing the code after an exception is thrown.\n", "is_correct": false}, {"alternative": " The <code>break</code> keyword jumps out of an iteration and then proceeds with the rest of the control flow code, while <code>continue</code> stops the executing code dead.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements\">Official documentation: Jump statements</a></p>\n", "is_correct": false}]}, {"question": "Q62. Which code snippet correctly declares a variable named userId with a public <code>get</code> and private <code>set</code>?\n", "alternatives": [{"alternative": " <code>public int userID &lt;get, set&gt;;</code>\n", "is_correct": false}, {"alternative": " <code>public int userID [get, private set];</code>\n", "is_correct": false}, {"alternative": " <code>public int userID { get; private set; }</code>\n", "is_correct": true}, {"alternative": " <code>public int userID = { public get, private set };</code>\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/properties\">Official documentation: Properties</a></p>\n", "is_correct": false}]}, {"question": "Q63. What is true about virtual methods?\n", "alternatives": [{"alternative": " <code>Overriding virtual methods in a derived class is mandatory.</code>\n", "is_correct": false}, {"alternative": " <code>Overriding virtual methods in a derived class is not possible.</code>\n", "is_correct": false}, {"alternative": " <code>Virtual methods always need a default implementation.</code>\n", "is_correct": true}, {"alternative": "\n<p> <code>Virtual methods cannot have default implementation.</code></p>\n\n", "is_correct": false}, {"alternative": "\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual\">Official documentation: virtual</a></p>\n\n", "is_correct": false}, {"alternative": "<a href=\"https://www.c-sharpcorner.com/UploadFile/3d39b4/virtual-method-in-C-Sharp/\">c-sharpcorner: Virtual Method in C#</a>\n</ul>\n", "is_correct": false}]}, {"question": "Q64. What is likely to happen if you have multiple threads accessing the same resource in your program?\n", "alternatives": [{"alternative": " <code>resource overload</code>\n", "is_correct": false}, {"alternative": " <code>thread jumping</code>\n", "is_correct": false}, {"alternative": " <code>deadlock and race conditions</code>\n", "is_correct": true}, {"alternative": " <code>nothing, since this is what threading is for</code>\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/archive/msdn-magazine/2008/october/concurrency-hazards-solving-problems-in-your-multithreaded-code\">Official documentation: race conditions</a></p>\n", "is_correct": false}]}, {"question": "Q65. How do you indicate that a string might be null?\n", "alternatives": [{"alternative": " <code>A string cannot be nullable.</code>\n", "is_correct": false}, {"alternative": " <code>string? myVariable</code>\n", "is_correct": true}, {"alternative": " <code>string myVariable = null</code>\n", "is_correct": false}, {"alternative": " <code>string(null) myVariable</code>\n</ul>\n<p><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#declaration-and-assignment\">Official documentation: nullable value types</a></p>\n", "is_correct": false}]}, {"question": "Q66. Do you need to declare an out variable before you use it?\n", "alternatives": [{"alternative": " <code>No, you can declare an out in the parameter list.</code>\n", "is_correct": true}, {"alternative": " <code>Out variables are no longer part of C#.</code>\n", "is_correct": false}, {"alternative": " <code>You must declare it if it is a primitive type.</code>\n", "is_correct": false}, {"alternative": " <code>Yes.</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q67. How would you access the last two people in an array named People?\n", "alternatives": [{"alternative": " <code>People[..^2]</code>\n", "is_correct": true}, {"alternative": " <code>You cannot do this in C#.</code>\n", "is_correct": false}, {"alternative": " <code>People[..^3]</code>\n", "is_correct": false}, {"alternative": " <code>People[^2]</code>\n</ul>\n<p>Explain: You <strong>can</strong> do this in C#. However, none of the above answers are correct. You could access the last two items by using <code>People[^2..]</code>. Please see <a href=\"https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes/issues/3354\">issue #3354</a> for more information.\nSee also: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges\">Official Documentation: Ranges</a></p>\n", "is_correct": false}]}, {"question": "Q68. When can anonymous types be created?\n", "alternatives": [{"alternative": " <code>at compile time</code>\n", "is_correct": true}, {"alternative": " <code>after runtime</code>\n", "is_correct": false}, {"alternative": " <code>at runtime</code>\n", "is_correct": false}, {"alternative": " <code>after compile time</code>\n</ul>\n<p><a href=\"https://www.c-sharpcorner.com/UploadFile/ff2f08/anonymous-types-in-C-Sharp/\">C-sharpcorner: Anonymous Types</a></p>\n", "is_correct": false}]}, {"question": "Q69. What is true about thread multitasking?\n", "alternatives": [{"alternative": " <code>Thread multitasking allows code to be executed concurrently</code>\n", "is_correct": true}, {"alternative": " <code>Thread multitasking allows code to be executed only when handling a user event.</code>\n", "is_correct": false}, {"alternative": " <code>Thread multitasking blocks code from being executed simultaneously to guard memory.</code>\n", "is_correct": false}, {"alternative": " <code>Thread multitasking adds single-threaded code blocks together.</code>\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading\">Official Documentation: Threads</a></p>\n", "is_correct": false}]}, {"question": "Q70. What accessibility level does this class field have ?\n<p><code>private string LastName;</code></p>\n", "alternatives": [{"alternative": " It can be used by other code only in the same class or struct.\n", "is_correct": true}, {"alternative": " It can be used by other code in a referenced assembly.\n", "is_correct": false}, {"alternative": " It can be used only by code contained in a derived class.\n", "is_correct": false}, {"alternative": " It can be used by other code in the same assembly.\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/accessibility-levels\">Official Documentation: Accessibility Levels</a></p>\n", "is_correct": false}]}, {"question": "Q71. How would you correctly declare a jagged array called 'partyInvites' with 10 empty elements?\n", "alternatives": [{"alternative": " <code>string[] partyInvites = new string[10];</code>\n", "is_correct": false}, {"alternative": " <code>string[][] partyInvites = new string[10][];</code>\n", "is_correct": true}, {"alternative": " <code>string[][] partyInvites = new string[10]();</code>\n", "is_correct": false}, {"alternative": " <code>string &lt;[]&gt; partyInvites = new string &lt;[10]&gt;;</code>\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\">Official Documentation: Jagged Arrays</a></p>\n", "is_correct": false}]}, {"question": "Q72. How could you pause a thread for three seconds?\n", "alternatives": [{"alternative": " Thread.Pause(3000);\n", "is_correct": false}, {"alternative": " Thread.Resume(-3000);\n", "is_correct": false}, {"alternative": " Thread.Suspend(3000);\n", "is_correct": false}, {"alternative": " Thread.Sleep(3000);\n</ul>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep?view=net-6.0\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q73. What is wrong with this code?\n<p>```cs\nvoid MyFunction()\n{\n    {\n        int a = 10;\n        int b = 20;\n        int c = a + b;\n    }</p>\n<pre><code>Console.WriteLine(c);\n</code></pre>\n<p>}\n```</p>\n", "alternatives": [{"alternative": " Variable c is never used; displaying it on the console does not count as usage.\n", "is_correct": false}, {"alternative": " Variables a and b are never used.\n", "is_correct": false}, {"alternative": " You cannot place code inside brackets inside another block.\n", "is_correct": false}, {"alternative": " Variable c no longer exists outside the block.\n</ul>\n<p><a href=\"https://stackoverflow.com/a/6136865\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q74. Which statement is True?\n", "alternatives": [{"alternative": " All are true.\n", "is_correct": false}, {"alternative": " None are true.\n", "is_correct": false}, {"alternative": " string is a value type.\n", "is_correct": false}, {"alternative": " string is an alias for String\n</ul>\n<p><a href=\"https://stackoverflow.com/q/7074\">Reference</a></p>\n", "is_correct": true}]}, {"question": "Q75. How would you return more than one value from a method?\n", "alternatives": [{"alternative": " Use either a tuple or an out variable.\n", "is_correct": true}, {"alternative": " The only way is to use an out variable.\n", "is_correct": false}, {"alternative": " The only way is to use a tuple.\n", "is_correct": false}, {"alternative": " This cannot be done\n</ul>\n", "is_correct": false}]}, {"question": "Q76. Which is a valid example of a derived class?\n", "alternatives": [{"alternative": " <code>public class PremiumUser sub User {}</code>\n", "is_correct": false}, {"alternative": " <code>public class PremiumUser: User {}</code>\n", "is_correct": true}, {"alternative": " <code>public class PremiumUser -&gt; sub User {}</code>\n", "is_correct": false}, {"alternative": " <code>public class User: PremiumUser {}</code>\n</ul>\n", "is_correct": false}]}, {"question": "Q77. What is the correct way to call a static method named DebugString from a static class called InputManager?\n", "alternatives": [{"alternative": " <code>static InputManager.DebugString();</code>\n", "is_correct": false}, {"alternative": " <code>InputManager().DebugString;</code>\n", "is_correct": false}, {"alternative": " <code>new InputManager().DebugString();</code>\n", "is_correct": false}, {"alternative": " <code>InputManager.DebugString();</code>\n</ul>\n", "is_correct": true}]}, {"question": "Q78. What values can be assigned to this variable?\n<p><code>cs\npublic string? nickname</code></p>\n", "alternatives": [{"alternative": " null\n", "is_correct": false}, {"alternative": " String values\n", "is_correct": false}, {"alternative": " String values or null\n", "is_correct": true}, {"alternative": " String values with more than one character\n</ul>", "is_correct": false}]}]}